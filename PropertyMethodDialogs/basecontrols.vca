SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NEI3J
[CLASS] pageframe
[BASECLASS] pageframe
[OBJNAME] basepageframe
[START PROPERTIES]
ErasePage = .T.
MemberClassLibrary = basecontrols.vcx
MemberClass = "basepage"
PageCount = 1
TabStyle = 1
Height = 250
_memberdata = 
Name = "basepageframe"
Basepage1.Name = "Basepage1"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basepageframe

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NFDNC
[CLASS] commandbutton
[BASECLASS] commandbutton
[OBJNAME] basecommandbutton
[START PROPERTIES]
Height = 23
Width = 75
FontName = "Tahoma"
FontSize = 8
Caption = "Command1"
_memberdata = 
Name = "basecommandbutton"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecommandbutton
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NI0NJ
[CLASS] container
[BASECLASS] container
[OBJNAME] basecontainer
[START PROPERTIES]
BackStyle = 0
BorderWidth = 0
Style = 3
_memberdata = 
Name = "basecontainer"
[END PROPERTIES]
[START METHODS]
PROCEDURE enabled_assign
lparameters tlEnabled
This.Enabled = tlEnabled
This.SetAll('Enabled', tlEnabled)

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
*enabled_assign 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecontainer

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NJ9BO
[CLASS] checkbox
[BASECLASS] checkbox
[OBJNAME] basecheckbox
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
AutoSize = .T.
Alignment = 0
BackStyle = 0
Caption = "Check1"
Value = .F.
lupdatecontrolsourceonchange = .F.
_memberdata =      310<VFPData><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/></VFPData>
Name = "basecheckbox"
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
with This
	if .lUpdateControlSourceOnChange
		.UpdateControlSource()
	endif .lUpdateControlSourceOnChange
	.AnyChange()
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with .Value in (lcAlias)
		else
			store .Value to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
_memberdata XML Metadata for customizable properties
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecheckbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NJYFR
[CLASS] combobox
[BASECLASS] combobox
[OBJNAME] basecombobox
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Height = 22
Style = 2
ItemTips = .T.
_memberdata =      354<VFPData><memberdata name="aitems" type="property" display="aItems"/><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange"/></VFPData>
lupdatecontrolsourceonchange = .F.
Name = "basecombobox"
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
* Initialize aItems.

This.aItems = ''

ENDPROC
PROCEDURE InteractiveChange
with This
	if .lUpdateControlSourceOnChange
		.UpdateControlSource()
	endif .lUpdateControlSourceOnChange
	.AnyChange()
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with .Value in (lcAlias)
		else
			store .Value to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. if UpdateControlSource should be called from InteractiveChange
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
^aitems[1,0] An array of items for the RowSource if RowSourceType is set to 5-Array
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecombobox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NKBXQ
[CLASS] label
[BASECLASS] label
[OBJNAME] baselabel
[START PROPERTIES]
AutoSize = .T.
FontName = "Tahoma"
FontSize = 8
BackStyle = 0
Caption = "Label1"
_memberdata = 
Name = "baselabel"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselabel

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NWI42
[CLASS] optiongroup
[BASECLASS] optiongroup
[OBJNAME] baseoptiongroup
[START PROPERTIES]
MemberClassLibrary = basecontrols.vcx
MemberClass = "baseoptionbutton"
ButtonCount = 2
BackStyle = 0
BorderStyle = 0
Value = 0
Height = 46
Width = 71
_memberdata =      293<VFPData><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/></VFPData>
lupdatecontrolsourceonchange = .F.
Name = "baseoptiongroup"
Baseoptionbutton1.Left = 5
Baseoptionbutton1.Top = 5
Baseoptionbutton1.Name = "Baseoptionbutton1"
Baseoptionbutton2.Left = 5
Baseoptionbutton2.Top = 23
Baseoptionbutton2.Name = "Baseoptionbutton2"
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
with This
	if .lUpdateControlSourceOnChange
		.UpdateControlSource()
	endif .lUpdateControlSourceOnChange
	.AnyChange()
endwith

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE enabled_access
*To do: Modify this routine for the Access method
RETURN THIS.Enabled
ENDPROC
PROCEDURE enabled_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
THIS.Enabled = m.vNewVal

Local loButton
For each loButton in this.Buttons
	loButton.Enabled = m.vNewVal
EndFor
ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with .Value in (lcAlias)
		else
			store .Value to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. if UpdateControlSource should be called from InteractiveChange
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*updatecontrolsource Updates the ControlSource with the new value
*enabled_access 
*enabled_assign 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseoptiongroup
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NXWHS
[CLASS] optionbutton
[BASECLASS] optionbutton
[OBJNAME] baseoptionbutton
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
BackStyle = 0
Caption = "Option1"
AutoSize = .T.
_memberdata = 
Name = "baseoptionbutton"
[END PROPERTIES]
[START METHODS]
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseoptionbutton
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0O3172
[CLASS] textbox
[BASECLASS] textbox
[OBJNAME] basetextbox
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Format = "T"
Height = 22
SelectOnEntry = .T.
lupdatecontrolsourceonchange = .F.
_memberdata =      394<VFPData><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/><memberdata name="validation" type="method" display="Validation" favorites="True"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/></VFPData>
Name = "basetextbox"
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), then
* call the AnyChange method, and restore the current cursor position in case
* This.Refresh got called from AnyChange.

local lnSelStart
with This
	do case
		case not .lUpdateControlSourceOnChange
		case not .UpdateControlSource()
			nodefault
		otherwise
			lnSelStart = .SelStart
			.AnyChange()
			.SelStart = lnSelStart
	endcase
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE Valid
* If we're not canceling, call the Validation method to do the actual
* validation.

local luReturn
with This
	if lastkey() <> 27
		luReturn = .Validation()
	else
		luReturn = .T.
	endif lastkey() <> 27
endwith
return luReturn

ENDPROC
PROCEDURE When
* Store the current value into the Tag property so it can be restored if Valid
* fails.

This.Tag = This.Value

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	luValue, ;
	lcAlias, ;
	lcField, ;
	llReturn
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		luValue = iif(vartype(.Value) = 'C', trim(.Value), .Value)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		try
			if used(lcAlias)
				replace (lcField) with luValue in (lcAlias)
			else
				store luValue to (.ControlSource)
			endif used(lcAlias)
			llReturn = .T.
		catch
		endtry
	endif lnPos > 0 ...
endwith
return llReturn

ENDPROC
PROCEDURE validation
* Abstract method

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
_memberdata XML Metadata for customizable properties
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*validation Custom validation code
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basetextbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0OEVWC
[CLASS] editbox
[BASECLASS] editbox
[OBJNAME] baseeditbox
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
SelectOnEntry = .T.
IntegralHeight = .T.
lupdatecontrolsourceonchange = .F.
_memberdata =      394<VFPData><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/><memberdata name="validation" type="method" display="Validation" favorites="True"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/></VFPData>
Name = "baseeditbox"
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), call
* the AnyChange method, and restore the current cursor position in case
* This.Refresh got called from AnyChange.

local lnSelStart
with This
	lnSelStart = .SelStart
	if .lUpdateControlSourceOnChange
		.UpdateControlSource()
	endif .lUpdateControlSourceOnChange
	.AnyChange()
	.SelStart = lnSelStart
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE Valid
* If we're not canceling, call the Validation method to do the actual
* validation.

local luReturn
with This
	if lastkey() <> 27
		luReturn = .Validation()
	else
		luReturn = .T.
	endif lastkey() <> 27
endwith
return luReturn

ENDPROC
PROCEDURE When
* Store the current value into the Tag property so it can be restored if Valid
* fails.

This.Tag = This.Value

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with .Value in (lcAlias)
		else
			store .Value to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
PROCEDURE validation
* Abstract method

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
_memberdata XML Metadata for customizable properties
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*validation Custom validation code
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseeditbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NH0LD5ZU
[CLASS] page
[BASECLASS] page
[OBJNAME] basepage
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Caption = "Page1"
Height = 142
Width = 142
_memberdata = 
Name = "basepage"
[END PROPERTIES]
[START METHODS]
PROCEDURE Activate
* Refresh all controls.

local llLockScreen
with This
	llLockScreen = Thisform.LockScreen
	if not llLockScreen
		Thisform.LockScreen = .T.
	endif not llLockScreen
	.Refresh()
	if not llLockScreen
		Thisform.LockScreen = .F.
	endif not llLockScreen
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basepage

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NH0MVC3K
[CLASS] listbox
[BASECLASS] listbox
[OBJNAME] baselistbox
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
IntegralHeight = .T.
ItemTips = .T.
_memberdata =      293<VFPData><memberdata name="anychange" type="method" display="AnyChange" favorites="True"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/><memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange"/></VFPData>
lupdatecontrolsourceonchange = .F.
Name = "baselistbox"
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
with This
	if .lUpdateControlSourceOnChange
		.UpdateControlSource()
	endif .lUpdateControlSourceOnChange
	.AnyChange()
endwith

ENDPROC
PROCEDURE ProgrammaticChange
with This
	.UpdateControlSource()
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with .Value in (lcAlias)
		else
			store .Value to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. if UpdateControlSource should be called from InteractiveChange
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselistbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NO0N8IIY
[CLASS] collection
[BASECLASS] collection
[OBJNAME] basecollection
[START PROPERTIES]
Height = 23
Width = 23
_memberdata = 
Name = "buildercollection"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecollection

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NS0R832K
[CLASS] shape
[BASECLASS] shape
[OBJNAME] baseline3d
[START PROPERTIES]
Height = 1
Width = 100
BackStyle = 0
SpecialEffect = 0
Style = 3
_memberdata = 
Name = "baseline3d"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseline3d

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0OM0FJA9Q
[CLASS] spinner
[BASECLASS] spinner
[OBJNAME] basespinner
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Height = 22
SelectOnEntry = .T.
_memberdata =      171<VFPData><memberdata name="anychange" type="method" display="AnyChange"/><memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/></VFPData>
Name = "basespinner"
[END PROPERTIES]
[START METHODS]
PROCEDURE Error
lparameters tnError, ;
	tcMethod, ;
	tnLine
do case

* Spinners bound to object properties seem to have a problem when invalid
* values are entered from the keyboard: the Error method fires with error 1469
* (property value is out of bounds) with tcMethod being "ControlSource" rather
* than the Valid method catching it.

	case tnError = 1469
		return

* Ignore "property is read-only" errors.

	case tnError = 1743
		return

* All other errors get passed on to the form.

	otherwise
		Thisform.Error(tnError, This.Name + '.' + tcMethod, tnLine)
endcase

ENDPROC
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), call
* the AnyChange method, and restore the current cursor position in case
* This.Refresh is called from AnyChange.

local lnSelStart
with This
	do case
		case not between(.Value, .SpinnerLowValue, .SpinnerHighValue)
			nodefault
		case not .lUpdateControlSourceOnChange
		case not .UpdateControlSource()
			nodefault
		otherwise
			lnSelStart = .SelStart
			.AnyChange()
			.SelStart = lnSelStart
	endcase
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), call
* the AnyChange method. Note: if the value is invalid, don't do anything.

with This
	do case
		case not between(.Value, .SpinnerLowValue, .SpinnerHighValue)
			nodefault
		case not .UpdateControlSource()
			nodefault
		otherwise
			.AnyChange()
	endcase
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE updatecontrolsource
local lnPos, ;
	luValue, ;
	lcAlias, ;
	lcField
with This
	lnPos = at('.', .ControlSource)
	if lnPos > 0 and not .Value == evaluate(.ControlSource)
		luValue = iif(vartype(.Value) = 'C', trim(.Value), .Value)
		lcAlias = left(.ControlSource, lnPos - 1)
		lcField = substr(.ControlSource, lnPos + 1)
		if used(lcAlias)
			replace (lcField) with luValue in (lcAlias)
		else
			store luValue to (.ControlSource)
		endif used(lcAlias)
	endif lnPos > 0 ...
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*updatecontrolsource Updates the ControlSource with the new value
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basespinner
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KP8Y2
[CLASS] container
[BASECLASS] container
[OBJNAME] baselabelledbox
[START PROPERTIES]
Width = 168
Height = 133
BackStyle = 0
BorderWidth = 0
Style = 3
_memberdata =       83<VFPData><memberdata name="builder" type="property" display="Builder"/></VFPData>
builder = BaseLabelledBoxBuilder.PRG
Name = "baselabelledbox"
[END PROPERTIES]
[START METHODS]
PROCEDURE height_assign
* When the height of the container is resized, resize the shape.

lparameters tnHeight
This.Height = tnHeight
This.shpBox.Height = tnHeight - This.shpBox.Top

ENDPROC
PROCEDURE width_assign
* When the width of the container is resized, resize the shape.

lparameters tnWidth
store tnWidth to This.Width, This.shpBox.Width

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
3[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
builder Specifies the builder for this object
*width_assign 
*height_assign 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KXY92
[CLASS] baseline3d
[CLASSLOC] basecontrols.vcx
[BASECLASS] shape
[OBJNAME] shpBox
[PARENT] baselabelledbox
[START PROPERTIES]
Top = 7
Height = 124
Width = 166
Name = "shpBox"
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KXY9D
[CLASS] baselabel
[CLASSLOC] basecontrols.vcx
[BASECLASS] label
[OBJNAME] lblBox
[PARENT] baselabelledbox
[START PROPERTIES]
BackStyle = 1
Left = 10
Style = 3
Name = "lblBox"
[END PROPERTIES]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselabelledbox

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _18B0TPO44
[CLASS] form
[BASECLASS] form
[OBJNAME] baseform
[START PROPERTIES]
DataSession = 2
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "Form"
FontName = "Tahoma"
FontSize = 8
AllowOutput = .F.
_memberdata =      729<VFPData>
	<memberdata name="cfoxuserid" type="property" display="cFoxUserID" favorites="True"/>
	<memberdata name="cfoxusername" type="property" display="cFoxUserName" favorites="True"/>
	<memberdata name="lpersistsizeposition" type="property" display="lPersistSizePosition" favorites="True"/>
	<memberdata name="lsavesettings" type="property" display="lSaveSettings" favorites="True"/>
	<memberdata name="opersist" type="property" display="oPersist"/>
	<memberdata name="refreshform" type="method" display="RefreshForm"/>
	<memberdata name="restoresettings" type="method" display="RestoreSettings" favorites="True"/>
	<memberdata name="savesettings" type="method" display="SaveSettings" favorites="True"/>
</VFPData>

cfoxuserid = 
cfoxusername = 
opersist = .NULL.
lsavesettings = .T.
lpersistsizeposition = .T.
Name = "baseform"
[END PROPERTIES]
[START METHODS]
PROCEDURE Destroy
* Save the current settings

if This.lSaveSettings
	This.SaveSettings()
endif This.lSaveSettings

* Nuke member objects.

This.oPersist = .NULL.

ENDPROC
PROCEDURE Init
local lcLibrary
with This

* Restore saved options and the size and position of the form.

	if .lSaveSettings
		lcLibrary = 'FoxResource.prg'
		.oPersist = newobject('FoxResource', lcLibrary)
		.RestoreSettings()
	endif .lSaveSettings
endwith

ENDPROC
PROCEDURE Load
* Set up the environment.

set deleted on
set exact off
set exclusive off
set multilocks on
set safety off
set talk off
sys(3054, 0)

ENDPROC
PROCEDURE refreshform
* Lock for form while refreshing.

This.LockScreen = .T.
This.Refresh()
This.LockScreen = .F.

ENDPROC
PROCEDURE restoresettings
* Restore saved settings from FOXUSER.

with This
	.oPersist.Load(.cFoxUserID, .cFoxUserName)
	if .lPersistSizePosition
		.Top    = nvl(.oPersist.Get('Top'),  .Top)
		.Left   = nvl(.oPersist.Get('Left'), .Left)
		.Height = nvl(.oPersist.Get('Height'),   .Height)
		.Width  = nvl(.oPersist.Get('Width'),    .Width)
	endif .lPersistSizePosition
endwith

ENDPROC
PROCEDURE savesettings
* Save settings to FOXUSER.

with This
	if .lPersistSizePosition
		.oPersist.Set('Top',    .Top)
		.oPersist.Set('Left',   .Left)
		.oPersist.Set('Height', .Height)
		.oPersist.Set('Width',  .Width)
	endif .lPersistSizePosition
	.oPersist.Save(.cFoxUserID, .cFoxUserName)
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
cfoxuserid The FOXUSER ID to save/restore settings to
cfoxusername The FOXUSER NAME to save/restore settings to
opersist A reference to a FoxResource object
lsavesettings .T. to save and restore settings
lpersistsizeposition .T. to persist the size and position of the form
*restoresettings Restores saved settings from FOXUSER
*savesettings Saves settings to FOXUSER
*refreshform Refreshes the form with the LockScreen .T.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseform
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1A20U8PB3
[CLASS] shape
[BASECLASS] shape
[OBJNAME] baseshape
[START PROPERTIES]
Height = 17
Width = 100
BackStyle = 0
Name = "baseshape"
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseshape

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2I50R1EAC
[CLASS] basecombobox
[CLASSLOC] basecontrols.vcx
[BASECLASS] combobox
[OBJNAME] hightlightercombobox
[START PROPERTIES]
FontSize = 9
ControlSource = "Thisform.oCallingForm.aGridHighlighting ( This.nRow, 1)"
nrow = 0
_memberdata =      493<VFPData>
	<memberdata name="aitems" type="property" display="aItems"/>
	<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
	<memberdata name="updatecontrolsource" type="method" display="UpdateControlSource"/>
	<memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange"/>
	<memberdata name="nrow" type="property" display="nRow"/><memberdata name="sethighlights" type="method" display="SetHighlights"/></VFPData>

Name = "hightlighercombobox"
[END PROPERTIES]
[START METHODS]
PROCEDURE Init
WITH This
  .AddItem( [None] )
  .AddItem( [ForeColor] )
  .AddItem( [BackColor] )
  .AddItem( [Bold] )
  .AddItem( [Italic] )
ENDWITH

ENDPROC
PROCEDURE Refresh
This.SetHighlights()

ENDPROC
PROCEDURE Valid
thisform.SaveHighLightSettings()

With Thisform.oCallingForm
	.SetGridHighlighting()
	.grdMembers.Refresh()
Endwith

This.SetHighlights()
This.Parent.cntColors.Refresh()
ENDPROC
PROCEDURE sethighlights
Local lcValue

With This
	.ForeColor = Rgb(0,0,0)
	.BackColor = Rgb(255,255,255)
	.FontBold = .F.
	.FontItalic = .F.
	
	lcValue = Thisform.oCallingForm.aGridHighlighting ( This.nRow, 1)

	Do Case
		Case lcValue = 'ForeColor'
			This.ForeColor = Val (Thisform.oCallingForm.aGridHighlighting ( This.nRow, 2))
		Case lcValue = 'BackColor'
			This.BackColor = Val (Thisform.oCallingForm.aGridHighlighting ( This.nRow, 2))
		Case lcValue = 'Bold'
			This.FontBold = .T.
		Case lcValue = 'BackColor'
			This.ForeItalic = .T.
	EndCase
		
Endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
nrow
*sethighlights 
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] hightlighercombobox
[START PROPERTIES]
Tahoma, 0, 9, 5, 14, 12, 23, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _2I512QQQH
[CLASS] basecommandbutton
[CLASSLOC] basecontrols.vcx
[BASECLASS] commandbutton
[OBJNAME] highlightercommandbutton
[START PROPERTIES]
Height = 23
Width = 32
Picture = color2_16x16.bmp
Caption = ""
nrow = 0
_memberdata =       77<VFPData><memberdata name="nrow" type="property" display="nRow"/></VFPData>

Name = "highlightercommandbutton"
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
Local lnColor, lnNewColor

lnColor = Val (Thisform.oCallingForm.aGridHighlighting ( This.nRow, 2))
lnNewColor = GetColor (lnColor)

If lnColor < 0
	Return
EndIf

Thisform.oCallingForm.aGridHighlighting ( This.nRow, 2) = Transform (lnNewColor)

****************************************************************

thisform.SaveHighLightSettings()

With Thisform.oCallingForm
	.SetGridHighlighting()
	.grdMembers.Refresh()
EndWith

Thisform.Refresh()



ENDPROC
PROCEDURE Refresh
This.Visible = InList ( Thisform.oCallingForm.aGridHighlighting ( This.nRow, 1), "ForeColor", "BackColor")

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
nrow
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] highlightercommandbutton
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]
[EOF]
