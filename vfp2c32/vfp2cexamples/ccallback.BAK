#INCLUDE vfp2c.h

&& CreateCallbackFunc
&& prerequisites: InitVFP2C32 must have been called with the VFP2C_INIT_CALLBACK flag set

CD (FULLPATH(JUSTPATH(SYS(16))))
SET LIBRARY TO vfp2c32.fll ADDITIVE
INITVFP2C32(VFP2C_INIT_CALLBACK)

LOCAL loCallback

DECLARE INTEGER EnumWindows IN user32.dll INTEGER, INTEGER
loCallBack = CREATEOBJECT('WNDENUMPROC')
EnumWindows(loCallback.Address,0)

DEFINE CLASS WNDENUMPROC AS Exception

	Address = 0

	FUNCTION Init
		&& the C prototype for the callback function is
		&& BOOL CALLBACK EnumWindowsProc(HWND hwnd,LPARAM lParam)
		&& BOOL is clear ..
		&& CALLBACK is a preprocessor definition for "WINAPI" which in turn is a definition for "_stdcall"
		&& which specifies the calling convention of the funtion.
		&& You can just ignore this since the callback functions created by CreateCallbackFunc always use
		&& the _stdcall calling convention by design. (I've never seen a C Callback definition using another 
		&& calling convention)
		THIS.Address = CreateCallbackFunc('EnumWindowsCallback','BOOL','LONG, LONG',THIS)
	ENDFUNC
	
	FUNCTION Destroy
		IF THIS.Address != 0
			DestroyCallbackFunc(THIS.Address)
		ENDIF
	ENDFUNC
	
	FUNCTION EnumWindowsCallback(hHwnd,lParam)
		?hHwnd,lParam
		RETURN .T.
	ENDFUNC
	
ENDDEFINE


DEFINE CLASS InternetStatusCallback AS Exception

	Address = 0
	
	FUNCTION Init
		&& void CALLBACK InternetStatusCallback(HINTERNET hInternet,DWORD_PTR dwContext,DWORD dwInternetStatus,
		&&										LPVOID lpvStatusInformation,DWORD dwStatusInformationLength)
		THIS.Address = CREATECALLBACKFUNC('StatusCallback','VOID','LONG, LONG, ULONG, LONG, ULONG',THIS,CALLBACK_ASYNCRONOUS_SEND)
	ENDFUNC
	
	
	FUNCTION Destroy
		IF THIS.Address != 0
			DestroyCallbackFunc(THIS.Address)
		ENDIF
	ENDFUNC

	FUNCTION StatusCallback(hInternet, dwContext, dwInternetStatus, lpStatusInfo, dwStatusInfoLen)
		_VFP.AutoYield = .F.
		IF dwInternetStatus == INTERNET_STATUS_REQUEST_COMPLETE
			LOCAL loResult
			loResult = CREATEOBJECT('INTERNET_ASYNC_RESULT',lpStatusInfo)
			? loResult.dwResult, loResult.dwError
		ENDIF
		_VFP.AutoYield = .T.
	ENDFUNC

ENDDEFINE

DEFINE CLASS INTERNET_ASYNC_RESULT AS Exception

	Address = 0
	SizeOf = 8
	Name = "INTERNET_ASYNC_RESULT"
	&& structure fields
	dwResult = .F.
	dwError = .F.

	PROCEDURE Init(lnAddress)
		THIS.Address = lnAddress
	ENDPROC

	PROCEDURE dwResult_Access()
		RETURN ReadUInt(THIS.Address)
	ENDPROC

	PROCEDURE dwError_Access()
		RETURN ReadUInt(THIS.Address+4)
	ENDPROC

ENDDEFINE

