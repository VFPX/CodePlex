<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
	<xsd:schema id="VFPData" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="VFPData" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="class" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="platform">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="8"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="uniqueid">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="10"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="class">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="classloc">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="baseclass">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="objname">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="parent">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="properties">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="protected">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="methods">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole">
									<xsd:simpleType>
										<xsd:restriction base="xsd:base64Binary">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved1">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved3">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved4">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved5">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved6">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved7">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved8">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="user">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="nrecno">
									<xsd:simpleType>
										<xsd:restriction base="xsd:decimal">
											<xsd:totalDigits value="10"/>
											<xsd:fractionDigits value="0"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:anyAttribute namespace="http://www.w3.org/XML/1998/namespace" processContents="lax"/>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[form]]></class>
		<classloc/>
		<baseclass><![CDATA[form]]></baseclass>
		<objname><![CDATA[frmshowinfo]]></objname>
		<parent/>
		<properties><![CDATA[Desktop = .T.
ShowWindow = 1
DoCreate = .T.
AutoCenter = .T.
Height = 360
Width = 600
MinButton = .F.
MinHeight = 180
MinWidth = 300
Caption = "Please Note"
WindowType = 1
AllowOutput = .F.
_memberdata = <VFPData></VFPData>
Name = "frmshowinfo"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Destroy
*
*  a possible BINDEVENT() to this method 
*  requires at least one line of code here
*
DODEFAULT()

LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
SET PROCEDURE TO FXU

LOCAL loFoxUnitForm
loFoxUnitForm = GetFoxUnitForm()
IF VARTYPE(m.loFoxUnitForm) = "O"
  loFoxUnitForm.inZoomTop = THIS.Top
  loFoxUnitForm.inZoomLeft = THIS.Left
  loFoxUnitForm.inZoomHeight = THIS.Height
  loFoxUnitForm.inZoomWidth = THIS.Width
  loFoxUnitForm.inZoomWindowState = THIS.WindowState
ENDIF

SET PROCEDURE TO &lcSetProc 

ENDPROC
PROCEDURE Init
*
*  FXU.VCX/frmShowInfo::Init()
*
*
*  typically, pass tcText (REQUIRED) and then
*  EITHER toParameter OR one or more of the other parameters 
*  -- if you pass toParameter, you might as well take
*  all the actions the individual parameters would
*
*
*
*  if toParameter is passed, it is assumed to have either
*    toParameter.icScriptCode
*  and if so, that block of code is executed via
*  EXECSCRIPT(), or
*    toParameter.iaCode 
*  array of individual lines of code, and if so, each line
*  of code is executed here via macro expansion
*  ...or both...
*
*  toParameter.iaCode lines can use THIS, THIS.edtShowInfo,
*  etc.
*
*  toParameter.icScriptCode CANNOT use THIS, THIS.edtShowInfo,
*  etc., because the code executes as a standalone .FXP;
*  however, the script code can accept ONE optional toForm
*  parameter, an object reference to THISFORM
*
*  since THISFORM is modal, you can also update anything
*  you want from the calling code, after instantiating
*  THISFORM and before Show()ing it
*
LPARAMETERS tcText, ; 
            toParameter, ;
		    tcCaption, ;   &&& "Please Note"
		    tnTop, ;       &&& AutoCenter/move upward 1/4
		    tnLeft, ;      &&& AutoCenter
		    tnHeight, ;    &&& based on LENC(tcText), _Screen size
		    tnWidth, ;     &&& based on LENC(teText), _Screen size
		    tcFontName, ;  &&& editbox 
		    tnFontSize,;   &&& editbox
		    tlFontBold, ;  &&& editbox
		    tlFontItalic, ;   &&& editbox
		    tnDataSessionID, ;
		    tlNoImage

Thisform.MinHeight	= thisform.Height	&& FDBOZZO
thisform.MinWidth	= thisform.Width	&& FDBOZZO

IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF PCOUNT() = 0 OR NOT VARTYPE(tcText) = "C" 
  ASSERT .f. message PROGRAM() + ;
        " has not been passed the required tcText parameter"  
  THIS.Destroy()
  RETURN .f.
ENDIF     

IF FILE("FoxUnit.ICO")
  THIS.Icon = "FoxUnit.ICO"
  EXTERNAL FILE FoxUnit.ICO
ENDIF

LOCAL lcCode, llError, laJunk[1], lcFontName, lnFontSize, ;
      llFontBold, llFontItalic, ;
      lnTextHeight, lnTextWidth, lnEditboxHeight

THIS.AddProperty("DesignedMargin",THIS.edtShowInfo.Left)
THIS.AddProperty("DesignedOKButtonBottomMargin",THIS.Height-THIS.cmdOK.Top-THIS.cmdOK.Height)

IF VARTYPE(tcFontName) = "C" ;
     AND NOT EMPTY(tcFontName) ;
     AND AFONT(laJunk,tcFontName)
  THIS.edtShowInfo.FontName = tcFontName
ENDIF
lcFontName = THIS.edtShowInfo.FontName
IF VARTYPE(tnFontSize) = "N" 
  lnFontSize = tnFontSize
 ELSE
  lnFontSize = THIS.edtShowInfo.FontSize
ENDIF
IF VARTYPE(tlFontBold) = "L"
  llFontBold = tlFontBold
 ELSE
  llFontBold = THIS.edtShowInfo.FontBold
ENDIF
IF VARTYPE(tlFontItalic) = "L"
  llFontItalic = tlFontItalic
 ELSE
  llFontItalic = THIS.edtShowInfo.FontItalic
ENDIF
lnEditboxHeight = THIS.edtShowInfo.Height

RELEASE laJunk
DIMENSION laJunk[1]
IF AFONT(laJunk,lcFontName,lnFontSize)
  THIS.edtShowInfo.FontSize = lnFontSize
  THIS.edtShowInfo.FontBold = llFontBold
  THIS.edtShowInfo.FontItalic = llFontItalic
ENDIF
IF THIS.edtShowInfo.Height > lnEditboxHeight
  *
  *  THIS.edtShowInfo.IntegralHeight = .t.
  *
  THIS.Height = THIS.Height + (lnEditboxHeight-THIS.edtShowInfo.Height)
  THIS.cmdOK.Top = THIS.Height-THIS.DesignedOKButtonBottomMargin - THIS.cmdOK.Height
ENDIF

*
*  in the Designer, THIS.Height = 360 and THIS.Width = 600,
*  Height is 60% of Width
*
*  establish default Top/Height
THIS.AutoCenter = .t.
THIS.Top = (_Screen.Height-THIS.Height)/4
*
*  store information about how this form is designed,
*  for use in dynamic resizing, etc.
*
THIS.AddProperty("DesignedTop",THIS.Top)
THIS.AddProperty("DesignedLeft",THIS.Left)
THIS.AddProperty("DesignedHeight",THIS.Height)
THIS.AddProperty("DesignedWidth",THIS.Width)

IF VARTYPE(toParameter) = "O" ;
     AND VARTYPE(toParameter.icScriptCode) = "C" ;
     AND NOT EMPTY(toParameter.icScriptCode)
  llError = .f.
  TRY 
  EXECSCRIPT(toParameter.icScriptCode,THIS)
  CATCH
  llError = .t.
  ENDTRY
  IF llError
    *
    *  maybe your script doesn't accept the THIS
    *  parameter
    *
    llError = .f.
    TRY 
    EXECSCRIPT(toParameter.icScriptCode)
    CATCH
    llError = .t.
    ENDTRY
  ENDIF
ENDIF

IF VARTYPE(toParameter) = "O" ;
     AND VARTYPE(toParameter.iaCode[1]) = "C" ;
     AND NOT EMPTY(toParameter.iaCode[1])
  FOR EACH lcCode IN toParameter.iaCode
    TRY
    &lcCode
    CATCH
    ENDTRY
  ENDFOR  
ENDIF     

IF VARTYPE(tcCaption) = "C" AND NOT EMPTY(tcCaption)
  tcCaption = STRTRAN(tcCaption, "\<", "")
  THIS.Caption = tcCaption
ENDIF

IF VARTYPE(tnTop) = "N" AND tnTop >= 0
  THIS.Top = tnTop
ENDIF
IF VARTYPE(tnLeft) = "N" AND tnLeft >=0
  THIS.Left = tnLeft
ENDIF
IF VARTYPE(tnHeight) = "N" 
  IF tnHeight >= THIS.MinHeight
    THIS.Height = tnHeight
   ELSE
    THIS.Height = THIS.MinHeight
  ENDIF
ENDIF
IF VARTYPE(tnWidth) = "N" 
  IF tnWidth >= THIS.MinWidth
    THIS.Width = tnWidth
   ELSE
    THIS.Width = THIS.MinWidth
  ENDIF
ENDIF

*
*  tcText can be passed as
*  - a string
*  - a filename (SomeFile.TXT)
*  - an Alias.FieldName, when the tnDataSessionID
*    is passed
* 
IF VARTYPE(tnDataSessionID) = "N" AND NOT tnDataSessionID=SET("DATASESSION")
  THIS.DataSessionID = tnDataSessionID
ENDIF

DO CASE
  CASE FILE(tcText)
    *
    *  filename
    *
    THIS.edtShowInfo.Value = FILETOSTR(tcText)
  CASE OCCURS(".",tcText)=1 AND INLIST(TYPE(tcText),"M","C")
    *
    *  Alias.FieldName 
    *
    THIS.edtShowInfo.Value = EVALUATE(tcText)
  OTHERWISE
    *
    *  string
    *
    THIS.edtShowInfo.Value = tcText
ENDCASE

THIS.FontName = THIS.edtShowInfo.FontName
THIS.FontSize = THIS.edtShowInfo.FontSize
THIS.FontBold = THIS.edtShowInfo.FontBold
THIS.FontItalic = THIS.edtShowInfo.FontItalic

THIS.Resize()
IF THIS.Top = THIS.DesignedTop AND THIS.Left = THIS.DesignedLeft
  THIS.AutoCenter = .t.
  THIS.Top = (_Screen.Height-THIS.Height)/4
  THIS.DesignedTop = THIS.Top
  THIS.DesignedLeft = THIS.Left
ENDIF



ENDPROC
PROCEDURE Load
SET TALK OFF 
ENDPROC
PROCEDURE printinfo
LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
*
*  MODIFY COMM FXU
*
SET PROCEDURE TO FXU.PRG ADDITIVE 

*!*	CREATEOBJECT("sesTextBlockReport", ;
*!*	             THIS.edtShowInfo.Text, ;
*!*	             THIS.Caption, ;
*!*	             THIS.edtShowInfo.FontName, ;
*!*	             THIS.edtShowInfo.FontSize, ;
*!*	             THIS.edtShowInfo.FontBold, ;
*!*	             THIS.edtShowInfo.FontItalic)
CREATEOBJECT("sesTextBlockReport", ;
             THIS.edtShowInfo.Text, ;
             THIS.Caption, ;
             "Tahoma", ;
             9)

SET PROCEDURE TO &lcSetProc

ENDPROC
PROCEDURE Resize
THIS.edtShowInfo.Move(THIS.DesignedMargin, ;
                      THIS.DesignedMargin, ;
                      THIS.Width-(THIS.DesignedMargin*2), ;
                      THIS.Height-(THIS.DesignedMargin*2)-THIS.cmdOK.Height)

THIS.cmdOK.Move(THIS.Width-THIS.cmdOK.Width-THIS.DesignedMargin, ;
                THIS.Height-THIS.cmdOK.Height-THIS.DesignedOKButtonBottomMargin, ;
                THIS.cmdOK.Width, ;
                THIS.cmdOK.Height)
                                      
THIS.cmdPrint.Move(THIS.cmdOK.Left - THIS.DesignedMargin - THIS.cmdPrint.Width, ;
                   THIS.cmdOK.Top, ;
                   THIS.cmdPrint.Width, ;
                   THIS.cmdPrint.Height)

IF THIS.edtShowInfo.Top + THIS.edtShowInfo.Height > ;
     THIS.cmdOK.Top - 4
  *
  *  because THIS.edtShowInfo.IntegralHeight is set to .T.,
  *  the editbox may overlap or crowd the buttons too much
  *  -- this code sets THIS.edtShowInfo.Height to the next 
  *  smaller size respecting THIS.edtShowInfo.IntegralHeight
  *
  LOCAL lnHeight, lnNewHeight
  lnHeight = THIS.edtShowInfo.Height
  lnNewHeight = THIS.edtShowInfo.Height-1
  DO WHILE .t.
    lnHeight = THIS.edtShowInfo.Height
    THIS.edtShowInfo.IntegralHeight = .f.
    THIS.edtShowInfo.Height = lnNewHeight
    THIS.edtShowInfo.IntegralHeight = .t.
    IF THIS.edtShowInfo.Height = lnNewHeight ;
         OR THIS.edtShowInfo.Height < lnHeight
      EXIT
    ENDIF
    lnNewHeight = lnNewHeight - 1    
  ENDDO
ENDIF


             
                                      
ENDPROC
PROCEDURE RightClick
DEFINE POPUP pShortcut SHORTCUT RELATIVE FROM MROW(),MCOL()

DEFINE BAR 1 OF pShortcut PROMPT "Font..."
ON SELECTION BAR 1 OF pShortcut _Screen.ActiveForm.SetFont()

DEFINE BAR 2 OF pShortcut PROMPT "Print..."
ON SELECTION BAR 2 OF pShortcut _Screen.ActiveForm.PrintInfo()

ACTIVATE POPUP pShortcut
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1><![CDATA[Class]]></reserved1>
		<reserved2><![CDATA[4]]></reserved2>
		<reserved3><![CDATA[_memberdata XML Metadata for customizable properties
*printinfo 
]]></reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6><![CDATA[Pixels]]></reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>2</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdOK]]></objname>
		<parent><![CDATA[frmshowinfo]]></parent>
		<properties><![CDATA[Top = 320
Left = 484
Height = 27
Cancel = .T.
Caption = "\<OK"
Default = .T.
TabIndex = 1
Name = "cmdOK"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.Release()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>4</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdPrint]]></objname>
		<parent><![CDATA[frmshowinfo]]></parent>
		<properties><![CDATA[Top = 320
Left = 376
Height = 27
Caption = "\<Print..."
TabIndex = 4
Name = "cmdPrint"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.PrintInfo()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>5</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[editbox]]></class>
		<classloc/>
		<baseclass><![CDATA[editbox]]></baseclass>
		<objname><![CDATA[edtShowInfo]]></objname>
		<parent><![CDATA[frmshowinfo]]></parent>
		<properties><![CDATA[Height = 293
Left = 16
ReadOnly = .T.
TabIndex = 2
Top = 16
Width = 569
DisabledBackColor = 255,255,255
IntegralHeight = .T.
Name = "edtShowInfo"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>3</nrecno>
	</class>
	<class>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<class/>
		<classloc/>
		<baseclass/>
		<objname><![CDATA[frmshowinfo]]></objname>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>6</nrecno>
	</class>
</VFPData>
