<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
	<xsd:schema id="VFPData" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="VFPData" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="class" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="platform">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="8"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="uniqueid">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="10"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="class">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="classloc">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="baseclass">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="objname">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="parent">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="properties">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="protected">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="methods">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole">
									<xsd:simpleType>
										<xsd:restriction base="xsd:base64Binary">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved1">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved3">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved4">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved5">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved6">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved7">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved8">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="user">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="nrecno">
									<xsd:simpleType>
										<xsd:restriction base="xsd:decimal">
											<xsd:totalDigits value="10"/>
											<xsd:fractionDigits value="0"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:anyAttribute namespace="http://www.w3.org/XML/1998/namespace" processContents="lax"/>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[form]]></class>
		<classloc/>
		<baseclass><![CDATA[form]]></baseclass>
		<objname><![CDATA[frmgettestclasstemplate]]></objname>
		<parent/>
		<properties><![CDATA[Height = 440
Width = 640
ShowWindow = 1
ShowInTaskBar = .F.
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "Specify the FoxUnit test class template "
MaxButton = .F.
MinButton = .F.
Icon = ("foxunit.ico")
WindowType = 1
AllowOutput = .F.
inpermanenttemplates = 0
iuretval = .NULL.
_memberdata = <VFPData></VFPData>
Name = "frmgettestclasstemplate"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE addtemplate
*
*  called from THIS.lstTemplates.RightClick() 
*  and from THIS.GetYourFXUTemplate()
*
LPARAMETERS tcFileName

LOCAL lcFileName, xx, lcDescription, lnRow, yy, llAlready

IF PCOUNT() = 0
  lcFileName = GETFILE("TXT","FoxUnit template","Select",0,"Select a FoxUnit test class .TXT template")
 ELSE
  lcFileName = m.tcFileName
ENDIF
IF EMPTY(m.lcFileName)
  RETURN
ENDIF

lcFileName = UPPER(ALLTRIM(m.lcFileName))

FOR xx = 1 TO ALEN(THIS.iaTemplates,1)
  IF UPPER(ALLTRIM(THIS.iaTemplates[m.xx,3])) == m.lcFileName
    llAlready = .t.
    EXIT
  ENDIF
ENDFOR
IF m.llAlready
  MESSAGEBOX(m.lcFileName + " is already in the list!", ;
             16, ;
             "Please Note")
  RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
  MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
             " is not a FoxUnit test case class inheriting from FXUTestCase.PRG", ;
             48, ;
             "Please Note")
  RETURN
ENDIF

IF PCOUNT() = 0
  lcDescription = INPUTBOX("Description", ;
                           "Enter a short description")
ENDIF
IF EMPTY(m.lcDescription)
  lcDescription = "Custom FoxUnit template"
ENDIF

*
*  add it
*
lnRow = ALEN(THIS.iaTemplates,1)+1
DIMENSION THIS.iaTemplates[m.lnRow,ALEN(THIS.iaTemplates,2)]
THIS.iaTemplates[m.lnRow,1] = m.lcDescription
THIS.iaTemplates[m.lnRow,2] = JUSTFNAME(m.lcFileName)
THIS.iaTemplates[m.lnRow,3] = m.lcFileName

THIS.SortOptionalTemplates()

THIS.lstTemplates.Value = m.lnRow
THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource

                         
                         


ENDPROC
PROCEDURE addvmptemplates
*
*  FXU.VCX/frmGetTestClassTemplate::AddVMPTemplates()  
*
*
*  add VMP-specific (Visual MaxFrame Professional) templates
*
IF NOT FILE("XXFW.VCX")
  RETURN
ENDIF

LOCAL lnRow, lnCols, lcCurDir, lcXLIB, laFiles[1], lnFiles, xx, ;
      lcFileName, lcDesc, lcDescText, laLines[1] 
lnRow = ALEN(THIS.iaTemplates,1)
lnCols = ALEN(THIS.iaTemplates,2)
lcCurDir = FULLPATH(CURDIR())
lcXLIB = JUSTPATH(FULLPATH("XXFW.VCX"))

CD (m.lcXLIB)

lnFiles = ADIR(laFiles,"VMPFXU*.TXT")

CD (m.lcCurDir)

IF m.lnFiles = 0
  RETURN
ENDIF

FOR xx = 1 TO m.lnFiles
  lcFileName = UPPER(laFiles[m.xx,1])
  IF NOT "TEMPLATE" $ m.lcFileName
    LOOP 
  ENDIF
  IF ASCAN(THIS.iaTemplates,m.lcFileName,-1,-1,2,15)>0
    *  already in the list
    LOOP 
  ENDIF
  lnRow = m.lnRow + 1
  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
  ALINES(laLines,FILETOSTR(m.lcFileName))  
  lcDescText = laLines[2]   &&& description is on the 2nd line of the .TXT template file 
  lcDescText = ALLTRIM(SUBSTRC(m.lcDescText,2))   &&& remove leading asterisk
  
*!*	  DO CASE
*!*	    CASE RIGHTC(m.lcFileName,7) = "_DS.TXT"
*!*	      lcDescText = "VMP DataSource test case template"
*!*	    CASE RIGHTC(m.lcFileName,7) = "_BO.TXT"
*!*	      lcDescText = "VMP Business Object test case template"
*!*	    CASE RIGHTC(m.lcFileName,16) = "_BO_ONE2MANY.TXT"
*!*	      lcDescText = "VMP One2Many Business Object test case template"
*!*	    CASE RIGHTC(m.lcFileName,21) = "_BO_ONE2MANY2MANY.TXT"
*!*	      lcDescText = "VMP One2Many2Many Business Object test case template"
*!*	    OTHERWISE
*!*	      lcDescText = "VMP test case template"
*!*	  ENDCASE

  THIS.iaTemplates[m.lnRow,1] = m.lcDescText
  THIS.iaTemplates[m.lnRow,2] = laFiles[m.xx,1]
  THIS.iaTemplates[m.lnRow,3] = FULLPATH(m.lcFileName)
  THIS.iaTemplates[m.lnRow,4] = .t.   &&& permanent
ENDFOR



*!*	IF FILE("VMPFXUTestCaseTemplate_DS.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_DS.TXT",-1,-1,2,15)>0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP DataSource test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_DS.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &&& permanent
*!*	ENDIF

*!*	IF FILE("VMPFXUTestCaseTemplate_BO.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_BO.TXT",-1,-1,2,15)>0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP Business Object test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_BO.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &&& permanent
*!*	ENDIF

*!*	IF FILE("VMPFXUTestCaseTemplate_BO_One2Many.TXT") ;
*!*	     AND NOT ASCAN(THIS.iaTemplates,"VMPFXUTestCaseTemplate_BO_One2Many.TXT",-1,-1,2,15)>0
*!*	  lnRow = m.lnRow + 1
*!*	  DIMENSION THIS.iaTemplates[m.lnRow,m.lnCols]
*!*	  THIS.iaTemplates[m.lnRow,1] = "VMP One2Many Business Object test case template"
*!*	  THIS.iaTemplates[m.lnRow,2] = "VMPFXUTestCaseTemplate_BO_One2Many.TXT"
*!*	  THIS.iaTemplates[m.lnRow,3] = FULLPATH(THIS.iaTemplates[m.lnRow,2])
*!*	  THIS.iaTemplates[m.lnRow,4] = .t.   &&& permanent
*!*	ENDIF

THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource

ENDPROC
PROCEDURE Destroy
THIS.SaveSettings()

ENDPROC
PROCEDURE getyourfxutemplate
*  
*  called from THIS.cmdSelectCustomTemplate.Click()
*


LOCAL lcFileName, xx, llAlready

lcFileName = GETFILE("TXT","FoxUnit template","Select",0,"Select a FoxUnit test class .TXT template")

IF EMPTY(m.lcFileName)
  RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
  IF MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
             " is not a FoxUnit test case class inheriting from FXUTestCase.PRG." + ;
             CHR(10) + "Do you wish to load this test case template anyway?", ;
             4+48,  ;
             "Please Note") = 7
  	RETURN
  ENDIF
ENDIF

*
*  if the selected template isn't already in the list,
*  put it in the list so it's there from now on
*
FOR xx = 1 TO ALEN(THIS.iaTemplates,1)
  IF UPPER(ALLTRIM(THIS.iaTemplates[m.xx,3])) == m.lcFileName
    llAlready = .t.
    EXIT
  ENDIF
ENDFOR

IF m.llAlready
  RETURN m.lcFileName
ENDIF  

THIS.AddTemplate(m.lcFileName)

RETURN m.lcFileName
          
ENDPROC
PROCEDURE getyourfxutesttocopy
*  
*  called from THIS.cmdCopyExistingPRG.Click()
*

LOCAL lcFileName, xx, llAlready

lcFileName = GETFILE("PRG","FoxUnit test class","Select",0,"Select an existing FoxUnit test class .PRG")

IF EMPTY(m.lcFileName)
  RETURN
ENDIF

IF NOT THIS.ValidTemplateFile(m.lcFileName)
  MESSAGEBOX(JUSTFNAME(m.lcFileName) + ;
             " is not a FoxUnit test case class inheriting from FXUTestCase.PRG", ;
             48, ;
             "Please Note")
  RETURN
ENDIF

RETURN m.lcFileName
          
ENDPROC
PROCEDURE Init
*
*    tcNewTestClass (R) The filename of the new test class
*                       .PRG to be created here
*
*  tcResultVariable (R) The name of the private (or public) variable
*                       that has already been declared and 
*                       initialized in the calling code -- it
*                       will be updated here to either
*                                  .NULL. - the user <Cancel>led from here
*                       Fullpath+FileName - the user made a valid selection here
*
LPARAMETERS tcNewTestClass, tcResultVariable

THIS.icNewTestClass = m.tcNewTestClass
THIS.icResultVariable = m.tcResultVariable

THIS.MinHeight = THIS.Height
THIS.MinWidth = THIS.Width

IF VERSION(5) < 900
  THIS.BorderStyle = 2
ENDIF

THIS.RestoreSettings()

THIS.RemoveMissingTemplates()

THIS.AddVMPTemplates()

*
*  if you subclass this form, you can add code here
*  to add your own custom templates
*
THIS.AddCustomTemplates()





ENDPROC
PROCEDURE Load
*
*  grab these settings from the calling FXU.VCX/frmFoxUnit form
*

THIS.AddProperty("icPersistFile",SPACE(0))
THIS.AddProperty("icUserID",SPACE(0))

IF TYPE("_Screen.ActiveForm.icPersistFile") = "C" ;
     AND NOT EMPTY(_Screen.ActiveForm.icPersistFile)

  *
  *  this should always be true, because this dialog
  *  is expected to only be called from the main
  *  FXU.VCX/frmFoxUnit form
  *

  THIS.icPersistFile = ;
       ADDBS(JUSTPATH(_Screen.ActiveForm.icPersistFile)) + ;
       "FXUPersistGetTemplate.XML"

  THIS.icUserID = _Screen.ActiveForm.icUserID

 ELSE
  *
  *  this should never really happen, except perhaps
  *  for when Drew is testing standalone 
  *

  THIS.icPersistFile = ADDBS(JUSTPATH(FULLPATH("FXUResults.DBF"))) + ;
       "FXUPersistGetTemplate.XML"
  
  THIS.icUserID = ALLTRIM(TRANSFORM(SYS(0)))
  IF LENC(THIS.icUserID) < 15 OR NOT "#" $ THIS.icUserID
    *  machine information not assigned by the network,
    *  or network shell not loaded, or standalone machine
    THIS.icUserID = SPACE(0)
   ELSE
    THIS.icUserID = ALLTRIM(SUBSTRC(THIS.icUserID,AT_C("#",THIS.icUserID)+1))
  ENDIF

ENDIF
    
     
*
*  save these for use in THIS.SaveSettings
*
THIS.AddProperty("inDesignHeight",THIS.Height)
THIS.AddProperty("inDesignWidth",THIS.Width)
     
ENDPROC
PROCEDURE modifytemplate
*
*  called from THIS.lstTemplates.RightClick()
*

LOCAL lcFileName
lcFileName = THIS.iaTemplates[THIS.lstTemplates.Value,3]
IF EMPTY(m.lcFileName)
  MESSAGEBOX("This feature is only available for those " + ;
             "items for which a filename has been specified.", ;
             48, ;
             "Please Note")
  RETURN
ENDIF
             
MODIFY COMMAND (m.lcFileName)
             
ENDPROC
PROCEDURE removemissingtemplates
*
*  remove any rows of THIS.lstTemplates that have
*  been added by THIS.RestoreSettings(), but which
*  templates are now missing
*

LOCAL xx, lnRows, lnRemoved, lnValue
lnRows = ALEN(THIS.iaTemplates,1)
lnValue = THIS.lstTemplates.Value

IF m.lnRows < 5
  *  nothing to do
  RETURN
ENDIF

lnRemoved = 0
FOR xx = lnRows TO 5 STEP -1
  IF NOT FILE(THIS.iaTemplates[m.xx,3])
    lnRemoved = m.lnRemoved + 1
    ADEL(THIS.iaTemplates,m.xx)
  ENDIF
ENDFOR
IF m.lnRemoved > 0
  DIMENSION THIS.iaTemplates[m.lnRows-m.lnRemoved,ALEN(THIS.iaTemplates,2)]
  THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource
  THIS.lstTemplates.Value = 1
ENDIF



ENDPROC
PROCEDURE removetemplate
*
*  called from THIS.lstTemplates.RightClick()
*

IF THIS.iaTemplates[THIS.lstTemplates.Value,4] 
  MESSAGEBOX("This is a permanent item and may not be removed." + ;
             CHR(13) + CHR(13) + ;
             "You may only remove any custom templates of your own.", ;
             48, ;
             "Please Note")
  RETURN
ENDIF

IF MESSAGEBOX("Are you sure you want to remove " + THIS.iaTemplates[THIS.lstTemplates.Value,2] + "?", ;
              4+48, ;
              "Please confirm") = 7
  RETURN
ENDIF              

LOCAL lnRow
lnRow = THIS.lstTemplates.Value
ADEL(THIS.iaTemplates,m.lnRow)
DIMENSION THIS.iaTemplates[ALEN(THIS.iaTemplates,1)-1,ALEN(THIS.iaTemplates,2)]
IF m.lnRow > ALEN(THIS.iaTemplates,1)
 THIS.lstTemplates.Value = THIS.lstTemplates.Value-1
ENDIF
THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource








ENDPROC
PROCEDURE restoresettings
*
*  restore settings from the last time this
*  form was run
*
*  this method is called from THIS.Init()
*
LOCAL lcUserID, lcCommand, lcAlias

lcUserID = THIS.icUserID
lcAlias = SYS(2015)

IF FILE(THIS.icPersistFile)
  TRY 
  XMLTOCURSOR(THIS.icPersistFile,m.lcAlias,512)
  *
  *  apply settings for this user/developer
  *
  SELECT (m.lcAlias)
  LOCATE
  SCAN FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
    lcCommand = ALLTRIM(Setting)
    &lcCommand
    SELECT (m.lcAlias)
  ENDSCAN
  CATCH TO loException
  ENDTRY
  USE IN SELECT(m.lcAlias)
ENDIF

RETURN 

 
ENDPROC
PROCEDURE savesettings
*
*  save settings so they can be restored the next
*  time this form is run (see THIS.Init() call to
*  THIS.RestoreSettings() method)
*
*  this method is called from THIS.Destroy()
*

LOCAL lcAlias
lcAlias = "FXUPersistGetTemplate"   &&& SYS(2015)

TRY

IF FILE(THIS.icPersistFile)
  XMLTOCURSOR(THIS.icPersistFile,m.lcAlias,512)
 ELSE
  CREATE CURSOR (m.lcAlias) (UserID C(10), Setting M)
ENDIF
SELECT (m.lcAlias)
*
*  delete all the existing settings for this user
*
DELETE ALL FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
SCATTER MEMVAR 
m.UserID = THIS.icUserID

*
*  THISFORM settings
*
m.Setting = "THIS.Top = " + TRANSFORM(THIS.Top)
INSERT INTO (m.lcAlias) FROM MEMVAR 
m.Setting = "THIS.Left = " + TRANSFORM(THIS.Left) 
INSERT INTO (m.lcAlias) FROM MEMVAR 
m.Setting = "THIS.Height = IIF(VERSION(5)>=900," + TRANSFORM(THIS.Height) + "," + TRANSFORM(THIS.inDesignHeight) + ")"
INSERT INTO (m.lcAlias) FROM MEMVAR 
m.Setting = "THIS.Width = IIF(VERSION(5)>=900," + TRANSFORM(THIS.Width) + "," + TRANSFORM(THIS.inDesignWidth) + ")"
INSERT INTO (m.lcAlias) FROM MEMVAR 

*
*  THISFORM checkbox values
*
m.Setting = "THIS.chkProcedure.Value = " + TRANSFORM(THIS.chkProcedure.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR 
m.Setting = "THIS.chkTab.Value = " + TRANSFORM(THIS.chkTab.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR 

*
*  THIS.lstTemplates.Value
*
m.Setting = "THIS.lstTemplates.Value = " + TRANSFORM(THIS.lstTemplates.Value)
INSERT INTO (m.lcAlias) FROM MEMVAR 

*
*  all templates after the permanent templates
*

IF ALEN(THIS.iaTemplates,1) > THIS.inPermanentTemplates
  m.Setting = 'DIMENSION THIS.iaTemplates[' + TRANSFORM(ALEN(THIS.iaTemplates,1)) + ',' + TRANSFORM(ALEN(THIS.iaTemplates,2)) + ']'
  INSERT INTO (m.lcAlias) FROM MEMVAR 
  LOCAL xx, yy
  FOR xx = THIS.inPermanentTemplates+1 TO ALEN(THIS.iaTemplates,1)
    IF EMPTY(THIS.iaTemplates[m.xx,2]) OR NOT FILE(THIS.iaTemplates[m.xx,3])
      LOOP 
    ENDIF
    FOR yy = 1 TO ALEN(THIS.iaTemplates,2)-1
      m.Setting = 'THIS.iaTemplates[' + TRANSFORM(m.xx) + ',' + TRANSFORM(m.yy) + '] = "' + TRANSFORM(THIS.iaTemplates[m.xx,m.yy]) + ["]
      INSERT INTO (m.lcAlias) FROM MEMVAR 
    ENDFOR
    m.Setting = 'THIS.iaTemplates[' + TRANSFORM(m.xx) + ',' + TRANSFORM(ALEN(THIS.iaTemplates,2)) + '] = ' + TRANSFORM(THIS.iaTemplates[m.xx,m.yy]) 
    INSERT INTO (m.lcAlias) FROM MEMVAR 
  ENDFOR
  m.Setting = "THIS.lstTemplates.RowSource = THIS.lstTemplates.RowSource"
  INSERT INTO (m.lcAlias) FROM MEMVAR 
ENDIF

CURSORTOXML(m.lcAlias,THIS.icPersistFile,1,512,0,"1")

CATCH TO loException
ENDTRY

USE IN SELECT(m.lcAlias)

IF VARTYPE(m.loException) = "O"
  MESSAGEBOX("Unable to save user settings because " + ;
             CHR(13) + ;
             loException.Message, ;
             48, ;
             "Please Note")
ENDIF

RETURN

ENDPROC
PROCEDURE sortoptionaltemplates
*
*  re-sort the optional templates, in alphabetical order
*  

IF ALEN(THIS.iaTemplates,1) = THIS.inPermanentTemplates
  *  nothing to do
  RETURN
ENDIF

LOCAL lnRows, lnCols, lnPermanentRows, xx, yy, lnRow
lnRows = ALEN(THIS.iaTemplates,1)
lnCols = ALEN(THIS.iaTemplates,2)
lnPermanentRows = THIS.inPermanentTemplates

LOCAL laItems[m.lnRows-THIS.inPermanentTemplates,m.lnCols]

FOR xx = lnPermanentRows+1 TO m.lnRows
  FOR yy = 1 TO m.lnCols
    laItems[m.xx-m.lnPermanentRows,m.yy] = THIS.iaTemplates[m.xx,m.yy]
  ENDFOR
ENDFOR

ASORT(laItems)

FOR xx = m.lnPermanentRows+1 TO m.lnRows
  FOR yy = 1 TO m.lnCols
    THIS.iaTemplates[m.xx,m.yy] = laItems[m.xx-m.lnPermanentRows,m.yy]
  ENDFOR
ENDFOR

*lnRow = ASCAN(THISFORM.iaTemplates,m.lcFileName,3,-1,3,15)


ENDPROC
PROCEDURE templateclassinheritsfromfxutestcase
LPARAMETERS tcDefineClassStatement

LOCAL lcTestCaseClass, lcTestCaseClassProgramFile

m.tcDefineClassStatement = UPPER(ALLTRIM( m.tcDefineClassStatement ))

m.tcDefineClassStatement = SUBSTR( m.tcDefineClassStatement, ;
	ATC( " AS", m.tcDefineClassStatement ) + 3)
	
m.lcTestCaseClass = ALLTRIM(LEFT(m.tcDefineClassStatement, ;
	ATC("OF", m.tcDefineClassStatement) - 1)) 

m.lcTestCaseClassProgramFile = ALLTRIM(SUBSTR(m.tcDefineClassStatement, ;
	RATC(SPACE(1), m.tcDefineClassStatement))) 	
	
RETURN  FXUInheritsFromFxuTestCase( m.lcTestCaseClass, m.lcTestCaseClassProgramFile )  
	
 
ENDPROC
PROCEDURE Unload
LOCAL lcResultVariable
lcResultVariable = THIS.icResultVariable
STORE THIS.iuRetVal TO &lcResultVariable

RETURN THIS.iuRetVal

ENDPROC
PROCEDURE validatederivedtestcasetemplate
LPARAMETERS tcTestCaseTemplate

LOCAL llValidDerivedTestCaseTemplate
LOCAL lcValidatePrg, lnLInes
LOCAL ARRAY laLines[1]

llValidDerivedTestCaseTemplate = .f. 

DO WHILE .t.

	IF !FILE(tcTestCaseTemplate)
		EXIT 
	ENDIF
	
	
	
	
	
	
	
	


	EXIT 
ENDDO 

RETURN llValidDerivedTestCaseTemplate
ENDPROC
PROCEDURE validtemplatefile
*
*  RETURNs a logical value indicating whether the
*  passed tcFileName is a valid FXUTestCase template
*
LPARAMETERS tcFileName

LOCAL laLines[1], lcLine, llValid
=ALINES(laLines,FILETOSTR(m.tcFileName),.t.)
FOR EACH lcLine IN laLines
*  IF UPPER(ALLTRIM(m.lcLine)) = "DEFINE CLASS " ;
*      AND UPPER(" AS FXUTestCase OF FXUTestCase") $ UPPER(m.lcLine)

  IF UPPER(ALLTRIM(m.lcLine)) = "DEFINE CLASS " ;
  	AND (UPPER(" AS FXUTestCase OF FXUTestCase") $ UPPER(m.lcLine) ;
	OR this.TemplateClassInheritsFromFxuTestCase(m.lcLine))

    *
    *  MODIFY COMMAND FXUTestCase 
    *  MODIFY COMMAND FXUTestCaseTemplate.TXT
    *    XXDTES("FXUTESTCASETEMPLATE.TXT","DEFINE CLASS")
    *
    IF UPPER(JUSTEXT(m.tcFileName)) = "TXT"
      *  make sure it has the <<test class>> text
      llValid = "<<" $ m.lcLine ;
                AND ">>" $ m.lcLine ;
                AND AT_C("<<",m.lcLine) < AT_C(">>",m.lcLine)
     ELSE
      *  PRG
      llValid = .t.
    ENDIF
    IF m.llValid
      EXIT
    ENDIF
  ENDIF         
ENDFOR

RETURN m.llValid




ENDPROC
PROCEDURE zreadme
#IF .f.

Class:  FXU.VCX/frmGetTestClassTemplate


#ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1><![CDATA[Class]]></reserved1>
		<reserved2><![CDATA[11]]></reserved2>
		<reserved3><![CDATA[icnewtestclass
icresultvariable
inpermanenttemplates
iuretval
_memberdata XML Metadata for customizable properties
^iatemplates[1,0] 
*addcustomtemplates 
*addtemplate 
*addvmptemplates 
*getyourfxutemplate 
*getyourfxutesttocopy 
*modifytemplate 
*removemissingtemplates 
*removetemplate 
*restoresettings 
*savesettings 
*sortoptionaltemplates 
*templateclassinheritsfromfxutestcase 
*validatederivedtestcasetemplate 
*validtemplatefile 
*zreadme 
]]></reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6><![CDATA[Pixels]]></reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>63</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[checkbox]]></class>
		<classloc/>
		<baseclass><![CDATA[checkbox]]></baseclass>
		<objname><![CDATA[chkProcedure]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 164
Left = 32
Height = 17
Width = 540
Alignment = 0
BackStyle = 0
Caption = 'Use "PROCEDURE MethodName" rather than "FUNCTION MethodName" for method names?'
Value = .F.
Enabled = .F.
TabIndex = 2
Name = "chkProcedure"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5)>=900
  *
  *  2 = Left Absolute
  *  4 = Bottom Absolute
  *
  THIS.Anchor = 2 + 4
ENDIF
ENDPROC
PROCEDURE Refresh
THIS.Enabled = THISFORM.lstTemplates.Value < 3


ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>67</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[checkbox]]></class>
		<classloc/>
		<baseclass><![CDATA[checkbox]]></baseclass>
		<objname><![CDATA[chkTab]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 180
Left = 32
Height = 17
Width = 180
Alignment = 0
BackStyle = 0
Caption = "Indent methods by one TAB?"
Value = .T.
Enabled = .F.
TabIndex = 3
Name = "chkTab"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5)>=900
  *
  *  2 = Left Absolute
  *  4 = Bottom Absolute
  *
  THIS.Anchor = 2 + 4
ENDIF
ENDPROC
PROCEDURE Refresh
THIS.Enabled = THISFORM.lstTemplates.Value < 3

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>68</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdCancel]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 384
Left = 544
Height = 39
Width = 84
FontName = "Tahoma"
Picture = ("FXUCancel.BMP")
Cancel = .T.
Caption = "\<Cancel"
TabIndex = 7
Name = "cmdCancel"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.Release()
ENDPROC
PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  8 = Right Absolute
  *
  THIS.Anchor = 8 + 4
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>65</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdCopyExistingPRG]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 328
Left = 52
Height = 40
Width = 576
FontName = "Tahoma"
WordWrap = .T.
Caption = "Copy an existing FoxUnit test case class (.PRG) to the new test case class"
Default = .T.
TabIndex = 6
Name = "cmdCopyExistingPRG"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
LOCAL lcTemplateFile

lcTemplateFile = THISFORM.GetYourFXUTestToCopy()

IF NOT VARTYPE(m.lcTemplateFile) = "C" OR EMPTY(m.lcTemplateFile)
  RETURN
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + ",.NULL.,.NULL."

THISFORM.Release()


ENDPROC
PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  8 = Right Absolute
  *  2 = Left Absolute
  *
  THIS.Anchor = 2 + 8 + 4
ENDIF

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>70</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdSelectCustomTemplate]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 264
Left = 52
Height = 40
Width = 576
FontName = "Tahoma"
WordWrap = .T.
Caption = "Select a custom FoxUnit template of your own.  If you select one that is not in the list above, it will be automatically added to the list the next time you invoke this dialog."
Default = .F.
TabIndex = 5
Name = "cmdSelectCustomTemplate"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
LOCAL lcTemplateFile

lcTemplateFile = THISFORM.GetYourFXUTemplate()

IF NOT VARTYPE(m.lcTemplateFile) = "C" OR EMPTY(m.lcTemplateFile)
  RETURN
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + ",.NULL.,.NULL."

THISFORM.Release()


ENDPROC
PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  8 = Right Absolute
  *  2 = Left Absolute
  *
  THIS.Anchor = 2 + 8 + 4
ENDIF

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>69</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdSelectTemplate]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[Top = 200
Left = 12
Height = 40
Width = 616
FontName = "Tahoma"
WordWrap = .T.
Caption = "Select the FoxUnit test case template that is currently selected in the above list.  Maintain the list via the shortcut menu options for the list."
Default = .F.
TabIndex = 4
Name = "cmdSelectTemplate"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
LOCAL lcTemplateFile

IF FILE(THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3])
  lcTemplateFile = THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3]
 ELSE
  IF MESSAGEBOX("Unable to locate " + ;
                CHR(13) + ;
                THISFORM.iaTemplates[THISFORM.lstTemplates.Value,3] + ;
                CHR(13) + CHR(13) + ;
                "Remove it from the list?", ;
                16 + 4, ;
                "Please Note") = 6
    THISFORM.RemoveTemplate()
  ENDIF 
  RETURN .f.                   
ENDIF

THISFORM.iuRetVal = m.lcTemplateFile + "," 
IF THISFORM.lstTemplates.Value > 2
  THISFORM.iuRetVal = THISFORM.iuRetVal + ".NULL.,.NULL."
 ELSE
  THISFORM.iuRetVal = THISFORM.iuRetVal + ;
                  IIF(THISFORM.chkProcedure.Value,"PROCEDURE","FUNCTION") + ;
                  "," + ;
                  IIF(THISFORM.chkTab.Value,"TABS","NOTABS")
ENDIF

THISFORM.Release()



ENDPROC
PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  8 = Right Absolute
  *  2 = Left Absolute
  *
  THIS.Anchor = 2 + 8 + 4
ENDIF


ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>64</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblCancel]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[FontName = "Tahoma"
WordWrap = .T.
BackStyle = 0
Caption = "(or Cancel/close this form if you have changed your mind and don't want to create a new FoxUnit test case class)"
Height = 32
Left = 220
Top = 388
Width = 316
Name = "lblCancel"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  8 = Right Absolute
  *
  THIS.Anchor = 8 + 4
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>73</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblOR1]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[FontBold = .T.
FontName = "Tahoma"
FontSize = 12
BackStyle = 0
Caption = "-OR-"
Height = 17
Left = 12
Top = 272
Width = 40
Name = "lblOR1"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  2 = Left Absolute
  *
  THIS.Anchor = 4 + 2
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>71</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblOR2]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[FontBold = .T.
FontName = "Tahoma"
FontSize = 12
BackStyle = 0
Caption = "-OR-"
Height = 17
Left = 12
Top = 340
Width = 40
Name = "lblOR2"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5)>=900
  *
  *  4 = Bottom Absolute
  *  2 = Left Absolute
  *
  THIS.Anchor = 4 + 2
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>72</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[listbox]]></class>
		<classloc/>
		<baseclass><![CDATA[listbox]]></baseclass>
		<objname><![CDATA[lstTemplates]]></objname>
		<parent><![CDATA[frmgettestclasstemplate]]></parent>
		<properties><![CDATA[FontName = "Tahoma"
ColumnCount = 2
ColumnWidths = "304,336"
Height = 148
ColumnLines = .F.
Left = 12
TabIndex = 1
Top = 12
Width = 616
IntegralHeight = .T.
ItemTips = .T.
Name = "lstTemplates"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
LOCAL lnRow, lnCols
lnRow = 0
lnCols = 4

lnRow = m.lnRow + 1
DIMENSION THISFORM.iaTemplates[m.lnRow,m.lnCols]
THISFORM.iaTemplates[m.lnRow,1] = "Standard FoxUnit test case template"
THISFORM.iaTemplates[m.lnRow,2] = "FXUTestCaseTemplate.TXT"
THISFORM.iaTemplates[m.lnRow,3] = FULLPATH(THISFORM.iaTemplates[m.lnRow,2])
THISFORM.iaTemplates[m.lnRow,4] = .t.   &&& permanent

lnRow = m.lnRow + 1
DIMENSION THISFORM.iaTemplates[m.lnRow,m.lnCols]
THISFORM.iaTemplates[m.lnRow,1] = "Minimal FoxUnit test case template"
THISFORM.iaTemplates[m.lnRow,2] = "FXUTestCaseTemplate_Minimal.TXT"
THISFORM.iaTemplates[m.lnRow,3] = FULLPATH(THISFORM.iaTemplates[m.lnRow,2])
THISFORM.iaTemplates[m.lnRow,4] = .t.   &&& permanent

THISFORM.inPermanentTemplates = ALEN(THISFORM.iaTemplates,1)

THIS.RowSourceType = 5
THIS.RowSource = "THISFORM.iaTemplates"

THIS.Value = 1

IF VERSION(5)>=900
  *
  *    1 = Top Absolute
  *    2 = Left Absolute
  *  128 = Right Relative
  *    4 = Bottom Absolute
  *
  THIS.Anchor = 1 + 2 + 128 + 4
ENDIF


ENDPROC
PROCEDURE InteractiveChange
THISFORM.Refresh()

ENDPROC
PROCEDURE RightClick
DEFINE POPUP pShortCut IN WINDOW (THISFORM.Name) SHORTCUT RELATIVE FROM MROW(THISFORM.Name),MCOL(THISFORM.Name)

DEFINE BAR 1 OF pShortCut PROMPT "MODIFY COMMAND the indicated template" 
ON SELECTION BAR 1 OF pShortCut _Screen.ActiveForm.ModifyTemplate() 

DEFINE BAR 2 OF pShortCut PROMPT "Add a template file to this list" 
ON SELECTION BAR 2 OF pShortCut _Screen.ActiveForm.AddTemplate() 

DEFINE BAR 3 OF pShortCut PROMPT "Remove this template from the list" 
ON SELECTION BAR 3 OF pShortCut _Screen.ActiveForm.RemoveTemplate() 

ACTIVATE POPUP pShortCut

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>66</nrecno>
	</class>
	<class>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<class/>
		<classloc/>
		<baseclass/>
		<objname><![CDATA[frmgettestclasstemplate]]></objname>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>74</nrecno>
	</class>
</VFPData>
