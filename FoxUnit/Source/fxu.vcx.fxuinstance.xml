<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
	<xsd:schema id="VFPData" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="VFPData" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="class" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="platform">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="8"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="uniqueid">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="10"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="class">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="classloc">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="baseclass">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="objname">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="parent">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="properties">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="protected">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="methods">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole">
									<xsd:simpleType>
										<xsd:restriction base="xsd:base64Binary">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved1">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved3">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved4">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved5">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved6">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved7">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved8">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="user">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="nrecno">
									<xsd:simpleType>
										<xsd:restriction base="xsd:decimal">
											<xsd:totalDigits value="10"/>
											<xsd:fractionDigits value="0"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:anyAttribute namespace="http://www.w3.org/XML/1998/namespace" processContents="lax"/>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid>_4CS0J1B6A</uniqueid>
		<class><![CDATA[custom]]></class>
		<classloc/>
		<baseclass><![CDATA[custom]]></baseclass>
		<objname><![CDATA[fxuinstance]]></objname>
		<parent/>
		<properties><![CDATA[Width = 17
version = 0.0
foxunitpath = 
foxunitpath_allow = .F.
datapath = 
_memberdata = {1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}{1}    1539<VFPData><memberdata name="datapath" type="property" display="DataPath"/><memberdata name="foxunitpath" type="property" display="FoxUnitPath"/><memberdata name="foxunitpath_allow" type="property" display="FoxUnitPath_Allow"/><memberdata name="foxunitpath_assign" type="method" display="FoxUnitPath_Assign"/><memberdata name="version" type="property" display="Version"/><memberdata name="project" type="property" display="Project"/><memberdata name="project_assign" type="method" display="Project_Assign"/><memberdata name="version_allow" type="property" display="Version_Allow"/><memberdata name="version_assign" type="method" display="Version_Assign"/><memberdata name="datapath_access" type="method" display="DataPath_Access"/><memberdata name="datapath_assign" type="method" display="DataPath_Assign"/><memberdata name="isinpathconfig" type="method" display="IsInPathConfig"/><memberdata name="managefxuclasslibrary" type="method" display="ManageFxuClassLibrary"/><memberdata name="writedebug" type="method" display="WriteDebug"/><memberdata name="fxunewobject" type="method" display="FxuNewObject"/><memberdata name="datasessionid" type="property" display="DataSessionId"/><memberdata name="userid" type="property" display="UserId"/><memberdata name="userid_access" type="method" display="UserId_Access"/><memberdata name="userid_assign" type="method" display="UserId_Assign"/><memberdata name="userid_allow" type="property" display="UserId_Allow"/><memberdata name="project_allow" type="property" display="Project_Allow"/></VFPData>

project = .NULL.
version_allow = .F.
datasessionid = 1
userid = .NULL.
userid_allow = .F.
project_allow = .F.
Name = "fxuinstance"
]]></properties>
		<protected><![CDATA[foxunitpath_allow^
version_allow^
userid_allow^
project_allow^
foxunitpath_assign^
project_assign^
version_assign^
datapath_access^
datapath_assign^
userid_access^
userid_assign^
]]></protected>
		<methods><![CDATA[PROCEDURE datapath_access
*To do: Modify this routine for the Access method
LOCAL lcResult
IF !ISNULL(this.Project)
	m.lcResult=JUSTPATH(this.Project.Name)
ELSE
	m.lcResult=SYS(5)+SYS(2003)
ENDIF

IF !DIRECTORY(m.lcResult, 1)
	ERROR 2145, "DataPath"
ENDIF

m.lcResult=ADDBS(m.lcResult)+"Tests"
IF !DIRECTORY(m.lcResult, 1)
	MKDIR (m.lcResult)
ENDIF

RETURN m.lcResult
ENDPROC
PROCEDURE datapath_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
ERROR 1740, "DataPath"
ENDPROC
PROCEDURE foxunitpath_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
IF this.FoxUnitPath_Allow
	THIS.FoxUnitPath = m.vNewVal
ELSE
	ERROR 1740, "FoxUnitPath"
ENDIF

ENDPROC
PROCEDURE fxunewobject
*  This wrapper to the NEWOBJECT() function is a class
*  factory based on \FoxUnit\FXUClassFactory.DBF, called 
*  to instantiate one of the following:
*    - The indicated class in the indicated .VCX
*    - The indicated class in the indicated .PRG
*    - The indicated .SCX
*  and RETURNs an object reference to the indicated
*  object (or .NULL. if something goes wrong)
*
*  The idea here is that, rather than hardcode the class
*  and class library for the objects used in FoxUnit,
*  the class name and class library are instead specified
*  in the \FoxUnit\FXUClassFactory.DBF records.  So, if
*  you decide to modify FoxUnit to meet your needs, rather
*  than modifying the "official" FoxUnit code, you can
*  just subclass any FoxUnit classes and specify your 
*  subclass in the corresponding record of the
*  \FoxUnit\FXUClassFactory.DBF table.
*  To review this implementation in the FoxUnit code,
*  just use the VFP Code References tool to do a search
*  for "FXUNewObject" on the files in the \FoxUnit folder.
*  
*  The tcClassID parameter is REQUIRED, and specifies
*  the FXUClassFactory.ClassID field value -- the
*  class/.SCX in that FXUClassFactory record is 
*  instantiated here:
*    FXUClassFactory.DBF
*        ClassID - specifies a unique string identifier
*                  for the object to be instantiated
*      ClassName - specifies the name of the class to 
*                  be instantiated (if ClassLib is an
*                  .SCX filename, leave ClassName blank)
*       ClassLib - specifies the class library (.PRG or
*                  .VCX) to be instantiated -- we STRONGLY
*                  recommend that this class library be
*                  in your VFP path, but you can specify
*                  the full path if you want
*
*  NOTE that if the FXUClassFactory.ClassLib is an
*  .SCX filename (and FXUClassFactory.ClassName is
*  therefore blank/empty), the indicated form is
*  instantiated but then goes immediately out of
*  scope, so you should do something like this:
*    PUBLIC goForm
*    goForm = FXUNewObject("ClassID")
*    goForm.Show()
*
*  
*  USAGE
*  =============================================
*  LOCAL SomeObject
*  SomeObject = FXUNewObject("ClassID")
*  -OR-
*  LOCAL SomeObject
*  SomeObject = FXUNewObject("ClassID",InitParameter)
*  -OR-
*  LOCAL SomeObject
*  SomeObject = FXUNewObject("ClassID",InitParameter1,InitParameter2)
*
*
*  lParameters
*         tcClassID (R) FXUClassFactory.ClassID value, indicating
*                         the class/form to instantiate
*  tuInitParameter1 (O) First parameter passed to the Init of
*                         the class/form to instantiate
*  tuInitParameter2 (O) Second parameter passed to the Init of
*                         the class/form to instantiate
*
PARAMETERS tcClassID as String, tuInitParameter1 as Variant, tuInitParameter2 as Variant

IF VARTYPE(m.tcClassID)!="C" OR EMPTY(m.tcClassID) 
	MESSAGEBOX("The required tcClassID parameter has not been passed!", 16, "FxuInstance.FxuNewObject()")
	RETURN .NULL.
ENDIF

SET DATASESSION TO this.DataSessionId

&&	Get the FXUClassFactory.DBF open
LOCAL lcFxuClassFactoryLocation, loException as Exception
m.lcFxuClassFactoryLocation = ADDBS(this.FoxUnitPath) + "FXUClassFactory.dbf"

this.WriteDebug("FxuInstance.FxuNewObject()", "Attempting to get class factory from {123}" + m.lcFxuClassFactoryLocation + "}.")
USE IN SELECT("FXUClassFactory")
TRY
	USE (m.lcFxuClassFactoryLocation) IN 0 SHARED NOUPDATE
CATCH TO loException
ENDTRY
IF NOT USED("FXUClassFactory")
	IF VARTYPE(m.loException)=="O"
		MESSAGEBOX("Unable to open the FXUClassFactory.DBF table because " + CHR(13) + m.loException.Message, 16, "FxuInstance.FxuNewObject()")
	ELSE
		MESSAGEBOX("Unable to open the FXUClassFactory.DBF table for unknown reason.", 16, "FxuInstance.FxuNewObject()")
	ENDIF
ENDIF
IF NOT USED("FXUClassFactory")
	RETURN .NULL.
ENDIF

&&	Find the indicated record in FXUClassFactory.DBF
LOCAL lcClassName, lcClassLib, lcSelect
m.lcSelect=SELECT(0)
SELECT FXUClassFactory
	LOCATE FOR UPPER(ALLTRIM(ClassID)) == UPPER(ALLTRIM(m.tcClassID))
	IF NOT FOUND()
		MESSAGEBOX("Unable to locate the class id {123}" + m.tcClassID + "} in the FXUClassFactory table.", 16, "FxuInstance.FxuNewObject()")
	ELSE
		lcClassName = UPPER(ALLTRIM(EVALUATE("FXUClassFactory.ClassName")))
		lcClassLib = UPPER(ALLTRIM(EVALUATE("FXUClassFactory.ClassLib")))
	ENDIF
SELECT (m.lcSelect)
USE IN SELECT("FXUClassFactory")
IF EMPTY(m.lcClassLib)
	RETURN .NULL.
ENDIF

&&	instantiate the indicated object

LOCAL loReturn, lnPCount
loReturn = .NULL.
lnPCount = PCOUNT()
IF EMPTY(m.lcClassName) 
	&&	ClassLib is expected to be an .SCX file
	TRY
		DO CASE
			CASE m.lnPCount = 3
				DO FORM (m.lcClassLib) WITH m.tuInitParameter1, m.tuInitParameter2
			CASE m.lnPCount = 2
				DO FORM (m.lcClassLib) WITH m.tuInitParameter1
			OTHERWISE
				DO FORM (m.lcClassLib)
		ENDCASE
	CATCH TO loException
		loReturn = .NULL.
	ENDTRY
	IF VARTYPE(m.lcClassName) = "O"
		loReturn = m.lcClassName
	ENDIF
ELSE
	&&	ClassLib is expected to be an .VCX file
	TRY
		DO CASE
			CASE m.lnPCount = 3
				loReturn = NEWOBJECT(m.lcClassName, m.lcClassLib, "", m.tuInitParameter1, m.tuInitParameter2)
			CASE m.lnPCount = 2
				loReturn = NEWOBJECT(m.lcClassName,m.lcClassLib,"", m.tuInitParameter1)
			OTHERWISE
				loReturn = NEWOBJECT(m.lcClassName,m.lcClassLib)
		ENDCASE
	CATCH TO loException
		loReturn = .NULL.
	ENDTRY
ENDIF 

IF VARTYPE(m.loException)=="O"
	ASSERT .F. MESSAGE "Unable to instantiate the requested {123}" + m.tcClassID + "} object because " + CHR(13) + loException.Message
&&		MESSAGEBOX("Unable to instantiate the requested {123}" + m.tcClassID + "} object because " + CHR(13) + loException.Message, 16, "FxuInstance.FxuNewObject()")
ENDIF

RETURN m.loReturn
ENDPROC
PROCEDURE Init
PARAMETERS tcVersion, tcFoxUnitPath, toProject

IF VARTYPE(m.tcVersion)!="C" OR EMPTY(m.tcVersion)
	ASSERT .F. MESSAGE "fxuinstance.Init(): m.tcVersion is empty or invalid."
	RETURN .F.
ENDIF

IF VARTYPE(m.tcFoxUnitPath)!="C"
	ERROR 1759, "FoxUnitPath"
	RETURN .F.
ENDIF

IF !DIRECTORY(m.tcFoxUnitPath, 1)
	ERROR 1963
	RETURN .F.
ENDIF

* Check if path requirements mentioned in readme.txt are met
IF !this.IsInPathConfig(m.tcFoxUnitPath)
	ASSERT .F. MESSAGE	"fxuinstance.Init(): m.tcFoxUnitPath {123}" + TRANSFORM(m.tcFoxUnitPath) + "} wasn't found in your path configuration - " + ;
						"please check your settings (see also step 1. of FoxUnit QuickStart in 'readme.txt')!"
ENDIF

this.Version_Allow=.T.
this.Version=m.tcVersion
this.Version_Allow=.F.

this.FoxUnitPath_Allow=.T.
this.FoxUnitPath=m.tcFoxUnitPath
this.FoxUnitPath_Allow=.F.

IF VARTYPE(m.toProject)=="O" AND !ISNULL(m.toProject)
	this.Project_Allow=.T.
	this.Project=m.toProject
	this.Project_Allow=.F.
ENDIF

RETURN this.ManageFxuClassLibrary()
ENDPROC
PROCEDURE isinpathconfig
PARAMETERS tcPath

IF VARTYPE(m.tcPath)!="C" OR EMPTY(m.tcPath)
	ASSERT .F. MESSAGE "fxuInstance.IsInPathConfig(): m.tcPath {123}" + TRANSFORM(m.tcPath) + "} is empty or invalid!"
	RETURN .F.
ENDIF

m.tcPath=ADDBS(UPPER(ALLTRIM(m.tcPath)))

LOCAL lnPath, lnPaths
LOCAL ARRAY laPath[1]
m.lnPath=0
m.lnPaths=ALINES(m.laPath, SET("Path"), 9, ";")
FOR m.lnPath = 1 TO m.lnPaths
	IF m.tcPath==UPPER(ADDBS(m.laPath[m.lnPath]))
		EXIT
	ENDIF
ENDFOR

RETURN BETWEEN(m.lnPath, 1, m.lnPaths)
ENDPROC
PROCEDURE managefxuclasslibrary
USE IN SELECT('FxuClassFactory')
USE IN SELECT('FxuClassFactoryBase')

LOCAL lcFxuClassFactoryLocation, loException as Exception

lcFxuClassFactoryLocation = ADDBS(this.FoxUnitPath) + "FxuClassFactoryBase.dbf"
this.WriteDebug("fxu.prg/ManageFxuClassFactory()", "Attempting to get class factory base from {123}" + m.lcFxuClassFactoryLocation + "}.")
TRY
	USE (m.lcFxuClassFactoryLocation) IN 0 SHARED
CATCH TO m.loException
ENDTRY
IF VARTYPE(m.loException)=="O" AND !USED("FxuClassFactoryBase")
	ASSERT .F. MESSAGE "Unable to open FxuClassFactoryBase because " + m.loException.Message + "!"
	RETURN .F.
ENDIF

lcFxuClassFactoryLocation = ADDBS(this.FoxUnitPath) + "FxuClassFactory.dbf"
this.WriteDebug("fxu.prg/ManageFxuClassFactory()", "Attempting to get class factory from {123}" + m.lcFxuClassFactoryLocation + "}.")
IF !FILE(lcFxuClassFactoryLocation, 1)
	SELECT FxuClassFactoryBase
	COPY TO (m.lcFxuClassFactoryLocation)
ELSE
	USE (m.lcFxuClassFactoryLocation) IN 0 EXCLUSIVE
	INSERT INTO FxuClassFactory ;
		SELECT * FROM FxuClassFactoryBase WHERE UPPER(ClassID) NOT IN ;
		(SELECT UPPER(ClassID) FROM FxuClassFactory)
ENDIF

USE IN SELECT('FxuClassFactory')
USE IN SELECT('FxuClassFactoryBase')
ENDPROC
PROCEDURE project_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
IF this.Project_Allow
	THIS.Project = m.vNewVal
ELSE
	ERROR 1740, "Project"
ENDIF

ENDPROC
PROCEDURE userid_access
*To do: Modify this routine for the Access method
IF ISNULL(this.UserId)
	this.UserId_Allow=.T.
	this.UserId = ALLTRIM(TRANSFORM(SYS(0)))
	IF !("#" $ this.UserId)
		*  machine information not assigned by the network,
		*  or network shell not loaded, or standalone machine
		this.UserId = SPACE(0)
	ELSE
		this.UserId = ALLTRIM(SUBSTRC(this.UserId, AT_C("#", this.UserId) + 1))
	ENDIF
	this.UserId_Allow=.F.
ENDIF

RETURN this.UserId
ENDPROC
PROCEDURE userid_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
IF this.UserId_Allow
	this.UserId=m.vNewVal
ELSE
	ERROR 1740, "UserId"
ENDIF
ENDPROC
PROCEDURE version_assign
LPARAMETERS vNewVal
*To do: Modify this routine for the Assign method
IF this.Version_Allow
	THIS.Version = m.vNewVal
ELSE
	ERROR 1740, "Version"
ENDIF

ENDPROC
PROCEDURE writedebug
PARAMETERS tcLocation, tcMessage

IF VARTYPE(m.tcLocation)!="C" OR EMPTY(m.tcLocation)
	m.tcLocation="<Unknown location>"
ENDIF

DEBUGOUT DATETIME(), m.tcLocation, m.tcMessage
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1><![CDATA[Class]]></reserved1>
		<reserved2><![CDATA[1]]></reserved2>
		<reserved3><![CDATA[version Returns the version of the currently running instance of FoxUnit.
foxunitpath Returns the FoxUnit Path.
foxunitpath_allow
datapath Returns the FoxUnit Data Path.
_memberdata XML Metadata for customizable properties
project Returns the project object this instance is bound to.
version_allow
datasessionid Sets or returns the data session ID operations performed by this object should run in.
userid Returns the current user name.
userid_allow
project_allow
*foxunitpath_assign 
*project_assign 
*version_assign 
*datapath_access 
*datapath_assign 
*isinpathconfig Checks if a path specification occurs in the path configuration (SET("Path")) and returns a logical expression indicating success.
*managefxuclasslibrary Creates / updates the FoxUnit class factory table and returns a logical expression indicating success.
*writedebug Writes debug information to the debug output window.
*fxunewobject Creates and returns an object by class id, or .NULL. on failure.
*userid_access 
*userid_assign 
]]></reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6><![CDATA[Pixels]]></reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>109</nrecno>
	</class>
	<class>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<class/>
		<classloc/>
		<baseclass/>
		<objname><![CDATA[fxuinstance]]></objname>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>110</nrecno>
	</class>
</VFPData>
