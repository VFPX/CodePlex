<?xml version = "1.0" encoding="Windows-1252" standalone="yes"?>
<VFPData>
	<xsd:schema id="VFPData" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="VFPData" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="class" minOccurs="0" maxOccurs="unbounded">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="platform">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="8"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="uniqueid">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="10"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="class">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="classloc">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="baseclass">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="objname">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="parent">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="properties">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="protected">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="methods">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole">
									<xsd:simpleType>
										<xsd:restriction base="xsd:base64Binary">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="ole2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved1">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved2">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved3">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved4">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved5">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved6">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved7">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="reserved8">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="user">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:maxLength value="2147483647"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
								<xsd:element name="nrecno">
									<xsd:simpleType>
										<xsd:restriction base="xsd:decimal">
											<xsd:totalDigits value="10"/>
											<xsd:fractionDigits value="0"/>
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:element>
							</xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
				<xsd:anyAttribute namespace="http://www.w3.org/XML/1998/namespace" processContents="lax"/>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[form]]></class>
		<classloc/>
		<baseclass><![CDATA[form]]></baseclass>
		<objname><![CDATA[frmfoxunit]]></objname>
		<parent/>
		<properties><![CDATA[DataSession = 2
Height = 480
Width = 803
ShowWindow = 2
DoCreate = .T.
ShowTips = .T.
AutoCenter = .T.
Caption = "FoxUnit - The Unit Testing Framework for Visual FoxPro"
Visible = .T.
FillStyle = 1
Icon = (("FoxUnit.ico"))
AllowOutput = .F.
icclassfilter = 
icgridrs = FXUResults
icnamefilter = 
ilallowdebug = .F.
ilclosedebuggeratendoftestsrun = .F.
ilhonortestprefix = .F.
ilinitialentry = .T.
inbar = 0
incolorfail = (rgb(255,50,50))
incolornotrun = (rgb(200,200,200))
incolorpass = (rgb(0,220,0))
inmostrecentselectedrow = 1
inzoomwindowstate = 0
nsplitterposition = 0
_memberdata = <VFPData><memberdata name="nsplitterposition" display="nSplitterPosition"/></VFPData>
lfailedonly = .F.
Name = "frmfoxunit"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE acknowledgements
*
*  this method is called from the form-level shortcut menu
*

LOCAL lcSetClassLib, loForm
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU 

loForm = CREATEOBJECT("frmShowInfo", ;
                      FILETOSTR("FoxUnitAcknowledgements.TXT"), ;
                      .f., ;					
                      "FoxUnit Acknowledgements", ;
                      40, ;
                      .f., ;
                      SYSMETRIC(2)-160)
loForm.Show()          

SET CLASSLIB TO &lcSetClassLib
ENDPROC
PROCEDURE Activate
IF THIS.ilInitialEntry ;
     AND RECCOUNT(THIS.icGridRS) = 0
  *
  *  on instantiation, if there are no records in
  *  the grid cursor/test results cursor, then
  *  start focus on the <Create New> button
  *
  THIS.cmdCreateNewTestClass.SetFocus()
ENDIF

IF NOT THIS.ilInitialEntry
  *
  *  remove this menu pad (installed in THIS.Deactivate)
  *  any time this form is the active form
  *
  RELEASE PAD pFoxUnit OF _MSYSMENU
ENDIF

IF THIS.ilInitialEntry
  IF THIS.ilLargeGrid   &&& set in THIS.RestoreSettings()
    *
    *  I couldn't get this to work properly in
    *  THIS.Init
    *
    THIS.ilLargeGrid = .f.
    THIS.GridSize()
  ENDIF
ENDIF

THIS.ilInitialEntry = .f.

IF TYPE("THIS.ilReloadCurrentClassOnActivate") = "L" ;
     AND THIS.ilReloadCurrentClassOnActivate
  *
  *  FXUResultData::AddNewTest() and ModifyExistingTest()
  *  can set this flag
  *    MODIFY COMMAND FXUResultData
  *
  THIS.cmdReloadSelectedTestClass.Click()
ENDIF

*% Change per Derek Alweit
thisform.show()

ENDPROC
PROCEDURE addshortcutoption_classaddtest
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Add a new test (method) to the currently-selected Test Class" ;
     PICTURE (THIS.cmdAddNewTest.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdAddNewTest.Click()
 
ENDPROC
PROCEDURE addshortcutoption_classload
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Load a Test Class (.PRG) that is not already in the list" ;
     PICTURE (THIS.cmdLoadNewTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdLoadNewTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_classnew
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Create a new Test Class (.PRG)" ;
     PICTURE (THIS.cmdCreateNewTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdCreateNewTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_detailsprint
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Print..." 
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.DetailsPrint()

ENDPROC
PROCEDURE addshortcutoption_detailszoom
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Zoom..." 
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.DetailsZoom()


ENDPROC
PROCEDURE addshortcutoption_formacknowledgements
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Acknowledgements..." ;
     PICTURE "FXUAcknowledgements.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Acknowledgements()

ENDPROC
PROCEDURE addshortcutoption_formclose
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Close" ;
     PICTURE "FXUFormClose.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Release() 
 
ENDPROC
PROCEDURE addshortcutoption_formfont
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Font..." 
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.FormFont()


ENDPROC
PROCEDURE addshortcutoption_formlicense
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "License..." ;
     PICTURE "FXULicense.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.License()

ENDPROC
PROCEDURE addshortcutoption_formoptions
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Options..." ;
     PICTURE "FXUOptions.BMP"
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.Options()

ENDPROC
PROCEDURE addshortcutoption_formresetfont
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Reset Font to default" 
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.FormResetFont()

ENDPROC
PROCEDURE addshortcutoption_gridresetcolumnwidths
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Reset column widths to default" 
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridResetColumnWidths()


ENDPROC
PROCEDURE addshortcutoption_gridsize
THIS.inBar = ((THIS.inBar/10)+1)*10
THIS.LockScreen = .t.

IF THIS.ilLargeGrid
  DEFINE BAR (THIS.inBar) OF pShortCut ;
       PROMPT "Normal size list"
 ELSE
  DEFINE BAR (THIS.inBar) OF pShortCut ;
       PROMPT "Large size list"
ENDIF

THIS.LockScreen = .f.

ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSize()

ENDPROC
PROCEDURE addshortcutoption_gridsortbylocation
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Sort By Location" 
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLoc")
  SET MARK OF BAR THIS.inBar OF pShortCut TO .t.
ENDIF
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSortByLocation()

ENDPROC
PROCEDURE addshortcutoption_gridsortbyname
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Sort By Name" 
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLName")
  SET MARK OF BAR THIS.inBar OF pShortCut TO .t.
ENDIF
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.GridSortByName()


ENDPROC
PROCEDURE addshortcutoption_runtestsall
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Run ALL the tests in the list" ;
     PICTURE (THIS.cmdRunTestsAll.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsAll.Click()

ENDPROC
PROCEDURE addshortcutoption_runtestsclass
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Run all the tests in the currently-selected Test Class" ;
     PICTURE (THIS.cmdRunTestsOneClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsOneClass.Click()

ENDPROC
PROCEDURE addshortcutoption_runtestselected
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Run only the currently-selected test" ;
     PICTURE (THIS.cmdRunTestsOne.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRunTestsOne.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedmodify
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Modify the currently-selected test" ;
     PICTURE (THIS.cmdModifySelected.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdModifySelected.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedreload
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Reload the Test Class containing the currently-selected test" ;
     PICTURE (THIS.cmdReloadSelectedTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdReloadSelectedTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_selectedremove
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut ;
     PROMPT "Remove the Test Class containing the currently-selected test" ;
     PICTURE (THIS.cmdRemoveTestClass.Picture)
ON SELECTION BAR (THIS.inBar) OF pShortCut _Screen.ActiveForm.cmdRemoveTestClass.Click()

ENDPROC
PROCEDURE addshortcutoption_separator
THIS.inBar = ((THIS.inBar/10)+1)*10
DEFINE BAR (THIS.inBar) OF pShortCut PROMPT "\-"

ENDPROC
PROCEDURE afterruntests
LPARAMETERS tlNoGridSetFocus

*
*  this method is called after each of the "run test(s)"
*  methods, and several other places
*
*  and from THIS.grdTests.AfterRowColChange(), which
*  passes the tlNoGridSetFocus parameter here as .T. 
*

IF VARTYPE(tlNoGridSetFocus) != "L"
	tlNoGridSetFocus = .f.
ENDIF


IF this.ilTestsFailed AND !tlNoGridSetFocus
	SELECT (this.icGridRs)
	GO TOP 
	LOCATE FOR trun = .t. and success = .f. and UPPER(TNAME) != "(NONE)"
ENDIF 

THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.Refresh()
THIS.pgfDetails.pgMessages.edtMessages.Refresh()

This.pgfDetails.pgFailuresAndErrors.FontBold = ;
	NOT EMPTY(THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.text) 
This.pgfDetails.pgMessages.FontBold = ;
	NOT EMPTY(THIS.pgfDetails.pgMessages.edtMessages.text) 

THIS.UpdateCurrentGridRowColor()

IF !tlNoGridSetFocus
  THIS.grdTests.SetFocus()
ENDIF

ENDPROC
PROCEDURE applyfilter
*
*  this method is called from the LostFocus of
*  the two filter textboxes above the grid
*
IF EMPTY(THIS.icClassFilter) ;
		AND EMPTY(THIS.icNameFilter) ;
		AND NOT THIS.lFailedonly ;
		AND EMPTY(FILTER(THIS.icGridRS))
*
*  nothing to do
*
	RETURN
ENDIF

LOCAL lcFilter
m.lcFilter = UPPER(ALLTRIM(THIS.icClassFilter))
IF NOT EMPTY(m.lcFilter)
	m.lcFilter = ['] + m.lcFilter + [' $ UPPER(TClass)]
ENDIF
IF NOT EMPTY(THIS.icNameFilter)
	IF NOT EMPTY(m.lcFilter)
		m.lcFilter = m.lcFilter + " AND "
	ENDIF
	m.lcFilter = m.lcFilter + ['] + UPPER(ALLTRIM(THIS.icNameFilter)) + [' $ UPPER(TName)]
ENDIF
IF THIS.lFailedonly
	IF NOT EMPTY(m.lcFilter)
		m.lcFilter = m.lcFilter + " AND "
	ENDIF
	m.lcFilter = m.lcFilter + " not success "
ENDIF

LOCAL lnSelect
m.lnSelect = SELECT(0)
SELECT (THIS.icGridRS)

IF EMPTY(m.lcFilter)
	SET FILTER TO
ELSE
	SET FILTER TO &lcFilter
	IF NOT EVALUATE(m.lcFilter)
*
*  current record does not meet the new
*  filter condition
*
		LOCATE
	ENDIF
ENDIF

THIS.LOCKSCREEN = .T.
THIS.grdTests.REFRESH()
*
*  scroll PageUp, so that if the filter includes more
*  records above the first/top one showing in the grid,
*  we can see at least some of them 
*
THIS.grdTests.DOSCROLL(2)
THIS.cmdClearFilter.REFRESH()
This.Refresh()
THIS.LOCKSCREEN = .F.
ENDPROC
PROCEDURE calculaterowcolor
LPARAMETERS tlSuccess, tlRun

LOCAL lnRowColor
DO CASE
  CASE m.tlRun = .f.
   	lnRowColor = THIS.inColorNotRun
  CASE m.tlSuccess = .t.
	lnRowColor = THIS.inColorPass
  OTHERWISE
    lnRowColor = THIS.inColorFail
ENDCASE

RETURN m.lnRowColor
	
		
		
ENDPROC
PROCEDURE Deactivate
IF NOT USED(THIS.grdTests.RecordSource)
  *  see THIS.ReceiveResultsNotification()
  RETURN
ENDIF

*
*  install a FoxUnit menu pad whenever this form is
*  deactivated/minimized, etc.
*
DEFINE PAD pFoxUnit OF _MSYSMENU PROMPT "Fox\<Unit" 
ON SELECTION PAD pFoxUnit OF _MSYSMENU FXUShowForm()
*
*  MODIFY COMMAND FXUShowForm
*  

IF RECCOUNT(THIS.icGridRS) > 1
  *
  *  don't bother with this info if you've been
  *  here a few times
  *
 ELSE  
*!*	  ACTIVATE SCREEN
*!*	  ? "The FoxUnit form interface is a Top-Level form, and can be re-activated via:"
*!*	  ? "  - The FoxUnit pad on the VFP system menu"
*!*	  ? "  - The FoxUnit item in the Windows Taskbar"
ENDIF


ENDPROC
PROCEDURE Destroy
THIS.SaveSettings()

THIS.ioTestResult = .f.
THIS.ioTestBroker = .f.
THIS.ioResultData = .f.

ENDPROC
PROCEDURE detailsprint
LOCAL lcSetProc
lcSetProc = SET("PROCEDURE")
*
*  MODIFY COMM FXU
*
SET PROCEDURE TO FXU.PRG ADDITIVE 

LOCAL loEditbox
loEditbox = THIS.ActiveControl

CREATEOBJECT("sesTextBlockReport", ;
             loEditBox.Text, ;
             loEditBox.Parent.Caption)

SET PROCEDURE TO &lcSetProc

ENDPROC
PROCEDURE detailszoom
*
*  this method is called from the editbox-level shortcut menu,
*  and focus could be in either editbox
*

LOCAL lcSetClassLib, loForm, loEditBox
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU 

loEditBox = THIS.ActiveControl

LOCAL loParameter
loParameter = CREATEOBJECT("Empty")
ADDPROPERTY(loParameter,"iaCode[1]")
loParameter.iaCode[1] = "THIS.WindowState = " + TRANSFORM(THIS.inZoomWindowState)

loForm = CREATEOBJECT("frmShowInfo", ;
                      loEditbox.Text, ;
                      m.loParameter, ;
                      loEditBox.Parent.Caption, ;
                      THIS.inZoomTop, ;
                      THIS.inZoomLeft, ;
                      THIS.inZoomHeight, ;
                      THIS.inZoomWidth, ;
                      loEditBox.FontName, ;
                      loEditBox.FontSize, ;
                      loEditBox.FontBold, ;
                      loEditBox.FontItalic)
loForm.Show()          
 
ENDPROC
PROCEDURE formatsecondselapsed
LPARAMETERS tnSecondsElapsed

LOCAL lcFormattedTimeElapsed

lcFormattedTimeElapsed = ;
     TRANSFORM(INT(tnSecondsElapsed/(60*60))) + ':'  + ;
     PADL(TRANSFORM(INT(tnSecondsElapsed/60)),2,'0') + ':' + ;
     PADL(TRANSFORM(MOD(INT(tnSecondsElapsed),60)),2,'0') + '.' +  ;
     RIGHTC(STR(tnSecondsElapsed,10,3),3)
     
RETURN lcFormattedTimeElapsed
ENDPROC
PROCEDURE formfont
*
*  called from the Form-Level shortcut menu
*

LOCAL lcFontName, lnFontSize, lcFontStyle, llFontBold, ;
      llFontItalic, lcNewFont
lcFontName = THIS.grdTests.FontName
lnFontSize = THIS.grdTests.FontSize
lcFontStyle = IIF(THIS.grdTests.FontBold,"B",SPACE(0))
lcFontStyle = m.lcFontStyle + IIF(THIS.grdTests.FontItalic,"I",SPACE(0))

lcNewFont =  GETFONT(m.lcFontName, lnFontSize, lcFontStyle) 

THIS.Show()

IF EMPTY(m.lcNewFont)
  RETURN
ENDIF

THIS.LockScreen = .t.

lcFontName = GETWORDNUM(m.lcNewFont,1,",")
lnFontSize = INT(VAL(GETWORDNUM(m.lcNewFont,2,",")))
lcFontStyle = GETWORDNUM(m.lcNewFont,3,",")

llFontBold = "B" $ m.lcFontStyle
llFontItalic = "I" $ m.lcFontStyle

THIS.grdTests.FontName = m.lcFontName
THIS.grdTests.FontSize = m.lnFontSize
THIS.grdTests.FontBold = m.llFontBold
THIS.grdTests.FontItalic = m.llFontItalic

THIS.pgfDetails.SetAll("FontName",m.lcFontName)
THIS.pgfDetails.SetAll("FontSize",m.lnFontSize)
THIS.pgfDetails.SetAll("FontBold",m.llFontBold)
THIS.pgfDetails.SetAll("FontItalic",m.llFontItalic)

THIS.LockScreen = .f.

ENDPROC
PROCEDURE formresetfont
*
*  this method is called from the form-level shortcut
*  menu
*

THIS.LockScreen = .t.

THIS.grdTests.ResetToDefault("FontName")
THIS.grdTests.ResetToDefault("FontSize")
THIS.grdTests.ResetToDefault("FontBold")
THIS.grdTests.ResetToDefault("FontItalic")

LOCAL loPage, loControl
FOR EACH loPage IN THIS.pgfDetails.Pages
  loPage.ResetToDefault("FontName")
  loPage.ResetToDefault("FontSize")
  loPage.ResetToDefault("FontBold")
  loPage.ResetToDefault("FontItalic")
  FOR EACH loControl IN loPage.Controls
    loControl.ResetToDefault("FontName")
    loControl.ResetToDefault("FontSize")
    loControl.ResetToDefault("FontBold")
    loControl.ResetToDefault("FontItalic")
  ENDFOR
ENDFOR

loPage = .NULL.
loControl = .NULL.

THIS.grdTests.ResetToDefault("FontSize")

THIS.LockScreen = .f.

ENDPROC
PROCEDURE getfiltertooltiptext
LOCAL lcText

TEXT TO lcText NOSHOW 
Filter the list to display only those classes (.PRGs)/tests~
for which the entered string(s) are contained in the name of~
the class/test.

For example, to see all tests of Customer code, business~
objects, etc. enter "Customer" (without the quotes) in the~
Name filter string textbox.

The string you enter in both filter string textbox is case-~
insensitive -x the list is filtered where the UPPER() of the~
filter string(s) is contained in the UPPER() of the class/test~
names.
ENDTEXT

m.lcText = CHRTRAN(m.lcText,"~",SPACE(0))

RETURN m.lcText
ENDPROC
PROCEDURE gridresetcolumnwidths
*
*  this method is called from the grid-level shortcut menu
*

LOCAL loColumn
FOR EACH loColumn IN THIS.grdTests.Columns
  loColumn.ResetToDefault("Width")
ENDFOR

IF VERSION(5)>=900
  THIS.grdTests.Resize()
ENDIF

ENDPROC
PROCEDURE gridsize
*
*  this method is called from the grid-level shortcut menu
*

IF NOT THIS.ilInitialEntry
  THIS.LockScreen = .t.
ENDIF

IF THIS.ilLargeGrid
  *
  *  default/normal size
  * 
  THIS.grdTests.ResetToDefault("Height")
  THIS.ilLargeGrid = .f.
  IF VERSION(5)>=900
    *
    *  get the anchor-based proportional size to fire
    *
    THISFORM.Height = THISFORM.Height+1
    THISFORM.Height = THISFORM.Height-1
  ENDIF
 ELSE
  *
  *  larger
  *
  THIS.grdTests.Height = THIS.pgfDetails.Top+THIS.pgfDetails.Height - THIS.grdTests.Top
  THIS.ilLargeGrid = .t.
ENDIF

IF NOT THIS.ilInitialEntry
  THIS.LockScreen = .f.
ENDIF


ENDPROC
PROCEDURE gridsortbylocation
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLoc")
  RETURN
ENDIF

IF RECCOUNT(THIS.icGridRS) = 0
  RETURN
ENDIF

LOCAL lnRecno
lnRecno = IIF(EOF(THIS.icGridRS),0,RECNO(THIS.icGridRS))

THIS.LockScreen = .t.

SET ORDER TO TAG TCLoc IN (THIS.icGridRS)
THIS.grdTests.Refresh()
IF m.lnRecno = 0
  GO TOP IN (THIS.icGridRS)
 ELSE
  GOTO (m.lnRecno) IN (THIS.icGridRS)
ENDIF
THIS.grdTests.Refresh()

THIS.LockScreen = .f.




ENDPROC
PROCEDURE gridsortbyname
IF UPPER(ORDER(THIS.icGridRS)) = UPPER("TCLName")
  RETURN
ENDIF

IF RECCOUNT(THIS.icGridRS) = 0
  RETURN
ENDIF

LOCAL lnRecno
lnRecno = IIF(EOF(THIS.icGridRS),0,RECNO(THIS.icGridRS))

THIS.LockScreen = .t.

SET ORDER TO TAG TCLName IN (THIS.icGridRS)
THIS.grdTests.Refresh()
IF m.lnRecno = 0
  GO TOP IN (THIS.icGridRS)
 ELSE
  GOTO (m.lnRecno) IN (THIS.icGridRS)
ENDIF
THIS.grdTests.Refresh()

THIS.LockScreen = .f.

ENDPROC
PROCEDURE Init
THIS.ioTestResult = FxuNewObject("FxuTestResult")

* FXU/JDE 07/01/2004
* Now setting ioTestBroker from Fxu.prg
* test broker is now instantiated prior to the
* Fox Unit form and passed to it. This is to de-couple
* any UI code tested by FoxUnit so that it runs
* in the main VFP window (or as a top-level form in
* it's own right if warranted) instead of as
* a child of the FoxUnit form

*THIS.ioTestBroker = FxuNewObject("FxuTestBroker")

SET ORDER TO TAG TCLoc IN (THIS.icGridRS)

GO TOP IN (THIS.icGridRS)

IF VERSION(5)>=900 
  *
  *  don't permit sizing smaller than the 
  *  initial designed size
  *
  THIS.MinHeight = THIS.Height
  THIS.MinWidth = THIS.Width
 ELSE
  *
  *  no Maximize in VFP8 - anchor resizing in VFP9
  *
  THIS.MaxButton = .f.
  *
  *  ditto the ability to resize
  *
  THIS.BorderStyle = 1
ENDIF

THISFORM.AddProperty("ilLargeGrid",.f.)

*
*  apply settings saved last time in THIS.SaveSettings(),
*  called from THIS.Destroy()
*

THIS.RestoreSettings()

*
*  THIS.inColorNotRun is now ignored -- I've set it
*  to match the default/normal color
*
THIS.inColorNotRun = THIS.grdTests.BackColor

THIS.UpdateCurrentGridRowColor()

This.Show() && Matt Slay 2013-12-17
Thisform.sfsplitterv1.MoveSplitterToPosition(This.nSplitterPosition) && Matt Slay 2013-12-17

THIS.LockScreen = .f.





ENDPROC
PROCEDURE KeyPress
LPARAMETERS nKeyCode, nShiftAltCtrl

*
*  we only get here when focus is in THIS.grdTests --
*  see its When and Valid
*

IF m.nKeyCode = 4
    *
    *  THIS.grdTests.Columns exactly fill the available 
    *  grid width, and therefore we're suppressing this 
    *  {123}RightArrow} keystroke, which would otherwise 
    *  undesirably scroll the grid leftward
    *
    *  note that grdBase::When() and grdBase::Valid() 
    *  have code to only set THIS.KeyPreview to .T. when
    *  the grid has focus, so that this method does
    *  not fire in normal scenarios
    *
    NODEFAULT
    *
    *  and now we'll call the grid.KeyPress() manually,
    *  so that any RightArrow-specific code still fires
    *  (the above NODEFAULT suppresses the native VFP
    *  Grid.KeyPress method from firing) -- note that
    *  this code calls the Grid.KeyPress() method, but
    *  DOES NOT fire the Grid.KeyPress EVENT
    *
    THIS.grdTests.KeyPress(4,m.nShiftAltCtrl)
ENDIF


IF m.nShiftAltCtrl = 2 AND INLIST(m.nKeyCode,30,31)
  *
  *  nShiftAltCtrl = 2/CTRL
  *  nKeyCode = 30/PgDn
  *  nKeyCode = 31/PgUp
  *
  IF m.nKeyCode = 30
    THIS.MoveToFirstTestOfNextClass(.t.)
   ELSE
    THIS.MoveToFirstTestOfNextClass(.f.)
  ENDIF
ENDIF

IF m.nShiftAltCtrl = 2 AND m.nKeyCode = 19
  *
  *  CTRL+s
  *
  THIS.GridSize()
ENDIF
ENDPROC
PROCEDURE license
*
*  this method is called from the form-level shortcut menu
*

LOCAL lcSetClassLib, loForm
lcSetClassLib = SET("CLASSLIB")
SET CLASSLIB TO FXU 

loForm = CREATEOBJECT("frmShowInfo", ;
                      FILETOSTR("FoxUnitLicense.TXT"), ;
                      .f., ;				
                      "FoxUnit Open Source License", ;
                      40, ;
                      .f., ;
                      SYSMETRIC(2)-160)
loForm.Show()          

SET CLASSLIB TO &lcSetClassLib
ENDPROC
PROCEDURE Load
IF UPPER(JUSTSTEM(SYS(16,0))) == "FXU" ;
     OR UPPER(PROGRAM(PROGRAM(-1)-2)) == "FXU" ;
     OR UPPER(PROGRAM(PROGRAM(-1)-3)) == "FXU"
  *
  *  FoxUnit started via DO FXU or by a menu 
  *  option that issues DO FXU
  *     
 ELSE
  MESSAGEBOX("The FoxUnit form interface is designed to be " + ;
             "called from the FXU.PRG -- please start the " + ;
             "FoxUnit form interface by:" + CHR(13) + CHR(13) + ;
             "  DO FXU", ;
             48, ;
             "Please Note")
  *KEYBOARD "DO FXU " PLAIN CLEAR 
  *ACTIVATE WINDOW Command 
  RETURN .f.
ENDIF             

*
*  SET commands scoped to private data sessions
*
SET CENTURY ON
SET DELETED ON
SET SAFETY OFF 
SET EXCLUSIVE OFF
SET MULTILOCKS ON
SET NOTIFY OFF
SET SAFETY OFF 
SET TALK OFF 

LOCAL lcFXUDataPath, cHomeDir as String

* The message boxes below were killing my "flow".
* I created this function for defaulting the tests
* folder to _VFP.CurrentProject.HomeDir + "Tests" HAS
lcFXUDataPath = GetTestsDir() 
  
lcFXUDataPath = ADDBS(m.lcFXUDataPath)

IF FILE(m.lcFXUDataPath + "FXUResults.DBF")
	*
	*  FXUResults.DBF already exists -- the -OR- condition
	*  above has apparently been met, so add m.lcFXUDataPath
	*  to the VFP path
	*
	LOCAL lcPath
	#IF VERSION(5) >= 900    &&& VFP 9
		*  all these work:
		*SET PATH TO (lcFXUDataPath) ADDITIVE 
		*
		*SET PATH TO "&lcFXUDataPath" ADDITIVE
		*
		*lcFXUDataPath = ["] + m.lcFXUDataPath + ["]
		*SET PATH TO &lcFXUDataPath ADDITIVE 
		*
		lcPath = ["] + m.lcFXUDataPath + ["]
		SET PATH TO &lcPath ADDITIVE 
	#ELSE   &&& VFP 8
		lcPath = SET("PATH") + "; " + m.lcFXUDataPath
		SET PATH TO &lcPath
	#ENDIF
ENDIF

*
*  make sure FXUResults.DBF/THIS.icGridRS exists and is 
*  opened
*    MODIFY COMMAND FXUResultData
*
THIS.ioResultData = FxuNewObject("FXUResultData", ;
                              m.lcFXUDataPath, ;
                              "FXUResults.DBF")
IF NOT VARTYPE(THIS.ioResultData) = "O"
  MESSAGEBOX("Unable to locate/initialize the FXUResults.DBF " + ;
             "FoxUnit results table.", ;
             16, ;
             "Please Note")
  RETURN .f.
ENDIF
IF NOT USED("FXUResults")
  MESSAGEBOX("Unable to open the FXUResults.DBF FoxUnit " + ;
             "results table",16,"Please Note")
  RETURN .f.
ENDIF

*
*  save these for use in THIS.SaveSettings
*
THIS.AddProperty("inDesignHeight",THIS.Height)
THIS.AddProperty("inDesignWidth",THIS.Width)

*
*  other setup tasks
*

*THIS.Icon = "FoxUnit.Ico"

*
*  add the version to THIS.Caption 
*
LOCAL lcVersion
DO GetFoxUnitVersion IN FXU WITH lcVersion
*
*  MODIFY COMMAND FXU
*
THIS.Caption = THIS.Caption + " - v" + m.lcVersion

THIS.LockScreen = .t.

ENDPROC
PROCEDURE modifyclassatlinenumber
LPARAMETERS tnLineNumber

EDITSOURCE(FORCEEXT(ALLTRIM(EVALUATE(THIS.icGridRS+".TClass")),"PRG"),m.tnLineNumber)

THIS.AddProperty("ilReloadCurrentClassOnActivate",.t.)
ENDPROC
PROCEDURE movetofirsttestofnextclass
*
*  DEVNOTE
*
*  lParameters
*    tlNext (R) .T. = Next/.F. = Previous
*
LPARAMETERS tlNext

IF RECCOUNT(THIS.icGridRS) = 0
  RETURN
ENDIF

LOCAL lcClassName, lnSelect, lcTag
lnSelect = SELECT(0)
SELECT (THIS.icGridRS)
lcClassName = TClass
lcTag = ORDER()

IF NOT m.tlNext
  SET ORDER TO TAG (m.lcTag) DESCENDING
ENDIF

THIS.LockScreen = .t.

LOCATE REST FOR NOT UPPER(TClass) == UPPER(m.lcClassName) ;
    AND Location = 1

IF EOF()
  *
  *  cycle around to the first/top or last/bottom
  *
  LOCATE
ENDIF

SET ORDER TO TAG (m.lcTag) ASCENDING

THIS.grdTests.Refresh()

SELECT (m.lnSelect)

THIS.LockScreen = .f.


ENDPROC
PROCEDURE options
*
*  this method is called from the form-level shortcut menu
*

LOCAL loForm
loForm = FXUNewObject("FXUOptionsDialog")
loForm.Show()




ENDPROC
PROCEDURE receivecompletenotification
LPARAMETERS tnTestCount, tnFailedTests, tnSuiteSuccess, tnSecondsElapsed

IF NOT USED(THIS.grdTests.RecordSource)
  *  see THIS.ReceiveResultsNotification()
  RETURN
ENDIF

thisform.settestsruntestsfailedlabel(tnTestcount, tnFailedTests, this.FormatSecondsElapsed(tnSecondsElapsed))

* Added so that when we run frmFxuFoxUnit::AfterRunTests() we can
* seek the first failed test in the run and set the focus on that row
* showing the failure and/or exception immediately for feedback
IF tnFailedTests > 0
	this.ilTestsFailed = .t.
ELSE
	this.ilTestsFailed = .f.
ENDIF 

THISFORM.grdTests.Refresh()
THISFORM.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.Refresh()
*THISFORM.edtFailuresAndErrors.Refresh()
THISFORM.pgfDetails.pgMessages.edtMessages.Refresh()
*THISFORM.edtMessages.Refresh()


ENDPROC
PROCEDURE receiveresultnotification
LPARAMETERS toTestResult as FxuTestResult of FxuTestResult.prg

IF NOT USED(THIS.grdTests.RecordSource)
  LOCAL lcText
  lcText = ;
  "The FXUResults.DBF table drives the grid in the " + ;
  "FoxUnit form interface AND logs Failure/Error/Message " + ;
  "results." + ;
  CHR(13) + CHR(13) + ;
  "HOWEVER, the FXUResults table has been CLOSED sometime " + ;
  "during the execution of your last test!  Most likely, " + ;
  "you have some code in the TearDown method that closes " + ;
  "work areas indiscriminately or otherwise issues command(s) " + ;
  "like CLEAR ALL/CLOSE ALL/etc." + ;
  CHR(13) + CHR(13) + ;
  "You need to determine where/when/why you are closing the " + ;
  "FXUResults.DBF table during the execution of your test(s), " + ;
  "and rememdy that behavior." + ;
  CHR(13) + CHR(13) + ;
  "In the meantime, the FoxUnit test harness has to shutdown " + ;
  "because the grid.RecordSource cannot be 'restored' once " + ;
  "it has been closed."
  MESSAGEBOX(m.lcText,16,"FXUResults.DBF table is closed!")
  THISFORM.Release()
  RETURN 
ENDIF

LOCAL loResultDAta as FxuResultData OF FxuResultData.prg

loResultData = THIS.ioResultData

loResultData.LogResult(toTestResult)

THIS.ShowProgress(toTestResult.inRunTests, toTestResult.ilCurrentResult)
=SEEK(UPPER(ALLTRIM(toTestResult.icCurrentTeSTCLASS)) + UPPER(ALLTRIM(toTestREsult.icCurrentTestName)),THIS.icGridRS,'tclname')

THIS.Refresh()

ENDPROC
PROCEDURE restoresettings
*
*  restore settings from the last time this
*  form was run
*
*  this method is called from THIS.Init()
*
THIS.AddProperty("icPersistFile",ADDBS(JUSTPATH(DBF(THIS.icGridRS)))+"FXUPersist.XML")

LOCAL lcUserID, lcCommand

lcUserID = ALLTRIM(TRANSFORM(SYS(0)))
IF LENC(m.lcUserID) < 15 OR NOT "#" $ m.lcUserID
  *  machine information not assigned by the network,
  *  or network shell not loaded, or standalone machine
  lcUserID = SPACE(0)
 ELSE
  *  get a user-specific filename, so each user 
  *  can have THEIR settings saved/restored
  lcUserID = ALLTRIM(SUBSTRC(m.lcUserID,AT_C("#",m.lcUserID)+1))
ENDIF
THIS.AddProperty("icUserID",m.lcUserID)

IF FILE(THIS.icPersistFile)
  TRY 
  XMLTOCURSOR(THIS.icPersistFile,"FoxUnitPersist",512)
  *
  *  apply settings for this user/developer
  *
  SELECT FoxUnitPersist
  LOCATE
  SCAN FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
    lcCommand = ALLTRIM(Setting)
    &lcCommand
    SELECT FoxUnitPersist
  ENDSCAN
  CATCH TO loException
  ENDTRY
  USE IN SELECT("FoxUnitPersist")
ENDIF

* 
*  just in case one of the persisted settings
*  sent the grid record pointer to EOF(), or there
*  are no settings and the grid record pointer is
*  EOF() -- go to the first/top record in the
*  grid
*
IF RECCOUNT(THIS.icGridRS)>0 AND EOF(THIS.icGridRS)
  SELECT (THIS.icGridRS)
  LOCATE 
ENDIF

RETURN 

 
ENDPROC
PROCEDURE RightClick
IF THIS.ShortcutMenuForm()
  ACTIVATE POPUP pShortCut
ENDIF

    


ENDPROC
PROCEDURE runalltests
LOCAL lcTestClass, lcTestMethod, lcPath  && Added path. HAS

*
*  scroll the grid to the top
*
IF thisform.ilReloadTestsOnRun
	this.ioResultData.ReloadTestCaseClasses()
ENDIF 

SELECT (THIS.icGridRS)
LOCATE 
THIS.grdTests.Refresh()

* Select the test class and test name for all tests currently
* loaded into the result table, ordered by class name and test name
* into a cursor to be added into the testsuite
*	SELECT TClass, TName FROM (THIS.icGridRS)  ;
*		ORDER BY TClass, TName ;
*		INTO CURSOR Curs_TestSuite

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Load the tests into the testsuite
SELECT (THIS.icGridRs)
GO TOP 

SCAN
	lcTestClass = ALLTRIM(tclass)
	lcTestMethod = ALLTRIM(tname)
	lcPath = ADDBS(tpath) && Added path. HAS
	IF NOT THIS.SeeIfTestClassPRGExists(lcPath + m.lcTestClass) && Added path. HAS
      *
      *  skip the rest of the tests in this missing test class
      *
	  SCAN WHILE ALLTRIM(TClass) == m.lcTestClass
	  ENDSCAN
	  IF NOT EOF()
	    *
	    *  go back one record, because there is an
	    *  implicit SKIP in the ENDSCAN
	    *
	    SKIP -1
	  ENDIF
     ELSE
	  loTestSuite.AddTest(lcPath + lcTestClass, lcTestMethod) && Added path. HAS
	ENDIF
ENDSCAN

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = THIS.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')

* Set the progress of this form to it's initial values for running
* this TestSuite
THIS.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER 
ENDIF 

SELECT (THIS.icGridRS)
LOCATE 

THIS.AfterRunTests()


ENDPROC
PROCEDURE runclasstests
LPARAMETERS tcTestClass && name of class who's tests we will run

LOCAL lcTClass, lcTPath  && Added path. HAS
lcTClass = UPPER(EVALUATE(THIS.icGridRS+".TClass"))
lcTPath = EVALUATE(THISFORM.icGridRS+".TPath") && Added path. HAS

IF NOT THIS.SeeIfTestClassPRGExists(ADDBS(lcTPath) + m.lcTClass) && Added path. HAS
  RETURN
ELSE
	IF this.ilReloadTestsOnRun
		this.ioResultData.ReloadTestCaseClass(m.lcTClass, m.lcTPath) && Added path. HAS
		LOCATE FOR UPPER(tclass) = lcTClass
	ENDIF 
ENDIF

* Select all test names from the THIS.icGridRS table that
* belong to the test class passed
*	SELECT tname FROM (THIS.icGridRS) WHERE tclass == tcTestClass ;
*		ORDER BY tname ;
*		INTO CURSOR Curs_TestSuite
	
tcTestClass = ALLTRIM(tcTestClass)

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Load the tests into the testsuite
* SELECT Curs_TestSuite

SELECT (this.icGridRs)
GO top

SCAN FOR UPPER(ALLTRIM(tclass)) == UPPER(ALLTRIM(tcTestClass))
	loTestSuite.AddTest(ADDBS(lcTPath) + tcTestClass, ALLTRIM(tname)) && Added path. HAS
ENDSCAN

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = thisform.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')


* Set the progress of this form to it's initial values for running
* this TestSuite
ThisForm.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER 
ENDIF 


SELECT (THIS.icGridRS)
*
*  reposition the record pointer on the first
*  test for the class 
*
LOCATE FOR UPPER(TClass) == m.lcTClass

THIS.AfterRunTests()
ENDPROC
PROCEDURE runonetest
LPARAMETERS tcTestClass, tcTestMethod, tcPath && Added path parameter. HAS

SELECT (THIS.icGridRS)
LOCAL lcTClass, lcTName, lcTPath && Added path. HAS
lcTClass = UPPER(EVALUATE(THIS.icGridRS+".TClass"))
lcTName = UPPER(EVALUATE(THIS.icGridRS+".TName"))
lcTPath = UPPER(EVALUATE(THIS.icGridRS+".TPath")) && HAS

IF NOT THIS.SeeIfTestClassPRGExists(ADDBS(lcTPath) + m.lcTClass) && Added path. HAS
  RETURN
ENDIF

* Declare and Insantiate TestSuite
LOCAL loTestSuite as FxuTestSuite OF FxuTestSuite.prg
loTestSuite = FxuNewObject("FxuTestSuite")
loTestSuite.ilAllowDebug = thisform.IlAllowDebug

* Add this one test to the test suite
loTestSuite.AddTest(ADDBS(m.lcTPath) + tcTestClass,tcTestMethod) && Added path. HAS

* Assign the result object to the TestSuite
loTestSuite.ioTestResult = thisform.ioTestResult

* Bind Events to the results events in the TestSuite
BINDEVENT(loTestSuite,'Event_OneTestComplete',Thisform,'Receiveresultnotification')
BINDEVENT(loTestSuite,'Event_AllTestsComplete',ThisForm,'ReceiveCompleteNotification')

* Set the progress of this form to it's initial values for running
* this TestSuite
ThisForm.SetProgress(loTestSuite.inTestCount)

* Run all of the tests in the TestSuite
loTestSuite.RunTests()

UNBINDEVENTS(loTestSuite)

IF thisform.ilCloseDebuggerAtEndOfTestsRun
	CLOSE DEBUGGER 
ENDIF 


IF NOT USED(THIS.grdTests.RecordSource)
  *  see THIS.ReceiveResultsNotification()
  RETURN
ENDIF

* JDE 03/14/2005 Added to replace code originally below
* This.AfterRunTests() to resolve defect of last test
* not being reselected and being the grid's (windows)
* selected color rather than green as reported
* in an internal defect report at Visionpace
LOCATE FOR UPPER(TClass) == m.lcTClass AND UPPER(TName) == m.lcTName 

THIS.AfterRunTests()

*  when running one test, always return to
*  that test
* commented out as per comment above locate statement
*SELECT (THIS.icGridRS)
*=SEEK(m.lcTClass+m.lcTName,THIS.icGridRS,"TCLName")

ENDPROC
PROCEDURE savesettings
*
*  save settings so they can be restored the next
*  time this form is run (see THIS.Init() call to
*  THIS.RestoreSettings() method)
*
*  this method is called from THIS.Destroy()
*

LOCAL loPersistVariables

IF NOT USED(THIS.grdTests.RecordSource)
  *  see THIS.ReceiveResultsNotification()
  RETURN 
ENDIF

TRY

IF FILE(THIS.icPersistFile)
  XMLTOCURSOR(THIS.icPersistFile,"FoxUnitPersist",512)
 ELSE
  CREATE CURSOR FoxUnitPersist (UserID C(10), Setting M)
ENDIF
SELECT FoxUnitPersist
*
*  delete all the existing settings for this user
*
DELETE ALL FOR UPPER(ALLTRIM(UserID)) == UPPER(ALLTRIM(THIS.icUserID))
SCATTER NAME loPersistVariables MEMO
loPersistVariables.UserID = THIS.icUserID

loPersistVariables.Setting = "THIS.Top = " + TRANSFORM(THIS.Top)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.Left = " + TRANSFORM(THIS.Left) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.Height = IIF(VERSION(5)>=900," + TRANSFORM(THIS.Height) + "," + TRANSFORM(THIS.inDesignHeight) + ")"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.Width = IIF(VERSION(5)>=900," + TRANSFORM(THIS.Width) + "," + TRANSFORM(THIS.inDesignWidth) + ")"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.inZoomTop = " + TRANSFORM(THIS.inZoomTop) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.inZoomLeft = " + TRANSFORM(THIS.inZoomLeft) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.inZoomHeight = " + TRANSFORM(THIS.inZoomHeight) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.inZoomWidth = " + TRANSFORM(THIS.inZoomWidth) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.inZoomWindowState = " + TRANSFORM(THIS.inZoomWindowState) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.pgfDetails.ActivePage = " + TRANSFORM(THIS.pgfDetails.ActivePage)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

*
*  font settings
*
loPersistVariables.Setting = [THIS.grdTests.FontName = "] + TRANSFORM(THIS.grdTests.FontName) + ["]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.grdTests.FontSize = " + TRANSFORM(THIS.grdTests.FontSize)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.grdTests.FontBold = " + TRANSFORM(THIS.grdTests.FontBold)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
loPersistVariables.Setting = "THIS.grdTests.FontItalic = " + TRANSFORM(THIS.grdTests.FontItalic)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
LOCAL loPage, loControl
FOR EACH loPage IN THIS.pgfDetails.Pages
  loPersistVariables.Setting = [THIS.pgfDetails.] + loPage.Name + [.FontName = "] + TRANSFORM(loPage.FontName) + ["]
  INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
  loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontSize = " + TRANSFORM(loPage.FontSize)
  INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
  loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontBold = " + TRANSFORM(loPage.FontBold)
  INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
  loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + ".FontItalic = " + TRANSFORM(loPage.FontItalic)
  INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
  FOR EACH loControl IN loPage.Controls
    loPersistVariables.Setting = [THIS.pgfDetails.] + loPage.Name + "." + loControl.Name + [.FontName = "] + TRANSFORM(loControl.FontName) + ["]
    INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
    loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontSize = " + TRANSFORM(loControl.FontSize)
    INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
    loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontBold = " + TRANSFORM(loControl.FontBold)
    INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
    loPersistVariables.Setting = "THIS.pgfDetails." + loPage.Name + "." + loControl.Name + ".FontItalic = " + TRANSFORM(loControl.FontItalic)
    INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
  ENDFOR    
ENDFOR
loPage = .NULL.
loControl = .NULL.

*
*  grid.Height
*
loPersistVariables.Setting = "THIS.ilLargeGrid=" + TRANSFORM(THIS.ilLargeGrid) 
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

*
*  each grid.Column.Width
*
LOCAL loColumn
FOR EACH loColumn IN THIS.grdTests.Columns
  loPersistVariables.Setting = ;
       "THIS.grdTests." + loColumn.Name + ".Width = " + ;
       TRANSFORM(loColumn.Width)  
  INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 
ENDFOR

*
*  indeg tag for the grid cursor
*
loPersistVariables.Setting = "SET ORDER TO TAG " + ORDER(THIS.icGridRS) + " IN (THIS.icGridRS)"
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

*
*  record pointer in the grid
*
loPersistVariables.Setting = [=SEEK("] + ;
             UPPER(EVALUATE(THIS.icGridRS+".TClass")) + ;
             UPPER(EVALUATE(THIS.icGridRS+".TName")) + ;
            [",THIS.icGridRS,"TCLName")]
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 


*********************************************************
*
*  Options... settings
*
*********************************************************
loPersistVariables.Setting = "THIS.ilAllowDebug = " + TRANSFORM(THIS.ilAllowDebug)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.ShowTips = " + TRANSFORM(THIS.ShowTips)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.ilHonorTestPrefix = " + TRANSFORM(this.ilHonorTestPrefix)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.ilReloadTestsOnRun = " + TRANSFORM(THIS.ilReloadTestsOnRun)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables 

loPersistVariables.Setting = "THIS.ilCloseDebuggerAtEndOfTestsRun = " + TRANSFORM(THIS.ilCloseDebuggerAtEndOfTestsRun)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

loPersistVariables.Setting = "THIS.nSplitterPosition = " + TRANSFORM(THIS.sfsplitterv1.Top)
INSERT INTO FoxUnitPersist FROM NAME loPersistVariables

CURSORTOXML("FoxUnitPersist",THIS.icPersistFile,1,512,0,"1")

CATCH TO loException
ENDTRY

USE IN SELECT("FoxUnitPersist")

IF VARTYPE(m.loException) = "O"
  MESSAGEBOX("Unable to save user settings because " + ;
             CHR(13) + ;
             loException.Message, ;
             48, ;
             "Please Note")
ENDIF

RETURN

ENDPROC
PROCEDURE seeiftestclassprgexists
LPARAMETERS tcTClass

IF NOT FILE(FORCEEXT(ALLTRIM(m.tcTClass),"PRG"))
  MESSAGEBOX("Unable to locate " + FORCEEXT(ALLTRIM(m.tcTClass),"PRG") + ", " + ;
             "likely because it has been moved, erased, or renamed." + ;
             CHR(13) + CHR(13) + ;
             "You should likely remove it from the list, " + ;
             "by selecting any of its tests and then clicking " + ;
             "the <Remove Selected> button.", ;
             16, ;
             "Please Note")
  RETURN .f.
ENDIF             

RETURN .t.

ENDPROC
PROCEDURE setallowdebug
LPARAMETERS tnAllowDebug

IF tnAllowDebug = 1
	thisform.ilAllowDebug = .t.
ELSE
	thisform.ilAllowDebug = .f.
ENDIF

ENDPROC
PROCEDURE setprogress
LPARAMETERS tnMaxValue

UPDATE (THIS.icGridRS) SET trun = .f.

thisform.pbProgress.SetRange(0,tnMaxValue)
thisform.pbProgress.SetValue(0)


thisform.pbProgress.shpbar.BackColor = thisform.inColorPass
thisform.pbProgress.Refresh
ENDPROC
PROCEDURE settestsruntestsfailedlabel
LPARAMETERS tnTestsRun, tnTestsFailed, tcTimeElapsed

LOCAL lcTestsRun, lcTestsFailed, lcMessage, lcTestsPassed



lcTestsRun = ALLTRIM(TRANSFORM(tnTestsRun, '999,999'))
lcTestsFailed = ALLTRIM(TRANSFORM(tnTestsFailed, '999,999'))
lcTestsPassed = ALLTRIM(TRANSFORM(tnTestsRun - tnTestsFailed, '999,999'))

lcMessage = ;
        lcTestsRun + ;
        IIF(tnTestsRun <> 1, ' tests were run.  ', ' test was run.  ') + ;
        lcTestsPassed + ;
        IIF((tnTestsRun - tnTestsFailed) <> 1, ' tests passed.  ', ' test passed.  ') + ;
        lcTestsFailed + ;
        IIF(tnTestsFailed <> 1, ' tests failed.  ', ' test failed.  ')

IF NOT EMPTY(tcTimeElapsed)
        lcMessage = lcMessage + 'Elapsed Time: ' + tcTimeElapsed
ENDIF

THISFORM.lblTestsRunTestsFailed.CAPTION = lcMessage

RETURN


ENDPROC
PROCEDURE shellshortcutmenueditbox
*
*  this is a shell method called from THIS.ShortcutMenuEditbox()
*  ... adjust the editbox-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shellshortcutmenuform
*
*  this is a shell method called from THIS.ShortcutMenuForm()
*  ... adjust the form-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shellshortcutmenugrid
*
*  this is a shell method called from THIS.ShortcutMenuGrid()
*  ... adjust the grid-level shortcut menu as you wish...
*
ENDPROC
PROCEDURE shortcutmenueditbox
*
*  called the 2 editboxes on the pageframe, this separate 
*  method allows subclassing this method and modifying 
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*  

LPARAMETERS toControl

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

IF UPPER(toControl.Name) = UPPER("edtFailuresAndErrors")
  *
  *  find the first line that contains a line
  *  containing 
  *  "line nnn of" 
  *
  LOCAL laLines[1], xx, lcLine, lnLine, lcLineNumber, lcOnSel, ;
        lcOF
  lcOF = " OF " + UPPER(ALLTRIM(EVALUATE(THIS.icGridRS+".TName")))
  lnLine = 0
  ALINES(laLines,toControl.Value)
  FOR xx = 1 TO ALEN(laLines,1)
    lcLine = UPPER(laLines[m.xx])
    IF " LINE " $ m.lcLine ;
         AND m.lcOF $ m.lcLine ;
         AND AT_C(m.lcOF,m.lcLine) > AT_C(" LINE ",m.lcLine)
      lnLine = m.xx
      EXIT
    ENDIF
  ENDFOR
  IF m.lnLine > 0
    lcLine = ALLTRIM(SUBSTRC(m.lcLine,AT_C(" LINE ",m.lcLine)))
    IF RIGHTC(m.lcLine,1) = "."
      lcLine = LEFTC(m.lcLine,LENC(m.lcLine)-1)
    ENDIF
    lcLineNumber = GETWORDNUM(m.lcLine,2,SPACE(1))
    DEFINE BAR 1 OF pShortcut PROMPT "Edit " + m.lcLine 
    lcOnSel = "ON SELECTION BAR 1 OF pShortCut _Screen.ActiveForm.ModifyClassAtLineNumber(" + m.lcLineNumber + ")"
    &lcOnSel
    DEFINE BAR 2 OF pShortcut PROMPT "\-"
  ENDIF  
ENDIF

THIS.inBar = 10

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()
THIS.AddShortcutOption_Separator

THIS.AddShortcutOption_DetailsPrint()
THIS.AddShortcutOption_DetailsZoom()

THIS.ShellShortcutMenuEditbox()


ENDPROC
PROCEDURE shortcutmenuform
*
*  called from THIS.RightClick(), this separate method
*  allows subclassing this method and modifying 
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*  

THIS.inBar = 10

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

*!*	THIS.AddShortcutOption_RunTestsAll()
*!*	THIS.AddShortcutOption_RunTestsClass()
*!*	THIS.AddShortcutOption_RunTestSelected()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_ClassNew()
*!*	THIS.AddShortcutOption_ClassLoad()
*!*	THIS.AddShortcutOption_ClassAddtest()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_SelectedRemove()
*!*	THIS.AddShortcutOption_SelectedReload()
*!*	THIS.AddShortcutOption_SelectedModify()
*!*	THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormOptions()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormAcknowledgements()
THIS.AddShortcutOption_FormLicense()

THIS.ShellShortcutMenuForm()

THIS.AddShortcutOption_Separator()
THIS.AddShortcutOption_FormClose()


ENDPROC
PROCEDURE shortcutmenugrid
*
*  called from THIS.grdTests.RightClick(), this separate method
*  allows subclassing this method and modifying 
*  the shortcut menu before THIS.RightClick() issues
*  the ACTIVATE POPUP
*
*  or, you can adjust items by augmenting/overriding
*  the individual methods where shortcut options
*  are added
*
*  and, you can adjust the menu in THIS.ShellShortcutMenuForm(),
*  called here before the final option is added to the
*  shortcut menu
*  

THIS.inBar = 10

DEFINE POPUP pShortCut IN WINDOW (THIS.Name) SHORTCUT RELATIVE FROM MROW(THIS.Name),MCOL(THIS.Name)

*!*	THIS.AddShortcutOption_RunTestsAll()
*!*	THIS.AddShortcutOption_RunTestsClass()
*!*	THIS.AddShortcutOption_RunTestSelected()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_ClassNew()
*!*	THIS.AddShortcutOption_ClassLoad()
*!*	THIS.AddShortcutOption_ClassAddtest()
*!*	THIS.AddShortcutOption_Separator()

*!*	THIS.AddShortcutOption_SelectedRemove()
*!*	THIS.AddShortcutOption_SelectedReload()
*!*	THIS.AddShortcutOption_SelectedModify()
*!*	THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_FormFont()
THIS.AddShortcutOption_FormResetfont()
THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_GridResetColumnWidths()
THIS.addShortcutOption_GridSize()
THIS.AddShortcutOption_Separator()

THIS.AddShortcutOption_GridSortByLocation()
THIS.AddShortcutOption_GridSortByName()

THIS.ShellShortcutMenuGrid()


ENDPROC
PROCEDURE showprogress
LPARAMETERS tnTestsRun, tlSuccess

IF EMPTY(m.tlSuccess)
	tlFailed = .t.
ELSE
	IF NOT VARTYPE(m.tlSuccess) = "L" 
		tlSuccess = .t.
	ENDIF
ENDIF

IF NOT m.tlSuccess
	THIS.pbProgress.shpBar.BackColor = THIS.inColorFail
ENDIF

THIS.pbProgress.SetValue(m.tnTestsRun)
ENDPROC
PROCEDURE underconstruction
MESSAGEBOX("This feature is under construction", ;
           48,"Please Note")
           
ENDPROC
PROCEDURE Unload
*
*  see THIS.Deactivate()
*
RELEASE PAD pFoxUnit OF _MSYSMENU

*
*  this form is instantiated to this public
*  variable in FXU.PRG, so RELEASE it now
*  that this form is about dead
*
RELEASE goFoxUnitTestBroker && FXU/JDE 07/01/2004 Added release for goFoxUnitTestBroker
RELEASE goFoxUnitForm
ENDPROC
PROCEDURE updatecurrentgridrowcolor
LOCAL lnBackColor
lnBackColor = ;
     THIS.CalculateRowColor(EVALUATE(THIS.grdTests.RecordSource+".Success"), ;
                            EVALUATE(THIS.grdTests.RecordSource+".TRun"))
IF m.lnBackColor = THIS.inColorNotRun
  THIS.grdTests.HighlightBackColor = THIS.grdTests.SelectedItemBackColor
 ELSE
  THIS.grdTests.HighlightBackColor = m.lnBackColor
ENDIF


ENDPROC
PROCEDURE zreadme
#IF .f.

Class:  FXU.VCX/frmFoxUnit

If you want to change this FoxUnit interface, your
best bet is to:
1- Subclass this form class
2- Open the \FoxUnit\FXUClassFactory.DBF and update
the ClassName and ClassLib fields:
REPLACE ClassName, ClassLib WITH ;
     "YourSubclassName", "YourSubclassClassLibrary.VCX" ;
     WHERE UPPER(ALLTRIM(ClassID)) == UPPER("FoxUnitForm")
...whereupon your subclass of this form is instantiated
rather than this form when this line of code in FXU.PRG
executes: 
	goFoxUnitForm = FXUNewObject("FoxUnitForm")



********************************************
*  VDSI notes and action items
********************************************

Action items for Drew:
========================================
THIS.Options()
FXUOptions.XML 
Include the UserID, like FXUPersist.XML
Add the dialog to FXUClassFactory.DBF
	Persist font setting?
	Persist editbox Zoom size?
	ShowTips
	CLOSE DEBUGGER subsequent to running tests

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
I like the class/name filters, but would use them even more 
if they were combo-box based rather than text box with the 
last 5 filters handy in the drop-down for re-application. 
You could add a default "no filter" option to each and remove 
the "Clear filter" button.

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
The grid and messages could share reasonable (configurable?) 
proportions of the vertical realestate. 
To make more fluid, consider using a browser control for the 
Failures and Errors/Messages. Then a horizontal divider could 
be used to control the relative sizes of the grid and message 
display area. Also, with a browser agent in place, we open 
the door to customized scripts (xslt or other) to determine 
the layout of the errors and messages. 

ER submitted by Lauren Clarke on the FoxUnit message board:
-----------------------------------------------------------
Allow option to halt on first failure in UI

ER submitted by Sietse Wijnker on the FoxUnit Message board (09/10/2004)
-----------------------------------------------------------
Make captions of Errors/Failures and Messages pageframes
bold when selecting a test that has non-empty memo fields
Suggest adding the following lines to the 
frmFxuFoxunit::Afterruntests() method
*	This.pgfDetails.pgFailuresAndErrors.FontBold = ;
*		NOT EMPTY(THIS.pgfDetails.pgFailuresAndErrors.edtFailuresAndErrors.text) 
*	This.pgfDetails.pgMessages.FontBold = ;
*		NOT EMPTY(THIS.pgfDetails.pgMessages.edtMessages.text) 
beneath the refresh() calls of the edit-boxes 

ER submitted by Andrew Ross McNeil on the FoxUnit Message board (08/21/2004):
-----------------------------------------------------------
Allow creation of test classes from existing classes:
CREATE a form that allows a user to select an existing class.
This will populate a grid with all of public methods
from the class with checkboxes. Each method checked would
be used to create a stub test class for the class
selected.

#ENDIF

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1><![CDATA[Class]]></reserved1>
		<reserved2><![CDATA[35]]></reserved2>
		<reserved3><![CDATA[icclassfilter
icgridrs THIS.grdTests.RecordSource
icnamefilter
ilallowdebug
ilclosedebuggeratendoftestsrun
ilhonortestprefix
ilinitialentry
ilreloadtestsonrun
iltestsfailed
inbar
incolorfail Red Color for background color of rows in test grid for tests that failed and the test run progress bar when tests have failed.
incolornotrun Background color definition for grid rows of tests that weren't run yet, or not run during the last test pass
incolorpass Green color property used for setting green "pass" color to grid rows and test running status bar
inmostrecentselectedrow
inzoomheight
inzoomleft
inzoomtop
inzoomwidth
inzoomwindowstate
ioresultdata Results Data Object, controls the test results table and allows update loggin to the table
iotestbroker Object That decouples the test data session from the foxUnit datasession, enabling tests to run without conflicting with the datasession storing the results.
iotestresult Class level test result object. Passed to testbroker when running tests. Instantiated when the form is instantiated.
nsplitterposition
_memberdata XML Metadata for customizable properties
lfailedonly Filter to show failed tests only
*acknowledgements 
*addshortcutoption_classaddtest 
*addshortcutoption_classload 
*addshortcutoption_classnew 
*addshortcutoption_detailsprint 
*addshortcutoption_detailszoom 
*addshortcutoption_formacknowledgements 
*addshortcutoption_formclose 
*addshortcutoption_formfont 
*addshortcutoption_formlicense 
*addshortcutoption_formoptions 
*addshortcutoption_formresetfont 
*addshortcutoption_gridresetcolumnwidths 
*addshortcutoption_gridsize 
*addshortcutoption_gridsortbylocation 
*addshortcutoption_gridsortbyname 
*addshortcutoption_runtestsall 
*addshortcutoption_runtestsclass 
*addshortcutoption_runtestselected 
*addshortcutoption_selectedmodify 
*addshortcutoption_selectedreload 
*addshortcutoption_selectedremove 
*addshortcutoption_separator 
*afterruntests 
*applyfilter 
*calculaterowcolor Calculates the correct RGB value row color for a test row (grey = not tested, red = falied, green = succeeded)
*detailsprint 
*detailszoom 
*formatsecondselapsed 
*formfont 
*formresetfont 
*getfiltertooltiptext 
*gridresetcolumnwidths 
*gridsize 
*gridsortbylocation 
*gridsortbyname 
*license 
*modifyclassatlinenumber 
*movetofirsttestofnextclass 
*options 
*receivecompletenotification 
*receiveresultnotification Recieves results of the current test
*restoresettings 
*runalltests runs all tests in all test classes that are currently loaded into the thisform.icGridRs table
*runclasstests Runs all tests for the class specified
*runonetest Runs the one test who's row is currently selected in the grid
*savesettings 
*seeiftestclassprgexists 
*setallowdebug 
*setprogress sets progress bar back to no tests run status
*settestsruntestsfailedlabel 
*shellshortcutmenueditbox 
*shellshortcutmenuform 
*shellshortcutmenugrid 
*shortcutmenueditbox 
*shortcutmenuform 
*shortcutmenugrid 
*showprogress Sets the value of the test progress bar as well as the color for pass or fail
*underconstruction 
*updatecurrentgridrowcolor 
*zreadme 
]]></reserved3>
		<reserved4/>
		<reserved5/>
		<reserved6><![CDATA[Pixels]]></reserved6>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>75</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid>_44L0ILG50</uniqueid>
		<class><![CDATA[checkbox]]></class>
		<classloc/>
		<baseclass><![CDATA[checkbox]]></baseclass>
		<objname><![CDATA[Check1]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 52
Left = 564
Height = 17
Width = 79
Anchor = 8
AutoSize = .T.
Alignment = 0
Caption = "Failed Only"
ControlSource = "ThisForm.lFailedOnly"
Name = "Check1"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.ApplyFilter()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>107</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[sfsplitterv]]></class>
		<classloc><![CDATA[sfsplitter.vcx]]></classloc>
		<baseclass><![CDATA[control]]></baseclass>
		<objname><![CDATA[Sfsplitterv1]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Anchor = 0
Top = 257
Left = 8
Width = 710
Height = 7
cobject1name = grdTests
cobject2name = pgfDetails
Name = "Sfsplitterv1"
gripper.GripperDot1.ShapeDark.Name = "ShapeDark"
gripper.GripperDot1.ShapeMiddle.Name = "ShapeMiddle"
gripper.GripperDot1.ShapeLight.Name = "ShapeLight"
gripper.GripperDot1.Name = "GripperDot1"
gripper.GripperDot2.ShapeDark.Name = "ShapeDark"
gripper.GripperDot2.ShapeMiddle.Name = "ShapeMiddle"
gripper.GripperDot2.ShapeLight.Name = "ShapeLight"
gripper.GripperDot2.Name = "GripperDot2"
gripper.GripperDot3.ShapeDark.Name = "ShapeDark"
gripper.GripperDot3.ShapeMiddle.Name = "ShapeMiddle"
gripper.GripperDot3.ShapeLight.Name = "ShapeLight"
gripper.GripperDot3.Name = "GripperDot3"
gripper.GripperDot4.ShapeDark.Name = "ShapeDark"
gripper.GripperDot4.ShapeMiddle.Name = "ShapeMiddle"
gripper.GripperDot4.ShapeLight.Name = "ShapeLight"
gripper.GripperDot4.Name = "GripperDot4"
gripper.GripperDot5.ShapeDark.Name = "ShapeDark"
gripper.GripperDot5.ShapeMiddle.Name = "ShapeMiddle"
gripper.GripperDot5.ShapeLight.Name = "ShapeLight"
gripper.GripperDot5.Name = "GripperDot5"
gripper.Name = "gripper"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
DoDefault()

** Matt Slay 2013-12-16
IF VERSION(5) >= 900
  THIS.Anchor = 10 
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>76</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid>_44L0JXZUR</uniqueid>
		<class><![CDATA[shape]]></class>
		<classloc/>
		<baseclass><![CDATA[shape]]></baseclass>
		<objname><![CDATA[Shape3]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 9
Left = 721
Height = 28
Width = 2
Anchor = 8
SpecialEffect = 0
Name = "Shape3"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

THIS.Top = 1
THIS.Height = 44
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>108</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdAddNewTest]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 328
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclassaddtestto.bmp")
Caption = "Add \<Test"
TabIndex = 6
TabStop = .F.
ToolTipText = "Add a new test (method) to the test class (.PRG) currently selected in the grid."
SpecialEffect = 2
Name = "cmdAddNewTest"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.ioResultData.AddNewTest( ;
     ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
     THISFORM, ;
     ALLTRIM(EVALUATE(THISFORM.icGridRS+".TPath")) ;
     ) && Added Path parameter to call. HAS

*
*  no THISFORM.Refresh() here, because AddNewTest()
*  calls the EDITSOURCE() function, which doesn't
*  pause program execution the way MODIFY COMMAND
*  does
*
*  rather, FXUResultData::AddNewTest() sets a custom
*  THISFORM.ilReloadCurrentClassOnActivate flag property
*  that is checked in THISFORM.Activate
*




ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>95</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdClearFilter]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[AutoSize = .T.
Top = 48
Left = 750
Height = 27
Width = 48
Caption = "Clear"
TabIndex = 22
Name = "cmdClearFilter"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THIS.Parent.txtClassFilter.Value = SPACE(0)
THIS.Parent.txtNameFilter.Value = SPACE(0)
This.Parent.lFailedOnly = .f.

THISFORM.ApplyFilter()


ENDPROC
PROCEDURE Init
IF VERSION(5) >= 900
	THIS.Anchor = 8	&& FDBOZZO
ENDIF
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE Refresh
THIS.Enabled = NOT EMPTY(FILTER(THISFORM.icGridRS))


ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>105</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdCreateNewTestClass]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 176
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclasscreate.bmp")
Caption = "\<New Class"
TabIndex = 4
TabStop = .F.
ToolTipText = "Create a new test class (.PRG) that inherits from FxuTestCase"
SpecialEffect = 2
Name = "cmdCreateNewTestClass"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
LOCAL lcNewClassPRG
lcNewClassPRG = SPACE(0)

*
*  MODIFY COMMAND FXUResultData
*    XXDTES("FXURESULTDATA.PRG","FUNCTION CreateNewTestCaseClass(tcTestsPath,tcTestClassPRG)    ")
*

THISFORM.ioResultData.CreateNewTestCaseClass( ;
    ADDBS(JUSTPATH(FULLPATH(DBF(THISFORM.icGridRS)))), ;
    @m.lcNewClassPRG ;
    )

THISFORM.AfterRunTests()

THISFORM.Refresh()


ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>92</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdLoadNewTestClass]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 252
Height = 40
Width = 76
FontName = "Tahoma"
Picture = ("fxuclassload.bmp")
Caption = "\<Load Class"
TabIndex = 5
TabStop = .F.
ToolTipText = "Load a test class (.PRG) that inherits from FxuTestCase that is not already in the list"
SpecialEffect = 2
Name = "cmdLoadNewTestClass"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click

THISFORM.ioResultData.LoadTestCaseClass()

THISFORM.AfterRunTests()

THISFORM.Refresh()

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>86</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdModifySelected]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 616
Height = 40
Width = 104
FontName = "Tahoma"
Picture = ("fxuclassmodify.bmp")
Caption = "\<Modify Selected"
TabIndex = 9
TabStop = .F.
ToolTipText = "Modify the currently-selected test (method)"
SpecialEffect = 2
Name = "cmdModifySelected"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.ioResultData.ModifyExistingTest( ;
     ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
     ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")), ;
     THISFORM, ;
     ALLTRIM(EVALUATE(THISFORM.icGridRS+".TPath")) ;
     ) && Added Path parameter to call. HAS

*
*  no THISFORM.Refresh() here, because ModifyTest()
*  calls the EDITSOURCE() function, which doesn't
*  pause program execution the way MODIFY COMMAND
*  does
*
*  rather, FXUResultData::ModifyTest() sets a custom
*  THISFORM.ilReloadCurrentClassOnActivate flag property
*  that is checked in THISFORM.Activate
*




ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>98</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid>_44L0JXZUU</uniqueid>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdOptions]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 724
Height = 40
Width = 76
FontName = "Tahoma"
Anchor = 8
Picture = ..\graphics\foxunit.bmp
Caption = "Options"
TabIndex = 6
TabStop = .F.
ToolTipText = "Add a new test (method) to the test class (.PRG) currently selected in the grid."
SpecialEffect = 2
Name = "cmdOptions"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
_Screen.ActiveForm.Options()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>109</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdReloadSelectedTestClass]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 512
Height = 40
Width = 104
FontName = "Tahoma"
Picture = ("fxuclassreload.bmp")
Caption = "Rel\<oad Selected"
TabIndex = 8
TabStop = .F.
ToolTipText = "Re-load (refresh) the FoxUnit results table records for the Test Class (.PRG) containing the currently-selected Test"
SpecialEffect = 2
Name = "cmdReloadSelectedTestClass"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.ioResultData.ReloadTestCaseClass( ;
     EVALUATE(THISFORM.icGridRS+".TCLass"), ;
     EVALUATE(THISFORM.icGridRS+".TPath") ;
     )

THISFORM.AfterRunTests()

THISFORM.Refresh()

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>90</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdRemoveTestClass]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 408
Height = 40
Width = 104
Picture = ("fxuclassremove.bmp")
Caption = "\<Remove Selected"
TabIndex = 7
TabStop = .F.
ToolTipText = "See THIS.Init()"
SpecialEffect = 2
Name = "cmdRemoveTestClass"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
IF this.Caption = "\<Remove All"
	
	IF MESSAGEBOX("Remove all test classes?", 4+48+256, "Remove all test classes?") = 7
	*  get focus off this button
	  KEYBOARD "{123}TAB}" PLAIN CLEAR 
	  RETURN
	ENDIF 
	
	thisform.ioREsultData.RemoveAllTestCaseClasses()
	
else

	IF MESSAGEBOX("Remove the entire .PRG/Class containing the currently-selected " + ;
	              ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")) + " test?", ;
	              4+48+256,"Remove this .PRG?") = 7
	  *  get focus off this button
	  KEYBOARD "{123}TAB}" PLAIN CLEAR 
	  RETURN 
	ENDIF

	THISFORM.ioResultData.RemoveTestCaseClass(EVALUATE(THISFORM.icGridRS+".TClass"))
	
ENDIF 

*THISFORM.grdTests.Refresh()
THISFORM.AfterRunTests()

ENDPROC
PROCEDURE Init
THIS.ToolTipText = ;
     "Remove the  entire Test Class (.PRG) containing " + ;
     "the currently-selected Test" + ;
     CHR(13) + CHR(13) + ;
     "Note that the Test Class (.PRG) is NOT deleted " + ;
     "from disk; rather just its entries in the FoxUnit " + ;
     "results table in the list below are deleted."
     
ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

IF nShift = 1
	this.Caption = "\<Remove All"
ENDIF 
ENDPROC
PROCEDURE MouseLeave
LPARAMETERS nButton, nShift, nXCoord, nYCoord

this.Caption = "\<Remove Selected"
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>91</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdRunTestsAll]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 4
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunalltests.bmp")
Caption = "\<All"
TabIndex = 1
TabStop = .F.
ToolTipText = "Run ALL the tests in the list"
SpecialEffect = 2
Name = "cmdRunTestsAll"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.RunAllTests()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>87</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdRunTestsOne]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 116
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunsingletest.bmp")
Caption = "\<Selected"
TabIndex = 3
TabStop = .F.
ToolTipText = "Run only the currently-selected Test"
SpecialEffect = 2
Name = "cmdRunTestsOne"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.RunOneTest( ;
                    ALLTRIM(EVALUATE(THISFORM.icGridRS+".TClass")), ;
                    ALLTRIM(EVALUATE(THISFORM.icGridRS+".TName")), ;
                    ALLTRIM(EVALUATE(THISFORM.icGridRS+".TPath")) ;
                    ) && Added path to call. HAS
                    
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>93</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[commandbutton]]></class>
		<classloc/>
		<baseclass><![CDATA[commandbutton]]></baseclass>
		<objname><![CDATA[cmdRunTestsOneClass]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 3
Left = 60
Height = 40
Width = 56
FontName = "Tahoma"
Picture = ("fxurunclasstests.bmp")
Caption = "\<Class"
TabIndex = 2
TabStop = .F.
ToolTipText = "Run all the tests in the currently-selected Test Class (.PRG)"
SpecialEffect = 2
Name = "cmdRunTestsOneClass"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Click
THISFORM.RunClassTests(EVALUATE(THISFORM.icGridRS+".TClass"))
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>88</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[grid]]></class>
		<classloc/>
		<baseclass><![CDATA[grid]]></baseclass>
		<objname><![CDATA[grdTests]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[ColumnCount = 2
FontName = "Tahoma"
DeleteMark = .F.
Height = 183
Left = 8
Panel = 1
ReadOnly = .T.
ScrollBars = 2
TabIndex = 10
Top = 76
Width = 789
HighlightStyle = 2
Name = "grdTests"
Column1.FontBold = .F.
Column1.FontName = "Tahoma"
Column1.Width = 208
Column1.ReadOnly = .T.
Column1.BackColor = 255,255,255
Column1.Name = "Column1"
Column2.FontBold = .F.
Column2.FontName = "Tahoma"
Column2.Width = 550
Column2.ReadOnly = .T.
Column2.BackColor = 255,255,255
Column2.Name = "Column2"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE AfterRowColChange
LPARAMETERS nColIndex

THIS.Column2.Header1.Caption = ;
     "Test name (" + ALLTRIM(EVALUATE(THIS.RecordSource+".TClass")) + "::" + ALLTRIM(EVALUATE(this.RecordSource+".TName")) +")"

THISFORM.AfterRunTests(.t.)



ENDPROC
PROCEDURE BeforeRowColChange
LPARAMETERS nColIndex

THISFORM.inMostRecentSelectedRow = THIS.ActiveRow

ENDPROC
PROCEDURE DblClick
THISFORM.cmdModifySelected.Click()
ENDPROC
PROCEDURE Init
*
*  set THIS.HighlightBackColor to the SelectedItems
*  color set in Windows on this machine

*
THIS.HighlightBackColor = THIS.SelectedItemBackColor

*
*  gray BackColor
*
THIS.BackColor = THISFORM.inColorNotRun

*
*  basic setup
*

THIS.RecordSource = THISFORM.icGridRS

*!*	THIS.Column1.ControlSource = THIS.RecordSource + ".TClass"
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(FXUResults.Location=1,FXUResults.TClass,SPACE(4)+FXUResults.TClass)]
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(] + THIS.RecordSource + [.Location=1,] + THIS.RecordSource + [.TClass,SPACE(5)+] + THIS.RecordSource + [.TClass)]
*!*	THIS.Column1.ControlSource = ;
*!*	     [IIF(ORDER("FXUResults")="TCLOC" AND NOT FXUResults.Location=1,SPACE(4)+FXUResults.TClass,FXUResults.TClass)]
*
*  indent each test after the first one, within each
*  test class .PRG
*
THIS.Column1.ControlSource = ;
     [IIF(ORDER("] + THIS.RecordSource + [")="TCLOC" AND NOT ] + THIS.RecordSource + [.Location=1,SPACE(4)+] + THIS.RecordSource + [.TClass,] + THIS.RecordSource + [.TClass)]

THIS.Column2.ControlSource = THIS.RecordSource + ".TName"

*
*  format THIS.Column3 to H:MM:SS.nnn
*
*	LOCAL lcString
*	lcString = ;
*	     "TRANSFORM(INT("+THIS.RecordSource+".TElapsed/(60*60))) + ':' + " + ;
*	     "PADL(INT("+THIS.RecordSource+".TElapsed/60),2,'0') + ':' + " + ;
*	     "PADL(MOD(INT("+THIS.RecordSource+".TElapsed),60),2,'0') + '.' + " + ;
*	     "RIGHTC(STR("+THIS.RecordSource+".TElapsed,10,3),3)" 
*	THIS.Column3.ControlSource = "(" + m.lcString + ")"

*
*  other setup
*

THIS.AllowCellSelection = .f.
THIS.GridLines = 0

THIS.SetAll("DynamicBackColor","THISFORM.CalculateRowColor(Success,TRun)","Column")

THIS.SetAll("DynamicFontItalic",[NOT FILE(FORCEEXT(ALLTRIM(FXUResults.TClass),"PRG"))],"Column")

THIS.SetAll("Movable",.f.,"Column")

THIS.ToolTipText = ;
"Shortcut menu available" + ;
     CHR(13) + CHR(13) + ;
"{123}CTRL+PgUp} to navigate down to the next test class (.PRG)" + ;
     CHR(13) + CHR(13) + ;
"{123}CTRL+PgDn} to navigate up to the previous test class (.PRG)" + ;
     CHR(13) + CHR(13) + ;
"{123}CTRL+S} to toggle the grid size"

IF VERSION(5)>=900
  *
  *    1 = Top Absolute
  *    2 = Left Absolute
  *  128 = Right Relative
  *   64 = Bottom Relative
  *
 * THIS.Anchor = 1 + 2 + 128 + 64
  THIS.Anchor = 10 && Matt Slay 2013-12-16
ENDIF



ENDPROC
PROCEDURE Resize
IF NOT VERSION(5)>= 900
  RETURN
ENDIF

THIS.Column2.Width = ;
    THIS.Width - THIS.Column1.Width - SYSMETRIC(5) - 14
    

ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuGrid()
  ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE Valid
*
*  see THIS.When and THISFORM.KeyPress
*
THISFORM.KeyPreview = .f.
ENDPROC
PROCEDURE When
*
*  When THISFORM.KeyPreview is set to .F., the preferred
*  default behavior for performance reasons, 
*  set THISFORM.KeyPreview to .T. ONLY when this grid
*  is the active control (see also THIS.Valid).
*
*  This code is here to support a workaround for
*  an ugly intrinsic behavior when:
*    1- THIS.AllowCellSelection = .F.
*    2- The total widths of all the columns exactly
*       fill the available horizontal space inside
*       the grid, no pixels between the last/rightmost
*       column and the vertical scrollbar
*    3- THIS grid has focus
*    4- The user presses the {123}RightArrow} key
*  whereupon the grid contents scrolls to the left,
*  leaving an empty space on the right.
*  This behavior is similar to the workarounds in 
*  this class for an implicit and ugly leftward
*  scrolling in other situations, fixed by the
*  DoScroll(6) calls in this class.
*  
THISFORM.KeyPreview = .t.

*
*  ...and to support the {123}CTRL+PgUp} and {123}CTRL+PgDn}
*  hotkeys...
*


ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>77</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblClassFilter]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[AutoSize = .F.
Alignment = 1
BackStyle = 0
Caption = "Class"
Height = 17
Left = 253
Top = 54
Width = 35
TabIndex = 12
Name = "lblClassFilter"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>103</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblElapsedTime]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[FontName = "Tahoma"
BackStyle = 0
Caption = "Elapsed Time:"
Height = 18
Left = 360
Top = 435
Visible = .F.
Width = 84
TabIndex = 16
Name = "lblElapsedTime"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  *
  *    4 = Bottom Absolute
  *    2 = Left Absolute
  *
  THIS.Anchor = 4 + 2  
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>96</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblFilterInfo]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[AutoSize = .F.
FontSize = 8
WordWrap = .T.
BackStyle = 0
Caption = "Filter the list to include Classes, Names containing: "
Height = 16
Left = 8
Top = 55
Width = 245
TabIndex = 13
Name = "lblFilterInfo"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>106</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblNameFilter]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Alignment = 1
BackStyle = 0
Caption = "Name"
Height = 17
Left = 403
Top = 54
Width = 40
TabIndex = 14
Name = "lblNameFilter"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF VERSION(5) >= 900
	THIS.Anchor = 160	&& FDBOZZO
ENDIF
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>104</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblTestsRunTestsFailed]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[AutoSize = .T.
FontName = "Tahoma"
BackStyle = 0
Caption = "Test results"
Height = 16
Left = 24
Top = 435
Width = 66
TabIndex = 15
Name = "lblTestsRunTestsFailed"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  *
  *    4 = Bottom Absolute
  *    2 = Left Absolute
  *
  THIS.Anchor = 4 + 2  
ENDIF

THIS.Caption = SPACE(0)
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>94</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[label]]></class>
		<classloc/>
		<baseclass><![CDATA[label]]></baseclass>
		<objname><![CDATA[lblTimeElapsed]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[FontName = "Tahoma"
BackStyle = 0
Caption = ""
Height = 18
Left = 440
Top = 432
Width = 114
TabIndex = 17
Name = "lblTimeElapsed"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  *
  *    4 = Bottom Absolute
  *    2 = Left Absolute
  *
  THIS.Anchor = 4 + 2  
ENDIF

THIS.Caption = SPACE(0)
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>97</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[cprogressbar]]></class>
		<classloc><![CDATA[cprogres.vcx]]></classloc>
		<baseclass><![CDATA[container]]></baseclass>
		<objname><![CDATA[pbProgress]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 451
Left = 20
Width = 759
Height = 23
TabIndex = 18
Name = "pbProgress"
shpBar.BackColor = 0,255,0
shpBar.Name = "shpBar"
lblPercent.Name = "lblPercent"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
LPARAMETERS tnMin, tnMax, tlCenter

IF NOT DODEFAULT(tnMin, tnMax, tlCenter)
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  *
  *    4 = Bottom Absolute
  *    2 = Left Absolute
  *    8 = Right Absolute
  *
  THIS.Anchor = 4 + 2 + 8
ENDIF
ENDPROC
PROCEDURE lblPercent.Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  THIS.Anchor = THIS.Parent.Anchor
ENDIF
ENDPROC
PROCEDURE shpBar.Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  THIS.Anchor = THIS.Parent.Anchor
ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>89</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[pageframe]]></class>
		<classloc/>
		<baseclass><![CDATA[pageframe]]></baseclass>
		<objname><![CDATA[pgfDetails]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[ErasePage = .T.
PageCount = 2
Top = 260
Left = 8
Width = 792
Height = 170
TabIndex = 11
Name = "pgfDetails"
Page1.Caption = "\<Failures and Errors"
Page1.Name = "pgFailuresAndErrors"
Page2.Caption = "Messa\<ges"
Page2.Name = "pgMessages"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

IF VERSION(5)>=900
  *
  *   16 = Top Relative
  *    2 = Left Absolute
  *  128 = Right Relative
  *   64 = Bottom Relative
  *
  *THIS.Anchor = 16 + 2 + 128 + 64
  THIS.Anchor = 15 && Matt Slay 2013-12-16

ENDIF
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>82</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[shape]]></class>
		<classloc/>
		<baseclass><![CDATA[shape]]></baseclass>
		<objname><![CDATA[shpButtons]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 0
Left = 0
Height = 45
Width = 804
Anchor = 10
BackStyle = 0
SpecialEffect = 0
Name = "shpButtons"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

THIS.Top = 1
THIS.Left = 1
THIS.Width = THISFORM.Width-1
THIS.Height = 44

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>85</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[shape]]></class>
		<classloc/>
		<baseclass><![CDATA[shape]]></baseclass>
		<objname><![CDATA[shpSeparator1]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 8
Left = 173
Height = 28
Width = 2
SpecialEffect = 0
Name = "shpSeparator1"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

THIS.Top = 1
THIS.Height = 44
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>99</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[shape]]></class>
		<classloc/>
		<baseclass><![CDATA[shape]]></baseclass>
		<objname><![CDATA[shpSeparator2]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[Top = 8
Left = 405
Height = 28
Width = 2
SpecialEffect = 0
Name = "shpSeparator2"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

THIS.Top = 1
THIS.Height = 44
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>100</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[textbox]]></class>
		<classloc/>
		<baseclass><![CDATA[textbox]]></baseclass>
		<objname><![CDATA[txtClassFilter]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[ControlSource = "THISFORM.icClassFilter"
Height = 23
Left = 292
TabIndex = 20
Top = 50
Width = 108
Name = "txtClassFilter"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE GotFocus
THIS.AddProperty("icValueOnGotFocus",THIS.Value)

ENDPROC
PROCEDURE Init
IF VERSION(5) >= 900
	THIS.Anchor = 130	&& FDBOZZO
ENDIF
THIS.InputMask = REPLICATE("X",60)
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE LostFocus
IF UPPER(ALLTRIM(THIS.icValueOnGotFocus)) == UPPER(ALLTRIM(THIS.Value))
  *
  *  no change/update
  *
 ELSE 
  THISFORM.ApplyFilter()
ENDIF
  
ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>101</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[textbox]]></class>
		<classloc/>
		<baseclass><![CDATA[textbox]]></baseclass>
		<objname><![CDATA[txtNameFilter]]></objname>
		<parent><![CDATA[frmfoxunit]]></parent>
		<properties><![CDATA[ControlSource = "THISFORM.icNameFilter"
Height = 23
Left = 447
TabIndex = 21
Top = 50
Width = 108
Name = "txtNameFilter"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE GotFocus
THIS.AddProperty("icValueOnGotFocus",THIS.Value)

ENDPROC
PROCEDURE Init
IF VERSION(5) >= 900
	THIS.Anchor = 40	&& FDBOZZO
ENDIF
THIS.InputMask = REPLICATE("X",60)
THIS.ToolTipText = THISFORM.GetFilterToolTipText()
ENDPROC
PROCEDURE LostFocus
IF UPPER(ALLTRIM(THIS.icValueOnGotFocus)) == UPPER(ALLTRIM(THIS.Value))
  *
  *  no change/update
  *
 ELSE 
  THISFORM.ApplyFilter()
ENDIF

ENDPROC
PROCEDURE RightClick
THISFORM.RightClick()
ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>102</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[header]]></class>
		<classloc/>
		<baseclass><![CDATA[header]]></baseclass>
		<objname><![CDATA[Header1]]></objname>
		<parent><![CDATA[frmfoxunit.grdTests.Column1]]></parent>
		<properties><![CDATA[FontBold = .F.
FontName = "Tahoma"
Caption = " Test Class (.PRG)"
Name = "Header1"
]]></properties>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>78</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[textbox]]></class>
		<classloc/>
		<baseclass><![CDATA[textbox]]></baseclass>
		<objname><![CDATA[Text1]]></objname>
		<parent><![CDATA[frmfoxunit.grdTests.Column1]]></parent>
		<properties><![CDATA[FontBold = .F.
FontName = "Tahoma"
BorderStyle = 0
ControlSource = "tresult.tclass"
Margin = 0
ReadOnly = .T.
ForeColor = 0,0,0
BackColor = 255,255,255
Name = "Text1"
]]></properties>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>79</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[header]]></class>
		<classloc/>
		<baseclass><![CDATA[header]]></baseclass>
		<objname><![CDATA[Header1]]></objname>
		<parent><![CDATA[frmfoxunit.grdTests.Column2]]></parent>
		<properties><![CDATA[FontBold = .F.
FontName = "Tahoma"
Caption = " Test name (method of...)"
Name = "Header1"
]]></properties>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>80</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[textbox]]></class>
		<classloc/>
		<baseclass><![CDATA[textbox]]></baseclass>
		<objname><![CDATA[Text1]]></objname>
		<parent><![CDATA[frmfoxunit.grdTests.Column2]]></parent>
		<properties><![CDATA[FontBold = .F.
FontName = "Tahoma"
BorderStyle = 0
ControlSource = "tresult.tname"
Margin = 0
ReadOnly = .T.
ForeColor = 0,0,0
BackColor = 255,255,255
Name = "Text1"
]]></properties>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>81</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[editbox]]></class>
		<classloc/>
		<baseclass><![CDATA[editbox]]></baseclass>
		<objname><![CDATA[edtFailuresAndErrors]]></objname>
		<parent><![CDATA[frmfoxunit.pgfDetails.pgFailuresAndErrors]]></parent>
		<properties><![CDATA[FontName = "Courier New"
Height = 128
Left = 4
ReadOnly = .T.
TabIndex = 2
Top = 3
Width = 779
ControlSource = ""
IntegralHeight = .T.
Name = "edtFailuresAndErrors"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .F.
ENDIF

THIS.ControlSource = THISFORM.icGridRS + ".Fail_Error"

IF VERSION(5)>=900
  *
  *   16 = Top Relative
  *    2 = Left Absolute
  *  128 = Right Relative
  *   64 = Bottom Relative
  *
  *THIS.Anchor = 16 + 2 + 128 + 64
  THIS.Anchor = 15 && Matt Slay 2013-12-16
ENDIF

ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuEditBox(THIS)
  ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE UIEnable
LPARAMETERS lEnable

IF m.lEnable
  THIS.Refresh()
ENDIF

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>83</nrecno>
	</class>
	<class>
		<platform>WINDOWS</platform>
		<uniqueid/>
		<class><![CDATA[editbox]]></class>
		<classloc/>
		<baseclass><![CDATA[editbox]]></baseclass>
		<objname><![CDATA[edtMessages]]></objname>
		<parent><![CDATA[frmfoxunit.pgfDetails.pgMessages]]></parent>
		<properties><![CDATA[FontName = "Courier New"
Height = 128
Left = 4
ReadOnly = .T.
TabIndex = 3
Top = 3
Width = 779
ControlSource = ""
IntegralHeight = .T.
Name = "edtMessages"
]]></properties>
		<protected/>
		<methods><![CDATA[PROCEDURE Init
IF NOT DODEFAULT()
  RETURN .f.
ENDIF

THIS.ControlSource = THISFORM.icGridRS + ".Messages"

IF VERSION(5)>=900
  *
  *   16 = Top Relative
  *    2 = Left Absolute
  *  128 = Right Relative
  *   64 = Bottom Relative
  *
  *THIS.Anchor = 16 + 2 + 128 + 64
  THIS.Anchor = 15 && Matt Slay 2013-12-16

ENDIF
ENDPROC
PROCEDURE RightClick
IF THISFORM.ShortcutMenuEditbox(THIS)
  ACTIVATE POPUP pShortCut
ENDIF

ENDPROC
PROCEDURE UIEnable
LPARAMETERS lEnable

IF m.lEnable
  THIS.Refresh()
ENDIF

ENDPROC
]]></methods>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>84</nrecno>
	</class>
	<class>
		<platform>COMMENT</platform>
		<uniqueid>RESERVED</uniqueid>
		<class/>
		<classloc/>
		<baseclass/>
		<objname><![CDATA[frmfoxunit]]></objname>
		<parent/>
		<properties/>
		<protected/>
		<methods/>
		<ole/>
		<ole2/>
		<reserved1/>
		<reserved2/>
		<reserved3/>
		<reserved4/>
		<reserved5/>
		<reserved6/>
		<reserved7/>
		<reserved8/>
		<user/>
		<nrecno>110</nrecno>
	</class>
</VFPData>
