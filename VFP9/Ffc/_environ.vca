SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _R5912ABLG
[CLASS] _custom
[CLASSLOC] _base.vcx
[BASECLASS] custom
[OBJNAME] _set
[START PROPERTIES]
csetcommand = 
uoldvalue = .NULL.
uoldvalue1 = .NULL.
uoldvalue2 = .NULL.
Name = "_set"
[END PROPERTIES]
[START PROTECTED]
csetcommand
uoldvalue
uoldvalue1
uoldvalue2
lerror
lnorestore
checkvalue
[END PROTECTED]
[START METHODS]
PROCEDURE Destroy
IF NOT this.lNoRestore
	RETURN this.Restore()
ENDIF

ENDPROC
PROCEDURE Error
LPARAMETERS nError, cMethod, nLine

this.lError=.T.

ENDPROC
PROCEDURE Init
LPARAMETERS tcSetCommand,tuArgument1,tuArgument2,tlDisableRestore
LOCAL lnParameters

lnParameters=PCOUNT()
IF lnParameters=0 OR EMPTY(tcSetCommand) OR ISNULL(tcSetCommand) OR ;
		TYPE("tcSetCommand")#"C"
	RETURN
ENDIF
this.lError=.F.
this.cSetCommand=UPPER(ALLTRIM(tcSetCommand))
this.uOldValue=this.CheckValue(SET(this.cSetCommand))
IF this.lError
	RETURN .F.
ENDIF
this.uOldValue1=SET(this.cSetCommand,1)
this.uOldValue2=SET(this.cSetCommand,2)
IF lnParameters>=2 AND ;
		NOT this.Set(tuArgument1,tuArgument2,tlDisableRestore)
	RETURN .F.
ENDIF

ENDPROC
PROCEDURE checkvalue
LPARAMETERS tcValue

IF TYPE("tcValue")#"C"
	RETURN tcValue
ENDIF
IF LEFT(this.cSetCommand,4)=="DEFA"
	RETURN tcValue+SYS(2003)
ENDIF
RETURN tcValue

ENDPROC
PROCEDURE disablerestore
this.lNoRestore=.T.

ENDPROC
PROCEDURE get
LPARAMETERS tnArgument
LOCAL lcValue,llAdjust

llAdjust=.F.
DO CASE
	CASE TYPE("tnArgument")#"N"
		lcValue=this.CheckValue(SET(this.cSetCommand))
	CASE tnArgument=0
		lcValue=this.uOldValue
		llAdjust=.T.
	CASE tnArgument=1
		lcValue=SET(this.cSetCommand,1)
	CASE tnArgument=2
		lcValue=SET(this.cSetCommand,2)
	CASE tnArgument=-1
		lcValue=this.uOldValue1
	CASE tnArgument=-2
		lcValue=this.uOldValue2
	OTHERWISE
		RETURN .NULL.
ENDCASE
RETURN lcValue

ENDPROC
PROCEDURE getsetcommand
RETURN this.cSetCommand

ENDPROC
PROCEDURE restore
LOCAL llResult,lcOldValue,lcOldValue1,lcOldValue2

llResult=.T.
lcOldValue=this.Get(0)
lcOldValue1=this.Get(-1)
lcOldValue2=this.Get(-2)
IF (NOT lcOldValue1==SET(this.cSetCommand,1) AND ;
		NOT this.Set(lcOldValue,lcOldValue1)) OR ;
	(NOT lcOldValue2==SET(this.cSetCommand,2) AND ;
		NOT this.Set(lcOldValue,lcOldValue2))
	llResult=.F.
ENDIF
IF NOT lcOldValue==SET(this.cSetCommand) AND ;
		NOT this.Set(lcOldValue)
	llResult=.F.
ENDIF
RETURN llResult

ENDPROC
PROCEDURE set
LPARAMETERS tuArgument1,tuArgument2,tlDisableRestore
LOCAL lcSetCommand,lcType1,lcType2,lcClauses

this.lError=.F.
IF PARAMETERS()=0
	RETURN .F.
ENDIF
lcType1=TYPE("tuArgument1")
lcType2=TYPE("tuArgument2")
lcSetCommand=ALLTRIM(LEFT(this.cSetCommand,4))
IF NOT ISNULL(tuArgument2) AND NOT lcType2=="L" OR tuArgument2
	IF lcType2=="C"
		IF lcSetCommand=="PRIN" AND UPPER(tuArgument2)=="PRN"
			lcClauses=" TO"
		ELSE
			lcClauses=" TO ["+tuArgument2+"]"
		ENDIF
	ELSE
		lcClauses=" TO "+ALLTRIM(STR(tuArgument2,9))
	ENDIF
	SET &lcSetCommand &lcClauses
ENDIF
IF NOT ISNULL(tuArgument1) AND NOT lcType1=="L" OR tuArgument1
	IF lcType1=="C"
		lcClauses=tuArgument1
		IF lcSetCommand=="CLAS" OR lcSetCommand=="COLL" OR ;
				lcSetCommand=="COVE" OR lcSetCommand=="DATA" OR ;
				lcSetCommand=="DEFA" OR lcSetCommand=="DEBU" OR ;
				lcSetCommand=="DEVI" OR lcSetCommand=="DISP" OR ;
				lcSetCommand=="EVEN" OR lcSetCommand=="FILT" OR ;
				lcSetCommand=="FORM" OR lcSetCommand=="INDE" OR ;
				lcSetCommand=="KEY" OR 	lcSetCommand=="KEYC" OR ;
				lcSetCommand=="LIBR" OR lcSetCommand=="MACK" OR ;
				lcSetCommand=="MARK" OR lcSetCommand=="MESS" OR ;
				lcSetCommand=="NOCP" OR lcSetCommand=="ORDE" OR ;
				lcSetCommand=="PATH" OR lcSetCommand=="PDSE" OR ;
				lcSetCommand=="POIN" OR lcSetCommand=="PROC" OR ;
				lcSetCommand=="RELA" OR lcSetCommand=="SEPA" OR ;
				lcSetCommand=="SKIP" OR lcSetCommand=="TOPI" OR ;
				lcSetCommand=="TYPE" OR lcSetCommand=="UDFP" OR ;
				lcSetCommand=="XCMD"
			lcClauses=" TO "+lcClauses
		ENDIF
	ELSE
		lcClauses=" TO "+ALLTRIM(STR(tuArgument1,9))
	ENDIF
	SET &lcSetCommand &lcClauses
ENDIF
IF this.lError OR (tlDisableRestore AND NOT this.DisableRestore())
	RETURN .F.
ENDIF

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
csetcommand The SET command name.
uoldvalue The original setting of the SET command as SET(<command>).
uoldvalue1 The original setting of the SET command as SET(<command>,1).
uoldvalue2 The original setting of the SET command as SET(<command>,2).
lerror Indicates an error occured during the execution of the SET command.
lnorestore Specifies if the original SET values are restored when the object is released.
*getsetcommand Returns the SET command name.
*restore Restores the original SET settings.
*set Sets environment setting. uArgument1 [, uArgument2] [, lNoRestore]
*get No parameter returns the current SET() value.  1 returns the current SET(,1) value.  2 returns the current SET(,2) value.  0 returns the original SET() value.  -1 returns the original SET(,1) value.  -2 returns the original SET(,2) value.
*disablerestore Disables the automatic restore of settings when in object release mode.
*checkvalue Returns the proper SET(<command>) value baesd on the SET command name.
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Used to save, set, and restore SET commands.  Optional parameters:   uArgument1 [, uArgument2] [, lNoRestore].  This classes only handles SET commands that have a unique first four characters in their name and a few SET commands not fully supported.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _set

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RMI17T1WH
[CLASS] _custom
[CLASSLOC] _base.vcx
[BASECLASS] custom
[OBJNAME] _shellexecute
[START PROPERTIES]
Name = "_shellexecute"
[END PROPERTIES]
[START METHODS]
PROCEDURE shellexecute
* WinApi :: ShellExecute
**  Function: Opens a file in the application that it's
**            associated with.
**      Pass: lcFileName -  Name of the file to open
**
**  Return:   2  - Bad Association (e.g., invalid URL)
**            31 - No application association
**            29 - Failure to load application
**            30 - Application is busy
**
**            Values over 32 indicate success
**            and return an instance handle for
**            the application started (the browser)
**
** ShowWindow() Commands
**  #define SW_HIDE             0
**  #define SW_SHOWNORMAL       1
**  #define SW_NORMAL           1
**  #define SW_SHOWMINIMIZED    2
**  #define SW_SHOWMAXIMIZED    3
**  #define SW_MAXIMIZE         3
**  #define SW_SHOWNOACTIVATE   4
**  #define SW_SHOW             5
**  #define SW_MINIMIZE         6
**  #define SW_SHOWMINNOACTIVE  7
**  #define SW_SHOWNA           8
**  #define SW_RESTORE          9
**  #define SW_SHOWDEFAULT      10
**  #define SW_FORCEMINIMIZE    11
**  #define SW_MAX              11

LPARAMETERS tcFileName,tcWorkDir,tcOperation,tnShowWindow
LOCAL lcFileName,lcWorkDir,lcOperation,lnShowWindow

IF EMPTY(tcFileName)
	RETURN -1
ENDIF

lcFileName=ALLTRIM(tcFileName)
lcWorkDir=IIF(TYPE("tcWorkDir")="C",ALLTRIM(tcWorkDir),"")
lcOperation=IIF(TYPE("tcOperation")="C" AND NOT EMPTY(tcOperation),ALLTRIM(tcOperation),"Open")
lnShowWindow=IIF(TYPE("tnShowWindow")="N",tnShowWindow,1)

*-* HINSTANCE ShellExecute(hwnd, lpszOp, lpszFile, lpszParams, lpszDir, wShowCmd)
*-*
*-* HWND hwnd - handle of parent window
*-* LPCTSTR lpszOp - address of string for operation to perform
*-* LPCTSTR lpszFile - address of string for filename
*-* LPTSTR lpszParams - address of string for executable-file parameters
*-* LPCTSTR lpszDir - address of string for default directory
*-* INT wShowCmd - whether file is shown when opened
DECLARE INTEGER ShellExecute ;
	    IN SHELL32.DLL ;
	    INTEGER nWinHandle,;
	    STRING cOperation,;
	    STRING cFileName,;
	    STRING cParameters,;
	    STRING cDirectory,;
	    INTEGER nShowWindow
RETURN ShellExecute(0,lcOperation,lcFilename,"",lcWorkDir,lnShowWindow)

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*shellexecute Runs ShellExecute API routine, which is simlar to double-clicking file in explorer.  Parameters: (cFileName, cWorkDir, cOperation, cParams)
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Opens a file in the application that it's associated with.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _shellexecute

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _RS20YRC5X
[CLASS] _custom
[CLASSLOC] _base.vcx
[BASECLASS] custom
[OBJNAME] _runcode
[START PROPERTIES]
cversion = 1.02
Name = "_runcode"
[END PROPERTIES]
[START METHODS]
PROCEDURE Error
LPARAMETERS nError, cMethod, nLine

IF this.lIgnoreErrors OR _vfp.StartMode>0
	RETURN .F.
ENDIF
DODEFAULT(nError, cMethod, nLine)
return

ENDPROC
PROCEDURE runcode
* RunCode.PRG - Run code block interpreter.
* Version 2.00
*
* Copyright (c) 1998-1999 Microsoft Corp.
* 1 Microsoft Way
* Redmond, WA 98052
*
* Description:
* Runs a block of VFP code via macros without compilation.
*
* Parameter list:
* cCode:	Code to execute or file name that contains code to execute
* lFile:	Specifies source file mode.
*				.F./Empty = Code is specified by cCode.
*				.T. = Code is imported from specified file via cCode value.
* lIgnoreErrors:	Specifies error handling mode.
*				.F./Empty = Errors are trapped and displayed in a wait window.
*				.T. = All errors are ignored.


LPARAMETERS __tcCode,__tlFile,__tvIgnoreErrors
LOCAL __lcCode,__lcOnError,__llArrayCode,__lcLine,__lnLine,__lcLine2,__llVFP60
LOCAL __lcCommand,__lcExpr,__lcChar,__lnAtPos,__lnAtPos2,__lnOccurrence
LOCAL __lnLineTotal,__llTextMode,__lcLastOnError,__lvResult
LOCAL __lcDoExpr,__lnDoLine,__lnDoLineTotal,__lnDoStackCount
LOCAL __lcForExpr,__lnForMax,__lnForStep,__lnForLine,__lnForLineTotal,__lnForStackCount
LOCAL __lcIfExpr,__llIfExpr,__lnIfLine,__lnIfLineTotal,__lnIfStackCount
LOCAL __laLines[1],__laForLines[1],__laIfLines[1],__laDoLines[1]
EXTERNAL ARRAY __tcCode,__laLines,__laForLines,__laIfLines,__laDoLines

#DEFINE TAB		CHR(9)
#DEFINE LF		CHR(10)
#DEFINE CR		CHR(13)
#DEFINE CR_LF	CR+LF

IF VARTYPE(__tvIgnoreErrors)=="C"
	__lcOnError=ALLTRIM(__tvIgnoreErrors)
ELSE
	__lcOnError=IIF(__tvIgnoreErrors,"=.F.","__")
ENDIF
__llVFP60=" 06.0"$VERSION()
IF NOT __llVFP60
	__lcLastOnError=ON("ERROR")
	IF __tvIgnoreErrors
		ON ERROR =.F.
	ELSE
		ON ERROR
	ENDIF
	__lvResult=.T.
	IF __tlFile
		__lcCode=""
		__lcCode=ALLTRIM(FILETOSTR(__tcCode))
	ELSE
		__lcCode=IIF(VARTYPE(__tcCode)=="C",__tcCode,"")
	ENDIF
	IF LEFT(__lcCode,1)==";"
		__lcCode=STRTRAN(__lcCode,";",CR_LF)
	ENDIF
	__lvResult=EVALUATE("ExecScript(__lcCode)")
	IF EMPTY(__lcLastOnError)
		ON ERROR
	ELSE
		ON ERROR &__lcLastOnError
	ENDIF
	RETURN __lvResult
ENDIF
__llArrayCode=(TYPE("__tcCode[1]")=="C")
IF __llArrayCode
	__lnLineTotal=ACOPY(__tcCode,__laLines)
ELSE
	IF VARTYPE(__tcCode)#"C" OR EMPTY(__tcCode)
		RETURN
	ENDIF
	IF __tlFile
		__lcCode=""
		__lcCode=ALLTRIM(FILETOSTR(__tcCode))
		IF EMPTY(__lcCode)
			RETURN
		ENDIF
	ELSE
		__lcCode=ALLTRIM(__tcCode)
	ENDIF
	IF LEFT(__lcCode,1)==";"
		__lcCode=STRTRAN(__lcCode,";",CR_LF)
	ENDIF
	__lnLineTotal=ALINES(__laLines,__lcCode)
	IF __lnLineTotal=0
		RETURN
	ENDIF
	PRIVATE __lcLastLine
	__lcLastLine=""
	__lnLine=0
	DO WHILE __lnLine<__lnLineTotal
		__lnLine=__lnLine+1
		__lcLine=ALLTRIM(__laLines[__lnLine])
		__lnAtPos=AT("&"+"&",__lcLine)
		IF __lnAtPos>0
			__lcLine=ALLTRIM(LEFT(__lcLine,__lnAtPos-1))
		ENDIF
		DO WHILE .T.
			__lcChar=LEFT(__lcLine,1)
			IF __lcChar==" " OR __lcChar==TAB
				__lcLine=ALLTRIM(SUBSTR(__lcLine,2))
				LOOP
			ENDIF
			__lcChar=RIGHT(__lcLine,1)
			IF __lcChar==" " OR __lcChar==TAB
				__lcLine=TRIM(LEFT(__lcLine,LEN(__lcLine)-1))
				LOOP
			ENDIF
			EXIT
		ENDDO
		IF EMPTY(__lcLine) OR LEFT(__lcLine,1)=="*" OR LEFT(__lcLine,1)=="#" OR ;
				LEFT(__lcLine,2)==("&"+"&") OR UPPER(LEFT(__lcLine,4))=="NOTE" OR ;
				LEFT(__lcLine,4)=="<!--"
			ADEL(__laLines,__lnLine)
			__lnLineTotal=__lnLineTotal-1
			DIMENSION __laLines[__lnLineTotal]
			__lnLine=__lnLine-1
			LOOP
		ENDIF
		IF __lnLine>=2 AND RIGHT(__laLines[__lnLine-1],1)==";"
			__lcLine2=LEFT(__laLines[__lnLine-1],LEN(__laLines[__lnLine-1])-1)
			DO WHILE .T.
				__lcChar=RIGHT(__lcLine2,1)
				IF __lcChar==" " OR __lcChar==TAB
					__lcLine2=TRIM(LEFT(__lcLine2,LEN(__lcLine2)-1))
					LOOP
				ENDIF
				EXIT
			ENDDO
			__lnLine=__lnLine-1
			__lcLine=__lcLine2+" "+__lcLine
			ADEL(__laLines,__lnLine)
			__lnLineTotal=__lnLineTotal-1
			DIMENSION __laLines[__lnLineTotal]
			__laLines[__lnLine]=__lcLine
		ELSE
			__laLines[__lnLine]=__lcLine
		ENDIF
	ENDDO
ENDIF
IF __lnLineTotal=0
	RETURN
ENDIF
__lcLastOnError=ON("ERROR")
IF __tvIgnoreErrors
	ON ERROR =.F.
ELSE
	ON ERROR
ENDIF
__lvResult=.T.
__lcLine=""
STORE .F. TO __llIfExpr,__llTextMode
STORE "" TO __lcDoExpr,__lcForExpr,__lcIfExpr
STORE 0 TO __lnLine,__lnDoLine,__lnDoLineTotal,__lnDoStackCount, ;
		__lnForLine,__lnForLineTotal,__lnForStackCount,__lnForMax, ;
		__lnForStep,__lnIfLine,__lnIfLineTotal,__lnIfStackCount
DO WHILE __lnLine<__lnLineTotal
	__lnLine=__lnLine+1
	__lcLine=__laLines[__lnLine]
	IF EMPTY(__lcLine)
		LOOP
	ENDIF
	IF LEFT(__lcLine,1)=="="
		EVALUATE(SUBSTR(__lcLine,2))
		LOOP
	ENDIF
	__lcCommand=UPPER(LEFT(__lcLine,4))
	IF __lcCommand=="DO W" AND (UPPER(LEFT(__lcLine,8))=="DO WHIL " OR ;
			UPPER(LEFT(__lcLine,8))=="DO WHILE")
		__lcCommand="DO_W"
		__lnOccurrence=2
	ELSE
		__lnOccurrence=1
	ENDIF
	__lnAtPos=AT(" ",__lcCommand,__lnOccurrence)
	__lnAtPos2=AT(TAB,__lcCommand,__lnOccurrence)
	IF BETWEEN(__lnAtPos2,1,__lnAtPos)
		__lnAtPos=__lnAtPos2
	ENDIF
	IF __lnAtPos>0
		__lcCommand=LEFT(__lcCommand,__lnAtPos-1)
	ENDIF
	__lnAtPos=AT(" ",__lcLine,__lnOccurrence)
	__lnAtPos2=AT(TAB,__lcLine,__lnOccurrence)
	IF BETWEEN(__lnAtPos2,1,__lnAtPos)
		__lnAtPos=__lnAtPos2
	ENDIF
	IF __lnAtPos=0
		__lcExpr=""
	ELSE
		__lcExpr=ALLTRIM(SUBSTR(__lcLine,__lnAtPos+1))
	ENDIF
	__lcLastLine=__lcLine
	DO CASE
		CASE __lcCommand=="ENDT"
			__llTextMode=.F.
			LOOP
		CASE __llTextMode
			__lcLine="\"+__lcLine
			__lcLastLine=__lcLine
			&__lcLine
			LOOP
		CASE __lcCommand=="DO_W"
			IF __lnForStackCount<=0 AND __lnIfStackCount<=0
				__lnDoStackCount=__lnDoStackCount+1
				IF __lnDoStackCount<=1
					__lcDoExpr=__lcExpr
					__lnDoLine=__lnLine
					LOOP
				ENDIF
			ENDIF
		CASE __lcCommand=="FOR"
			IF __lnDoStackCount<=0 AND __lnIfStackCount<=0
				__lnForStackCount=__lnForStackCount+1
				IF __lnForStackCount<=1
					__lnAtPos=ATC(" TO ",__lcExpr)
					IF __lnAtPos=0
						__lcForExpr=""
						__lnForMax=0
						__lnForStep=0
						LOOP
					ENDIF
					__lcForExpr=__lcExpr
					__lcForExpr=ALLTRIM(LEFT(__lcExpr,__lnAtPos-1))
					__lcExpr=ALLTRIM(SUBSTR(__lcExpr,__lnAtPos+4))
					__lnAtPos=ATC("=",__lcForExpr)
					IF __lnAtPos=0
						LOOP
					ENDIF
					&__lcForExpr
					__lcForExpr=ALLTRIM(LEFT(__lcForExpr,__lnAtPos-1))
					__lnAtPos=ATC(" STEP ",__lcExpr)
					IF __lnAtPos=0
						__lnForMax=EVALUATE(__lcExpr)
						__lnForStep=1
					ELSE
						__lnForMax=EVALUATE(LEFT(__lcExpr,__lnAtPos-1))
						__lnForStep=EVALUATE(SUBSTR(__lcExpr,__lnAtPos+6))
					ENDIF
					__lnForLine=__lnLine
					LOOP
				ENDIF
			ENDIF
		CASE __lcCommand=="IF"
			IF __lnDoStackCount<=0 AND __lnForStackCount<=0
				__lnIfStackCount=__lnIfStackCount+1
				IF __lnIfStackCount<=1
					__lcIfExpr=__lcExpr
					__llIfExpr=EVALUATE(__lcIfExpr)
					__lnIfLine=__lnLine
					LOOP
				ENDIF
			ENDIF
		CASE __lcCommand=="ELSE"
			IF __lnIfStackCount=1 AND __lnDoStackCount<=0 AND __lnForStackCount<=0
				__llIfExpr=(NOT __llIfExpr)
				LOOP
			ENDIF
		CASE __lcCommand=="ENDD"
			IF __lnIfStackCount<=0 AND __lnForStackCount<=0
				__lnDoStackCount=__lnDoStackCount-1
				IF __lnDoStackCount<=0
					DO WHILE NOT EMPTY(__lcDoExpr) AND EVALUATE(__lcDoExpr)
						__lvResult=this.RunCode(@__laDoLines,.F.,__tvIgnoreErrors)
						IF ISNULL(__laDoLines[1])
							IF __llArrayCode
								__tcCode[1]=.NULL.
							ENDIF
							IF EMPTY(__lcLastOnError)
								ON ERROR
							ELSE
								ON ERROR &__lcLastOnError
							ENDIF
							RETURN __lvResult
						ENDIF
						IF NOT __lvResult
							EXIT
						ENDIF
					ENDDO
					__lcDoExpr=""
					__llDoExpr=.F.
					__lnDoLine=0
					DIMENSION __laDoLines[1]
					__laDoLines=.F.
					__lnDoLineTotal=0
					LOOP
				ENDIF
			ENDIF
		CASE __lcCommand=="ENDF"
			IF __lnIfStackCount<=0 AND __lnDoStackCount<=0
				__lnForStackCount=__lnForStackCount-1
				IF __lnForStackCount<=0
					IF __lnForStep>0
						DO WHILE EVALUATE(__lcForExpr)<=__lnForMax
							__lvResult=this.RunCode(@__laForLines,.F.,__tvIgnoreErrors)
							IF ISNULL(__laForLines[1])
								IF __llArrayCode
									__tcCode[1]=.NULL.
								ENDIF
								IF EMPTY(__lcLastOnError)
									ON ERROR
								ELSE
									ON ERROR &__lcLastOnError
								ENDIF
								RETURN __lvResult
							ENDIF
							IF NOT __lvResult
								EXIT
							ENDIF
							__lcExpr=__lcForExpr+"="+__lcForExpr+"+"+TRANSFORM(__lnForStep)
							&__lcExpr
						ENDDO
					ELSE
						DO WHILE EVALUATE(__lcForExpr)>=__lnForMax
							__lvResult=this.RunCode(@__laForLines,.F.,__tvIgnoreErrors)
							IF ISNULL(__laForLines[1])
								IF __llArrayCode
									__tcCode[1]=.NULL.
								ENDIF
								IF EMPTY(__lcLastOnError)
									ON ERROR
								ELSE
									ON ERROR &__lcLastOnError
								ENDIF
								RETURN __lvResult
							ENDIF
							IF NOT __lvResult
								EXIT
							ENDIF
							__lcExpr=__lcForExpr+"="+__lcForExpr+"+"+TRANSFORM(__lnForStep)
							&__lcExpr
						ENDDO
					ENDIF
					__lcForExpr=""
					__lnForCount=0
					__lnForMax=0
					__lnForStep=0
					__lnForLine=0
					DIMENSION __laForLines[1]
					__laForLines=.F.
					__lnForLineTotal=0
					LOOP
				ENDIF
			ENDIF
		CASE __lcCommand=="ENDI"
			IF __lnDoStackCount<=0 AND __lnForStackCount<=0
				__lnIfStackCount=__lnIfStackCount-1
				IF __lnIfStackCount<=0
					__lvResult=this.RunCode(@__laIfLines,.F.,__tvIgnoreErrors)
					IF ISNULL(__laIfLines[1])
						IF __llArrayCode
							__tcCode[1]=.NULL.
						ENDIF
						IF EMPTY(__lcLastOnError)
							ON ERROR
						ELSE
							ON ERROR &__lcLastOnError
						ENDIF
						RETURN __lvResult
					ENDIF
					__lcIfExpr=""
					__llIfExpr=.F.
					__lnIfLine=0
					DIMENSION __laIfLines[1]
					__laIfLines=.F.
					__lnIfLineTotal=0
					LOOP
				ENDIF
			ENDIF
	ENDCASE
	IF __lnDoStackCount>0
		__lnDoLineTotal=__lnDoLineTotal+1
		DIMENSION __laDoLines[__lnDoLineTotal]
		__laDoLines[__lnDoLineTotal]=__lcLine
		LOOP
	ENDIF
	IF __lnForStackCount>0 AND __lnDoStackCount<=0
		__lnForLineTotal=__lnForLineTotal+1
		DIMENSION __laForLines[__lnForLineTotal]
		__laForLines[__lnForLineTotal]=__lcLine
		LOOP
	ENDIF
	IF __lnIfStackCount>0
		IF NOT __llIfExpr
			LOOP
		ENDIF
		__lnIfLineTotal=__lnIfLineTotal+1
		DIMENSION __laIfLines[__lnIfLineTotal]
		__laIfLines[__lnIfLineTotal]=__lcLine
		LOOP
	ENDIF
	DO CASE
		CASE __lcCommand=="RETU"
			IF __llArrayCode
				__tcCode[1]=.NULL.
			ENDIF
			IF NOT EMPTY(__lcExpr)
				__lvResult=EVALUATE(__lcExpr)
			ENDIF
			EXIT
		CASE __lcCommand=="EXIT"
			IF __llArrayCode
				__lvResult=.F.
			ENDIF
			EXIT
		CASE __lcCommand=="TEXT"
			__llTextMode=.T.
			LOOP
		CASE __lcCommand=="ENDT"
			__llTextMode=.F.
			LOOP
	ENDCASE
	&__lcLine
ENDDO
IF EMPTY(__lcLastOnError)
	ON ERROR
ELSE
	ON ERROR &__lcLastOnError
ENDIF
RETURN __lvResult

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*runcode RunCode(cCode[, lFile] [,llgnoreErrors])
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]
[START RESERVED7]
Runs a block of VFP code via macros without compilation.[END RESERVED7]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] _runcode
[EOF]
