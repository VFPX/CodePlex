SccTextX Version 1.0.0.1
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Screen    
[START RESERVED1]
VERSION =   3.00[END RESERVED1]
[START RESERVED8]
foxref.h[END RESERVED8]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] dataenvironment
[BASECLASS] dataenvironment
[OBJNAME] Dataenvironment
[START PROPERTIES]
DataSource = .NULL.
Height = 200
Left = 1
Name = "Dataenvironment"
Top = 220
Width = 520
[END PROPERTIES]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED4]
1[END RESERVED4]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P56
[CLASS] cfoxrefform
[CLASSLOC] foxctrls.vcx
[BASECLASS] form
[OBJNAME] frmCodeAnalystResults
[START PROPERTIES]

Caption = "Code Analysis Results"
DoCreate = .T.
Height = 383
HelpContextID = 1231100
KeyPreview = .T.
Left = 15
LockScreen = .F.
MinHeight = 200
MinWidth = 200
Name = "frmCodeAnalystResults"
ShowTips = .T.
Top = 4
Width = 729
WindowState = 0
_memberdata =       83<VFPData><memberdata name="setfonts" type="method" display="SetFonts"/></VFPData>
ccurrentfileid = 
ccurrentreftype = 
ccurrentsetid = 
cevent = 
cfilter = .F.
cfontface = Tahoma
cfontstyle = N
cprojectfile = 
creftable = 
cresourceid = FOXREF
csortby = FILENAME
csortcolumns = 
csortextracolumns = 
lshowcolumnabstract = .T.
lshowcolumnsymbol = .T.
lshowfilename = .T.
ncolfilenamewidth = 0
nfilecnt = 0
nfilenamecolumnorder = 3
nfontsize = 8
nrefcnt = 0
ntotalfound = 0
ocode = .F.
ofoxref = .NULL.
[END PROPERTIES]
[START METHODS]
PROCEDURE Activate
DODEFAULT()

PUBLIC _oFoxRef
_oFoxRef = THISFORM


ENDPROC
PROCEDURE Deactivate
LOCAL cAlias

IF VARTYPE(THIS.oFoxRef) == 'O'
	cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
	IF USED(cAlias)
		USE IN (cAlias)
	ENDIF
ENDIF

DoDefault()

ENDPROC
PROCEDURE Destroy
THIS.SaveFormat()
THIS.SavePosition()
IF PEMSTATUS(_SCREEN,"_analyst",5)
	_SCREEN._analyst.ldisplayForm = .T.
ENDIF
DODEFAULT()


ENDPROC
PROCEDURE Init
#include "foxref.h"
LPARAMETERS oFoxRef
LOCAL cRefTable, cSetID
LOCAL lSortMostRecentFirst

SET TALK OFF
SET DELETED ON
DODEFAULT()

* For VFP 8, add pictures to the buttons
THIS.cmdFind.AutoSize = .T.
THIS.cmdFind.Picture = "bitmaps\find.bmp"
THIS.cmdFind.PicturePosition = 1

THIS.cmdRefresh.AutoSize = .T.
THIS.cmdRefresh.Picture = "bitmaps\refresh.bmp"
THIS.cmdRefresh.PicturePosition = 1

THIS.cmdPrint.AutoSize = .T.
THIS.cmdPrint.Picture = "bitmaps\print.bmp"
THIS.cmdPrint.PicturePosition = 1

THIS.cmdExport.AutoSize = .T.
THIS.cmdExport.Picture = "bitmaps\export.bmp"
THIS.cmdExport.PicturePosition = 1

THIS.cmdOptions.AutoSize = .T.
THIS.cmdOptions.Picture = "bitmaps\propsht.bmp"
THIS.cmdOptions.PicturePosition = 1

THIS.cmdHelp.AutoSize = .T.
THIS.cmdHelp.Picture = "bitmaps\refhelp.bmp"
THIS.cmdHelp.PicturePosition = 1

THIS.cmdRefresh.Left = THIS.cmdFind.Left + THIS.cmdFind.Width
THIS.cmdPrint.Left   = THIS.cmdRefresh.Left + THIS.cmdRefresh.Width
THIS.cmdExport.Left  = THIS.cmdPrint.Left + THIS.cmdPrint.Width
THIS.cmdOptions.Left = THIS.cmdExport.Left + THIS.cmdExport.Width
THIS.cmdHelp.Left    = THIS.cmdOptions.Left + THIS.cmdOptions.Width
THIS.cboRules.Left   = THIS.cmdHelp.Left + THIS.cmdHelp.width

THIS.oBrowser.nBackColor = THIS.BackColor
THIS.oBrowser.Write("<p>&nbsp;</p>")

* XP Themes are enabled on machine & turned on within VFP
IF SYS(2700) == '1' AND _SCREEN.Themes
	THIS.oTree.Appearance = 0  && flat
ELSE
	THIS.oTree.Appearance = 1  && 3d
ENDIF



lSortMostRecentFirst = .F.

* Get options that were saved to resource file
* (note that form size is taken care of by the parent class)
IF VARTYPE(THIS.oResourceOptions) == 'O'
	WITH THIS.oResourceOptions
		THIS.shpSplitter.Left   = NVL(.Get("SplitterLeft"), THIS.shpSplitter.Left)
		THIS.shpSplitterHor.Top = NVL(.Get("SplitterHorTop"), THIS.shpSplitterHor.Top)
		THIS.AlwaysOnTop        = NVL(.Get("AlwaysOnTop"), THIS.AlwaysOnTop)
		THIS.oBrowser.Visible   = NVL(.Get("ShowDescriptions"), THIS.oBrowser.Visible)
		THIS.cSortBy            = NVL(.Get("SortBy"), THIS.cSortBy)
		lSortMostRecentFirst    = NVL(.Get("SortMostRecentFirst"), lSortMostRecentFirst)
	ENDWITH
ENDIF

THIS.SortBy(THIS.cSortBy, .T.)  && setup default sorting
THIS.ResizeForm(.T.)

THIS.SetFonts()

THIS.Visible = .T.
THIS.LoadNodes()
THIS.FillRules()
THIS.Caption = "Code Analysis Results"
THIS.SetFont()

BINDEVENT(THIS, "OnSortBy", THIS, "SortBy")

ENDPROC
PROCEDURE KeyPress
LPARAMETERS nKeyCode, nShiftAltCtrl
LOCAL nTop
LOCAL nLeft

DO CASE
CASE nKeyCode = 27	&& ESC
	THISFORM.Release
CASE nKeyCode = -4	&& F5
	THISFORM.RefreshResults()
CASE nKeyCode = -5	&& F6 - switch panes
	THISFORM.SwitchPanes()
CASE (nKeyCode = 93 and nShiftAltCtrl = 1) OR (nKeyCode = 160 and nShiftAltCtrl = 4)	&& shortcut menu
	THIS.ScaleMode = 0
	nTop = WLROW(THISFORM.Name) + THIS.grdResults.Top + ((SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1))
	nLeft = WLCOL(THISFORM.Name) + THIS.grdResults.Left + (SYSMETRIC(3) / FONTMETRIC(6))
	THIS.ScaleMode = 3

	THISFORM.ShowRightClickMenu(nTop, nLeft)
ENDCASE

*!*	DODEFAULT(nKeyCode, nShiftAltCtrl)
ENDPROC
PROCEDURE Load
DODEFAULT()

* just a temporary placeholder cursor
* so our grid has something to bind to
CREATE CURSOR FoxRefCursor ( ;
  UniqueID C(10), ;
  RefCnt I, ;
  RefID C(10), ;
  Folder C(1), ;
  Filename C(1), ;
  LineNo I, ;
  ProcLineNo I, ;
  RefType C(1), ;
  Classname C(1), ;
  ProcName C(1), ;
  Abstract C(1), ;
  Checked L ;
 )


ENDPROC
PROCEDURE Resize
THIS.ResizeForm()

ENDPROC
PROCEDURE RightClick
THISFORM.ShowRightClickMenu()
ENDPROC
PROCEDURE analyzefile
LOCAL lcFile
lcFile = GETFILE("PRG;PJX;VCX;SCX","Select file","Open",1,"Select file to analyze")
IF EMPTY(lcFile)
	RETURN
ENDIF
_SCREEN._analyst.cmainprogram = lcFile
THIS.RefreshResults()
ENDPROC
PROCEDURE clearnode
IF !EMPTY(THISForm.cCurrentSetID)
	THIS.ClearResults()
ENDIF
ENDPROC
PROCEDURE clearresults
* Abstract:
*   Clear one or all result sets.
*
* Parameters:
*	[lClearAll] = TRUE to clear all result sets
#include "foxref.h"
LPARAMETERS lClearAll
LOCAL cAlias
LOCAL i
LOCAL oSelectedNode

IF lClearAll AND MESSAGEBOX(CLEARALL_LOC, MB_ICONQUESTION + MB_YESNO, CLEARALL_CAPTION_LOC) == IDNO
	RETURN
ENDIF

* close the FoxRef table if it's open
cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
IF USED(cAlias)
	USE IN (cAlias)
ENDIF

IF lClearAll
	IF THIS.oFoxRef.ClearResults()
		THIS.SetRefTable()
	ENDIF
ELSE
	IF THIS.oFoxRef.ClearResults(THIS.cCurrentSetID, THIS.cCurrentFileID)
		FOR i = 1 TO THIS.oTree.Nodes.Count
			IF SUBSTR(THIS.oTree.Nodes.Item(i).Key, 3, 10) == THIS.cCurrentSetID
				* go to sibling node
				oSelectedNode = THIS.oTree.Nodes.Item(i).Next
				IF VARTYPE(oSelectedNode) <> 'O'
					oSelectedNode = THIS.oTree.Nodes.Item(i).Previous
				ENDIF
				IF VARTYPE(oSelectedNode) <> 'O'
					oSelectedNode = THIS.oTree.Nodes(1)
				ENDIF
				THIS.oTree.SelectedItem = oSelectedNode
				THIS.oTree.Nodes.Remove(i)
				THIS.oTree.SelectedItem.EnsureVisible()
				THIS.UpdateGrid()
				EXIT
			ENDIF
		ENDFOR
	ENDIF
ENDIF


ENDPROC
PROCEDURE collapseall
#include "foxref.h"
* Collapse all nodes in the tree
LOCAL i
FOR i = 2 TO THIS.oTree.Nodes.Count
	THIS.oTree.Nodes.Item(i).Expanded = .F.
ENDFOR
ENDPROC
PROCEDURE copyreference
* Abstract:
*   Copy current reference to clipboard.
*
* Parameters:
*	[lRightPane] = TRUE if called from right-click menu of right-hand pane
#include "foxref.h"
LPARAMETERS lRightPane
LOCAL cRefID

IF lRightPane
	* if clicked on a particular reference and selected "copy",
	* then we only want to copy that single reference to
	* the clipboard
	THIS.oFoxRef.ExportReferences(EXPORTTYPE_CLIPBOARD, '', '', '', FoxRefCursor.RefID, .F.)
ELSE
	THIS.oFoxRef.ExportReferences(EXPORTTYPE_CLIPBOARD, '', THIS.cCurrentSetID, THIS.cCurrentFileID, '', .F.)
ENDIF

ENDPROC
PROCEDURE deselectall
* Abstract:
*   Remove checkmarks from all matches 
*	in the current set.
*
* Parameters:
*	[lAllResultSets] = TRUE to clear all result sets, not just displayed on
LPARAMETERS lAllResultSets
LOCAL nRecNo
LOCAL nSelect
LOCAL cAlias

nSelect = SELECT()

IF lAllResultSets
	UPDATE (THIS.oFoxRef.RefTable) SET Checked = .F. WHERE !ISNULL(Checked) AND Checked
ENDIF

IF USED("FoxRefCursor")
	SELECT FoxRefCursor
	m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
	REPLACE ALL Checked WITH .F. FOR !ISNULL(Checked) IN FoxRefCursor
	IF m.nRecNo <> 0
		GOTO (m.nRecNo) IN FoxRefCursor
	ENDIF
ENDIF

SELECT (m.nSelect)

ENDPROC
PROCEDURE expandall
* Expand all nodes in the tree
LOCAL i
FOR i = 1 TO THIS.oTree.Nodes.Count
	THIS.ExpandNode(THIS.oTree.Nodes.Item(i))
ENDFOR
THIS.oTree.SelectedItem.EnsureVisible()
ENDPROC
PROCEDURE expandnode
* Expand a Search Set node
#include "foxref.h"
#define tvwFirst	0
#define tvwLast		1
#define tvwNext		2
#define tvwPrevious	3
#define tvwChild	4
LPARAMETERS oNode
LOCAL nSelect
LOCAL cSetID

nSelect = SELECT()

cSetID = CHRTRANC(oNode.Tag, '!', '')
IF !EMPTY(cSetID)

	IF !oNode.Expanded
		oNode.Expanded = .T.
	ENDIF

	* if tag is empty, this means the parent
	* has never been loaded with its children
	* or is being forced to be refreshed
	IF RIGHT(oNode.Tag, 1) <> '!'
		* remove all children except the temp node
		FOR i = oNode.Children TO 1 STEP -1
			THIS.oTree.Nodes.Remove(oNode.Child.Key)
		ENDFOR

		* set the Tag so we don't try to reload children again
		oNode.Tag = oNode.Tag + '!'
		
		MESSAGEBOX("Show details for "+oNode.tag)

	ENDIF
ENDIF

SELECT (nSelect)

ENDPROC
PROCEDURE exportresults
* Abstract:
*   Display Export dialog.
*
* Parameters:
*	None
LOCAL lc
lc = PUTFILE("Name:","CODEANAL.DBF","DBF")
IF NOT EMPTY(lc)
	SELECT * FROM (THIS.ocode.canalysiscursor) INTO TABLE &lc
	BROWSE NORMAL
ENDIF

ENDPROC
PROCEDURE fillrules
LOCAL la(1,2)

SELECT DISTINCT cwarning,name FROM _SCREEN._analyst.cHomeDir+"CODERULE",(THIS.ocode.cAnalysisCursor) a WHERE coderule.uniqueid=a.cwarning INTO ARRAY la
THIS.cboRules.Clear()
THIS.cboRules.AddItem("All")
FOR LNi = 1 TO ALEN(la,1)
	IF NOT EMPTY(la(1))
		THIS.cboRules.AddItem(la(lni,2))
		THIS.cboRules.List(THIS.cboRules.ListCount,2)=la(lni,1)
	ENDIF
ENDFOR
THIS.cboRules.ListIndex=1
ENDPROC
PROCEDURE getclassmethoddescription
#include "foxref.h"
LPARAMETERS lProcNameOnly
LOCAL lNoClassProc

IF EOF("FoxRefCursor")
	RETURN ''
ELSE
	IF lProcNameOnly
		RETURN FoxRefCursor.ClassName + IIF(FoxRefCursor.FindType == FINDTYPE_PROPERTYNAME, '.' + PEMNAME_LOC, '') + ;
		 IIF('.' $ FoxRefCursor.ProcName, '.' + JUSTSTEM(FoxRefCursor.ProcName), '')
	ELSE
		m.lNoClassProc = EMPTY(FoxRefCursor.ClassName) AND EMPTY(FoxRefCursor.ProcName)
		RETURN FoxRefCursor.ClassName + IIF(EMPTY(FoxRefCursor.ClassName) OR EMPTY(FoxRefCursor.ProcName), '', '.') + FoxRefCursor.ProcName + IIF(FoxRefCursor.FindType == FINDTYPE_PROPERTYNAME, '.' + PEMNAME_LOC, '') + IIF(FoxRefCursor.ProcLineNo == 0, '', ;
		 IIF(INLIST(FoxRefCursor.FindType, FINDTYPE_NAME, FINDTYPE_PROPERTYNAME, FINDTYPE_PROPERTYVALUE, FINDTYPE_EXPR, FINDTYPE_OTHER), '', IIF(m.lNoClassProc, '', ", ") + LTRIM(STR(FoxRefCursor.ProcLineNo, 8, 0))))
	ENDIF
ENDIF

ENDPROC
PROCEDURE gettempalias
* Return a temp alias name given a table name
LPARAMETERS cTableName
LOCAL cAlias

m.cAlias = JUSTSTEM(m.cTableName)
IF !ISALPHA(LEFT(m.cAlias, 1))
	m.cAlias = "A" + m.cAlias
ENDIF

RETURN m.cAlias
ENDPROC
PROCEDURE gotodefinition
* Abstract:
*   Goto a definition, or if multiple are
*	defined ask which one to go to.
*
* Parameters:
*	None
#include "foxref.h"
#include "foxpro.h"
LOCAL nPos
LOCAL nLen
LOCAL cFindSymbol
LOCAL nMouse

m.nMouse = THISFORM.MousePointer
THISFORM.MousePointer = MOUSE_HOURGLASS

IF USED("FoxRefCursor") AND !EOF("FoxRefCursor") AND !BOF("FoxRefCursor")
	THIS.oFoxRef.CollectDefinitions()
	THIS.oFoxRef.GotoSymbol(FoxRefCursor.Symbol, ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename), RTRIM(FoxRefCursor.ClassName), RTRIM(FoxRefCursor.ProcName))
ENDIF

THISFORM.MousePointer = m.nMouse
ENDPROC
PROCEDURE gotoreference
LPARAMETERS tcFile
IF PCOUNT()=1
IF NOT EMPTY(tcFile)
	EDITSOURCE(tcFile)
ENDIF

ELSE
LOCAL lcFile,lnLine,lcClass,lcProc
lnLine = VAL(THIS.lstResults.List(THIS.lstResults.ListIndex,4))
lcFile = THIS.lstResults.List(THIS.lstResults.ListIndex,3)
lcClass = THIS.lstResults.List(THIS.lstResults.ListIndex,5)
lcProc =  THIS.lstResults.List(THIS.lstResults.ListIndex,6)
IF NOT EMPTY(lcFile)
	EDITSOURCE(lcFile,lnLine,lcClass)
ENDIF
ENDIF
ENDPROC
PROCEDURE importresults
* Abstract:
*   Display Export dialog.
*
* Parameters:
*	None
LOCAL lc
lc = GETFILE("DBF","Select file:","Import")
IF NOT EMPTY(lc)
	SELECT (THIS.ocode.canalysiscursor)
	APPEND FROM (lc)
	THIS.LoadNodes()
	THIS.FillRules()
ENDIF

ENDPROC
PROCEDURE isitemschecked
* Abstract:
*   Return TRUE if any items in FoxRefCursor
* 	are checked.  This is used to determine
*	if "Deselect All" should be enabled on
*	the rightclick menu.
*
* Parameters:
*	None
LOCAL nRecNo
LOCAL nSelect
LOCAL lYes

m.lYes = .F.
IF USED("FoxRefCursor")
	m.nSelect = SELECT()
	SELECT FoxRefCursor
	m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
	LOCATE FOR Checked
	m.lYes = FOUND()
	IF m.nRecNo <> 0
		GOTO (m.nRecNo) IN FoxRefCursor
	ENDIF
	SELECT (m.nSelect)
ENDIF

RETURN m.lYes

ENDPROC
PROCEDURE loadfiles
LPARAMETERS tcFileType
LOCAL la(1)
la(1) = ""
LOCAL ln
ln = 0
LOCAL lcF
lcF = ""
IF NOT EMPTY(THIS.cFilter)
	lcF = " AND cwarning='"+THIS.cFilter+"'"
ENDIF
SELECT DISTINCT PADR(JUSTFNAME(UPPER(cProg)),40) FROM (THIS.ocode.canalysisCursor) ;
	WHERE NOT EMPTY(warnings) AND cFileType = tcFileType AND NOT EMPTY(cProg) ;
	&lcF ;
	INTO ARRAY la
FOR lni = 1 TO ALEN(la,1)
	ln = ln+1
	THIS.oTree.Nodes.Add(tcFileType,4,la(lni),LOWER(JUSTFNAME(la(lni))))
ENDFOR
THIS.oTree.Nodes.Item(tcFileType).Text = TRIM(tcFileType) +" ("+LTRIM(STR(ln))+")"

RETURN ln
ENDPROC
PROCEDURE loadnodes
THISFORM.oCode = _SCREEN._analyst
ThisForm.oTree.Nodes.Clear()
ThisForm.oTree.Nodes.Add(,,"Warnings","Warnings")
IF NOT EMPTY(THIS.ocode.cError)
	ThisForm.oTree.Nodes.Add(,,"Errors","Errors ("+LTRIM(STR(MEMLINES(THISFORM.ocode.cError)))+")")
ENDIF
THISFORM.oTree.Nodes.Item(1).Expanded = .T.
LOCAL lni
DIMENSION THIS.aFiles(1,2)
THIS.aFiles(1,1) = "Warnings"
THIS.aFiles(1,2) = "Warnings"
LOCAL lc,lcKey
LOCAL la(1)
LOCAL lnFilled
lnFilled = 0
la(1) = ""
LOCAL lo
SELECT DISTINCT cFileType FROM (THISFORM.oCode.cAnalysisCursor) WHERE NOT EMPTY(warnings) INTO ARRAY la
FOR lni = 1 TO ALEN(la,1)
	IF NOT EMPTY(la(lni))
		lo=THIS.oTree.Nodes.Add("Warnings",4,la(lni),la(lni))
		lc = la(lni)
		IF THIS.LoadFiles(lc)>0
			lo.Expanded = .T.
		ENDIF
	ENDIF
ENDFOR

*!*	FOR lni = 1 TO ALEN(_SCREEN._analyst.awarnings,1)
*!*		lc = _SCREEN._analyst.awarnings(lni,2)
*!*		IF NOT EMPTY(lc)
*!*			IF ASCAN(THIS.aFiles,lc)=0
*!*				lcKey = SYS(2015)
*!*				DIMENSION THIS.aFiles(ALEN(THIS.aFiles,1)+1,2)
*!*				THIS.aFiles(ALEN(THIS.aFiles,1),1)= lc
*!*				THIS.aFiles(ALEN(THIS.aFiles,1),2)= lcKey
*!*				THIS.oTree.Nodes.Add("Warnings",4,lcKey,lc)
*!*			ELSE
*!*				lcKey = THIS.aFiles(ASCAN(THIS.aFiles,lc)+1)
*!*			ENDIF
*!*		ELSE
*!*			lc = "Unknown"
*!*	*!*			IF ASCAN(THIS.aFiles,lc)=0
*!*	*!*				lcKey = SYS(2015)
*!*	*!*				DIMENSION THIS.aFiles(ALEN(THIS.aFiles,1)+1,2)
*!*	*!*				THIS.aFiles(ALEN(THIS.aFiles,1),1)= lc
*!*	*!*				THIS.aFiles(ALEN(THIS.aFiles,1),2)= lcKey
*!*	*!*				THIS.oTree.Nodes.Add("Warnings",4,lcKey,lc)
*!*	*!*			ELSE
*!*	*!*				lcKey = THIS.aFiles(ASCAN(THIS.aFiles,lc)+1)
*!*	*!*			ENDIF
*!*		
*!*		ENDIF
*!*	ENDFOR
THIS.UpdateGrid(THISFORM.oTree.Nodes.Item(1))

ENDPROC
PROCEDURE loadresults
* Abstract:
*   Populate grid with the results.
*
* Parameters:
*	[cRefType]   = Reference type: Search Set (REFTYPE_SEARCH) or Log (REFTYPE_LOG)
*	[cSetID]     = to only show matches for a specific search set
*	[cFileID]    = to only show matches for a specific file
*	[lFirstTime] = true if this is our first time setting (so don't save grid position)
*	[lNoSaveCheckmarks] = true to not save checkmarks
#include "foxpro.h"
#include "foxref.h"
LPARAMETERS cRefType, cSetID, cFileID, lFirstTime, lNoSaveCheckmarks

LOCAL i
LOCAL cColumn
LOCAL nSelect
LOCAL nMouse
LOCAL lLockScreen
LOCAL nLeftPos, nTopPos, nColWidth2, nColWidth3, nColWidth4, nColWidth5
LOCAL cSortColumns
LOCAL lDeleteFileColumn
LOCAL cSortExtraColumns
LOCAL ARRAY aColumnOrder[1]
LOCAL ARRAY aFileCnt[1]

nSelect = SELECT()

nMouse = THIS.MousePointer
THIS.MousePointer = MOUSE_HOURGLASS 

lLockScreen = THIS.LockScreen
THIS.LockScreen = .T.


THIS.cCurrentSetID  = ''
THIS.cCurrentFileID = ''

IF VARTYPE(cRefType) <> 'C' OR EMPTY(cRefType)
	cRefType = THIS.cCurrentRefType
ELSE
	THIS.cCurrentRefType = cRefType
ENDIF

IF VARTYPE(cSetID) <> 'C'
	cSetID = ''
ENDIF


IF cRefType == REFTYPE_LOG
	* Display the replacement log in a browser window where
	* the results grid usually is
	THIS.cCurrentSetID = cSetID

	IF TYPE("THIS.oLogBrowser") == 'U'
		THIS.NewObject("oLogBrowser", "CWebBrowser", "FoxRef.vcx")
		THIS.oLogBrowser.cFontFace = THIS.cFontFace
		THIS.oLogBrowser.nFontSize = THIS.nFontSize + 3
	ENDIF
	THIS.oLogBrowser.Move(THIS.lstResults.Left, THIS.lstResults.Top, THIS.lstResults.Width, THIS.lstResults.Height)

	SELECT Abstract ;
	 FROM (THIS.oFoxRef.RefTable) RefTable ;
	 WHERE ;
	  SetID == cSetID AND ;
	  RefType == REFTYPE_LOG AND ;
	  !RefTable.Inactive ;
	 INTO CURSOR FoxCodeCursor
	IF _TALLY > 0 
		cHTML = THIS.oLogBrowser.GetFontTag() + STRTRAN(FoxCodeCursor.Abstract, CHR(13) + CHR(10), "<br>") + [</font>]
	ELSE
		cHTML = ''
	ENDIF
	IF EMPTY(cHTML)
		THIS.oLogBrowser.Write([<p>&nbsp;</p>])
	ELSE
		THIS.oLogBrowser.Write(cHTML)
	ENDIF

	THIS.oLogBrowser.Visible = .T.
ELSE
	* Display results grid
	IF VARTYPE(THIS.oLogBrowser) == 'O'
		THIS.oLogBrowser.Visible = .F.
	ENDIF

	cSortColumns = THIS.cSortColumns

	IF THIS.lShowFilename AND TYPE("THIS.lstResults.colFilename") == 'O' AND !ISNULL(THIS.lstResults.colFilename)
		THIS.nColFilenameWidth = THIS.lstResults.colFilename.Width
	ENDIF
	nColWidth2 = 0
	nColWidth3 = 0
	nColWidth4 = 0
	nColWidth5 = 0

	IF .F. && TYPE("THIS.lstResults") == 'O' AND !ISNULL(THIS.lstResults)
		IF THIS.lstResults.ColumnCount > 0
			IF TYPE("THIS.lstResults.colClassMethod.Width") == 'N'
				nColWidth2 = THIS.lstResults.colClassMethod.Width
			ENDIF
			
			IF TYPE("THIS.lstResults.colCode.Width") == 'N'
				nColWidth3 = THIS.lstResults.colCode.Width
			ENDIF

			IF TYPE("THIS.lstResults.colMethod.Width") == 'N'
				nColWidth4 = THIS.lstResults.colMethod.Width
			ENDIF

			IF TYPE("THIS.grdResults.colLine.Width") == 'N'
				nColWidth5 = THIS.grdResults.colLine.Width
			ENDIF
		ENDIF

		nLeftPos   = THIS.lstResults.Left
		nTopPos    = THIS.lstResults.Top

		IF !lFirstTime
			THIS.SaveFormat()

			IF THIS.lShowFilename
				THIS.nFilenameColumnOrder = THIS.lstResults.colFilename.ColumnOrder
			ENDIF
		ENDIF
		THIS.RemoveObject("lstResults")
	ELSE
		nLeftPos   = 182
		nTopPos    = 26
	ENDIF
	
	* save the current state of what files are checked
	IF !lNoSaveCheckmarks

	ENDIF

	IF VARTYPE(THIS.oFoxRef) == 'O'
		THIS.lShowRefsPerLine = THIS.oFoxRef.ShowRefsPerLine
		THIS.lShowDistinctMethodLine = THIS.oFoxRef.ShowDistinctMethodLine
	ENDIF

	cSortExtraColumns = THIS.cSortExtraColumns
	IF !EMPTY(cSortExtraColumns)
		cSortExtraColumns = ", " + cSortExtraColumns
	ENDIF


	* The GROUP BY clause in the below queries ensures that we
	* only include a result once even if it occurs more than once 
	* on a particular line

	LOCAL lnSaveSYS3099 
	lnSaveSYS3099=SYS(3099) 
	SYS(3099, 70) 


	IF !EMPTY(cSetID)
		cSetID = PADR(cSetID, 10)
		THIS.cCurrentSetID = cSetID

		IF VARTYPE(cFileID) == 'C' AND !EMPTY(cFileID)
			THIS.cCurrentFileID = cFileID
			
			* all matches for a specific set and filename
			SELECT ;
			  CNT(*) AS RefCnt, ;
			  RefTable.*, ;
			  FileTable.Filename, ;
			  FileTable.Folder, ;
			  PADR(FileTable.Folder, 240) AS SortFolder, ;
			  LOWER(PADR(JUSTEXT(FileTable.Filename), 3)) AS SortFileType ;
			  &cSortExtraColumns ;
			 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
			 WHERE ;
			   RefTable.SetID == cSetID AND ;
			   RefTable.FileID == cFileID AND ;
			   RefTable.RefType == REFTYPE_RESULT AND ;
			   !RefTable.Inactive ;
			 ORDER BY &cSortColumns ;
			 GROUP BY RefTable.RefID ;
			 INTO CURSOR FoxRefCursor READWRITE
		ELSE
			* all matches for a specific set
			SELECT ;
			  CNT(*) AS RefCnt, ;
			  RefTable.*, ;
			  FileTable.Filename, ;
			  FileTable.Folder, ;
			  PADR(FileTable.Folder, 240) AS SortFolder, ;
			  LOWER(PADR(JUSTEXT(Filename), 3)) AS SortFileType ;
			  &cSortExtraColumns ;
			 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
			 WHERE ;
			  RefTable.SetID == cSetID AND ;
			  RefTable.RefType == REFTYPE_RESULT AND ;
			  !RefTable.Inactive ;
			 ORDER BY &cSortColumns ;
			 GROUP BY RefTable.RefID ;
			 INTO CURSOR FoxRefCursor READWRITE
		ENDIF
	ELSE
		* all matches
		SELECT ;
		  CNT(*) AS RefCnt, ;
		  RefTable.*, ;
		  FileTable.Filename, ;
		  FileTable.Folder, ;
		  PADR(FileTable.Folder, 240) AS SortFolder, ;
		  LOWER(PADR(JUSTEXT(Filename), 3)) AS SortFileType ;
		  &cSortExtraColumns ;
		 FROM (THIS.oFoxRef.RefTable) RefTable INNER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
		 WHERE ;
		  RefTable.RefType == REFTYPE_RESULT AND ;
		  !RefTable.Inactive ;
		 ORDER BY &cSortColumns ;
		 GROUP BY RefID ;
		 INTO CURSOR FoxRefCursor READWRITE
	ENDIF


	IF EMPTY(THIS.cCurrentFileID)
		SELECT CNT(*) FROM FoxRefCursor GROUP BY FileID INTO ARRAY aFileCnt
		IF _TALLY == 0 OR aFileCnt[1] == 0
			THIS.nFileCnt = 0
		ELSE
			THIS.nFileCnt = _TALLY
		ENDIF
	ELSE
		THIS.nFileCnt = 1
	ENDIF

	SYS(3099, lnSaveSYS3099) 



	SELECT FoxRefCursor
	SUM RefCnt ALL TO THIS.nRefCnt
	LOCATE


	lDeleteFileColumn = .F.
	IF TYPE("THIS.grdResults") <> 'O' OR ISNULL(THIS.grdResults)
		THIS.NewObject("grdResults", "CResultsAllGrid", "FoxRef.vcx")
		THIS.lShowFilename = EMPTY(THIS.cCurrentFileID)
		IF !THIS.lShowFilename
			lDeleteFileColumn = .T.
		ENDIF

		THIS.grdResults.Left = nLeftPos
		THIS.grdResults.Top  = nTopPos
		* THIS.grdResults.LockColumns = 1

		THIS.ResizeForm(.T.)
		THIS.SetFont()
	ENDIF

	THIS.grdResults.ColCheckbox.Header1.Picture = "check.bmp"

	IF THIS.nColFilenameWidth > 0 AND TYPE("THIS.grdResults.colFilename") == 'O' AND !ISNULL(THIS.grdResults.colFilename)
		THIS.grdResults.colFilename.Width = THIS.nColFilenameWidth
	ENDIF
	IF nColWidth2 > 0 AND TYPE("THIS.grdResults.colClassMethod") == 'O' AND !ISNULL(THIS.grdResults.colClassMethod)
		THIS.grdResults.colClassMethod.Width = nColWidth2
	ENDIF
	IF nColWidth3 > 0 AND TYPE("THIS.grdResults.colCode") == 'O' AND !ISNULL(THIS.grdResults.colCode)
		THIS.grdResults.colCode.Width = nColWidth3
	ENDIF

	IF nColWidth4 > 0 AND TYPE("THIS.grdResults.colMethod") == 'O' AND !ISNULL(THIS.grdResults.colMethod)
		THIS.grdResults.colMethod.Width = nColWidth4
	ENDIF
	IF nColWidth5 > 0 AND TYPE("THIS.grdResults.colLine") == 'O' AND !ISNULL(THIS.grdResults.colLine)
		THIS.grdResults.colLine.Width = nColWidth5
	ENDIF


	IF VARTYPE(THIS.oResourceOptions) == 'O'
		DIMENSION aColumnOrder[7, 2]
		aColumnOrder = 0
		aColumnOrder[1,1] = "colCheckbox"
		aColumnOrder[2,1] = "colSymbol"
		aColumnOrder[3,1] = "colFilename"
		aColumnOrder[4,1] = "colClassMethod"
		aColumnOrder[5,1] = "colMethod"
		aColumnOrder[6,1] = "ColLine"
		aColumnOrder[7,1] = "colCode"

		WITH THIS.oResourceOptions
			aColumnOrder[1, 2] = NVL(.Get("CheckboxColumnOrder"), 0)
			aColumnOrder[2, 2] = NVL(.Get("SymbolColumnOrder"), 0)
			aColumnOrder[3, 2] = IIF(THIS.lShowFilename, NVL(.Get("FilenameColumnOrder"), 0), THIS.nFilenameColumnOrder)
			aColumnOrder[4, 2] = NVL(.Get("ClassMethodColumnOrder"), 0)
			aColumnOrder[5, 2] = NVL(.Get("MethodColumnOrder"), 0)
			aColumnOrder[6, 2] = NVL(.Get("LineColumnOrder"), 0)
			aColumnOrder[7, 2] = NVL(.Get("CodeColumnOrder"), 0)
		ENDWITH
		=ASORT(aColumnOrder, 2, -1, 1)
	ENDIF

	IF lDeleteFileColumn
		THIS.grdResults.DeleteColumn(THIS.grdResults.colFilename.ColumnOrder)
	ENDIF

	IF THIS.lShowDistinctMethodLine
		THIS.grdResults.colClassMethod.Header1.Caption = CLASS_HEADER_LOC
	ELSE
		THIS.grdResults.DeleteColumn(THIS.grdResults.colMethod.ColumnOrder)
		THIS.grdResults.DeleteColumn(THIS.grdResults.colLine.ColumnOrder)
	ENDIF

	IF !THIS.lShowRefsPerLine
		THIS.grdResults.DeleteColumn(THIS.grdResults.colSymbol.ColumnOrder)
	ENDIF

	THIS.grdResults.Visible = .T.
	DOEVENTS
	CLEAR TYPEAHEAD
ENDIF

THIS.ShowDetail(IIF(EMPTY(cSetID), "ALL", cSetID), .T.)

THIS.LockScreen = lLockScreen
THIS.MousePointer = nMouse


SELECT (nSelect)

ENDPROC
PROCEDURE onsortby
* SortBy() is the actual method that does the sort.
* This is called by the grids when a header is clicked
* and we used BindEvents to hook into it.
* We can't call SortBy() directly because we need to
* destroy and re-create the grid, and we can't do that
* if an event associated with the grid is still in the 
* call stack.
LPARAMETERS cColumn


ENDPROC
PROCEDURE openfile
LOCAL lcFile
lcFile = THIS.oTree.SelectedItem.Text

IF FILE(lcFile)
	EDITSOURCE(FULLPATH(lcFile))
ELSE
	MESSAGEBOX("Cannot open "+FULLPATH(lcfile))
ENDIF
ENDPROC
PROCEDURE options
* Abstract:
*   Display Options dialog.
*
* Parameters:
*	None

* close tables in case they select "Cleanup" and we need
* exclusive access to them
_SCREEN._analyst.configure()

ENDPROC
PROCEDURE printresults
* Abstract:
*   Print references.
*
* Parameters:
*	None
SELECT (THIS.ocode.canalysiscursor)
REPORT FORM codeanalysisresults TO PRINTER PROMPT PREVIEW FOR NOT EMPTY(cwarning)
ENDPROC
PROCEDURE refreshresults
_SCREEN._analyst.ldisplayForm = .F.

IF _SCREEN._analyst.cMainProgram = "Current Object"
	_SCREEN._analyst.analyze()
ELSE
	_SCREEN._analyst.analyze(_SCREEN._analyst.cMainProgram)
ENDIF

THIS.LoadNodes()

ENDPROC
PROCEDURE resizeform
* Abstract:
*   Adjust size of the tree control and the list control
*	based upon the size of the form and the sizer control.
*
* Parameters:
*	None
LPARAMETERS lSplitter
LOCAL lLockScreen
LOCAL nBottom, nWidth, nLeft, nHeight, nTop

lLockScreen = THISFORM.LockScreen
THISFORM.LockScreen = .T.

IF lSplitter
	nWidth  = THIS.Width - 2
	nLeft   = THIS.oBrowser.Left
	nTop    = THIS.shpSplitterHor.Top + 2
	nHeight = THIS.Height - nTop - 1
ELSE
	nWidth  = THIS.Width - 2
	nLeft   = THIS.oBrowser.Left
	nTop    = MAX(THIS.Height - THIS.oBrowser.Height - 1, 50)
	nHeight = THIS.oBrowser.Height
	
	THIS.shpSplitterHor.Top = nTop - 2
ENDIF

IF nLeft <> THIS.oBrowser.Left OR nTop <> THIS.oBrowser.Top OR nWidth <> THIS.oBrowser.Width OR nHeight <> THIS.oBrowser.Height
	THIS.oBrowser.Move(nLeft, nTop, nWidth + 1, nHeight)
	THIS.oBrowser.Move(nLeft, nTop, nWidth, nHeight)
	THIS.oBrowser.Width = THIS.oBrowser.Width
ENDIF
IF THIS.oBrowser.Visible
	* nBottom = THIS.oBrowser.Top
	nBottom = THIS.shpSplitterHor.Top + 2
ELSE
	nBottom = THIS.oBrowser.Top + THIS.oBrowser.Height + 2
ENDIF

* control position left-to-right
THIS.lstResults.Left = THIS.shpSplitter.Left + THIS.shpSplitter.Width
THIS.lstResults.Width = THIS.Width - (THIS.lstResults.Left) - 1
THIS.lstResults.Height = nBottom - THIS.lstResults.Top - 2

THIS.oTree.Width  = THIS.shpSplitter.Left - THIS.oTree.Left
THIS.oTree.Height = nBottom - THIS.oTree.Top - 2

THIS.shpSplitter.Height = nBottom - THIS.shpSplitter.Top
THIS.shpSplitterHor.Width = THIS.Width

THIS.MinWidth = THIS.lstResults.Left + 20


IF VARTYPE(THIS.oLogBrowser) == 'O'
	THIS.oLogBrowser.Move(THIS.lstResults.Left, THIS.lstResults.Top, THIS.lstResults.Width, THIS.lstResults.Height)
ENDIF

THISFORM.LockScreen = lLockScreen

ENDPROC
PROCEDURE resultsrightclickmenu
#include "foxref.h"
LPARAMETERS nRow, nCol
LOCAL oTempFoxRef

* so that we can use it in our ON SELECTION BAR command
oTempFoxRef = THISFORM

IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
	nRow = MROW("")
	nCol = MCOL("")
ENDIF

DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"
DEFINE BAR 1 OF shortcut PROMPT MENU_OPEN_LOC PICTRES _mfi_open STYLE "B"
DEFINE BAR 3 OF shortcut PROMPT MENU_COPY_LOC PICTRES _med_copy
DEFINE BAR 4 OF shortcut PROMPT "\-"
DEFINE BAR 5 OF shortcut PROMPT MENU_SEARCH_LOC PICTRES _med_find
DEFINE BAR 6 OF shortcut PROMPT MENU_GLOBALREPLACE_LOC PICTRES _med_repl
DEFINE BAR 7 OF shortcut PROMPT MENU_REFRESH_LOC PICTURE "bitmaps\refresh.bmp"
DEFINE BAR 8 OF shortcut PROMPT "\-"
DEFINE BAR 9 OF shortcut PROMPT MENU_PRINT_LOC PICTRES _mfi_sysprint
DEFINE BAR 10 OF shortcut PROMPT MENU_EXPORT_LOC PICTURE "bitmaps\export.bmp"
DEFINE BAR 11 OF shortcut PROMPT "\-"
DEFINE BAR 12 OF shortcut PROMPT MENU_SELECTALL_LOC
DEFINE BAR 13 OF shortcut PROMPT MENU_DESELECTALLWIN_LOC
DEFINE BAR 14 OF shortcut PROMPT MENU_DESELECTALL_LOC
DEFINE BAR 15 OF shortcut PROMPT MENU_SORT_LOC PICTURE "bitmaps\sortup.bmp"
DEFINE BAR 16 OF shortcut PROMPT "\-"
DEFINE BAR 17 OF shortcut PROMPT MENU_OPTIONS_LOC PICTURE "bitmaps\propsht.bmp"

ON SELECTION BAR 1 OF shortcut oTempFoxRef.GotoReference()
ON SELECTION BAR 3 OF shortcut oTempFoxRef.CopyReference(.T.)
ON SELECTION BAR 5 OF shortcut oTempFoxRef.Search()
ON SELECTION BAR 6 OF shortcut oTempFoxRef.GlobalReplace()
ON SELECTION BAR 7 OF shortcut oTempFoxRef.RefreshResults()
ON SELECTION BAR 9 OF shortcut oTempFoxRef.PrintResults()
ON SELECTION BAR 10 OF shortcut oTempFoxRef.ExportResults()
ON SELECTION BAR 12 OF shortcut oTempFoxRef.SelectAll()
ON SELECTION BAR 13 OF shortcut oTempFoxRef.DeselectAll()
ON SELECTION BAR 14 OF shortcut oTempFoxRef.DeselectAll(.T.)
ON BAR 15 OF shortcut ACTIVATE POPUP sortpopup
ON SELECTION BAR 17 OF shortcut oTempFoxRef.Options()

DEFINE POPUP sortpopup SHORTCUT RELATIVE
DEFINE BAR 1 OF sortpopup PROMPT MENUSORT_FILENAME_LOC
DEFINE BAR 2 OF sortpopup PROMPT MENUSORT_CLASSMETHOD_LOC
DEFINE BAR 3 OF sortpopup PROMPT MENUSORT_METHOD_LOC
DEFINE BAR 4 OF sortpopup PROMPT MENUSORT_CHECKED_LOC
DEFINE BAR 5 OF sortpopup PROMPT MENUSORT_FILETYPE_LOC
DEFINE BAR 6 OF sortpopup PROMPT MENUSORT_LOCATION_LOC

DO CASE
CASE THIS.cSortBy == "FILENAME"
	SET MARK OF BAR 1 OF sortpopup TO .T.

CASE THIS.cSortBy == "CLASS"
	SET MARK OF BAR 2 OF sortpopup TO .T.

CASE THIS.cSortBy == "METHOD"
	SET MARK OF BAR 3 OF sortpopup TO .T.

CASE THIS.cSortBy == "CHECKED"
	SET MARK OF BAR 4 OF sortpopup TO .T.

CASE THIS.cSortBy == "FILETYPE"
	SET MARK OF BAR 5 OF sortpopup TO .T.

CASE THIS.cSortBy == "LOCATION"
	SET MARK OF BAR 6 OF sortpopup TO .T.

ENDCASE

ON SELECTION BAR 1 OF sortpopup oTempFoxRef.SortBy("FILENAME")
ON SELECTION BAR 2 OF sortpopup oTempFoxRef.SortBy("CLASS")
ON SELECTION BAR 3 OF sortpopup oTempFoxRef.SortBy("METHOD")
ON SELECTION BAR 4 OF sortpopup oTempFoxRef.SortBy("CHECKED")
ON SELECTION BAR 5 OF sortpopup oTempFoxRef.SortBy("FILETYPE")
ON SELECTION BAR 6 OF sortpopup oTempFoxRef.SortBy("LOCATION")

ACTIVATE POPUP shortcut

RELEASE POPUP shortcut
RELEASE POPUP sortpopup

ENDPROC
PROCEDURE saveformat
* Save form format options to Resource file (FoxUser)

IF VARTYPE(THIS.oResourceOptions) == 'O'
	WITH THIS.oResourceOptions
		.Set("SplitterLeft", THIS.shpSplitter.Left)
		.Set("SplitterHorTop", THIS.shpSplitterHor.Top)
		.Set("ShowDescriptions", THIS.oBrowser.Visible)
		.Set("AlwaysOnTop", THIS.AlwaysOnTop)
		.Set("SortBy", THIS.cSortBy)
		*!* .Set("SortMostRecentFirst", THIS.oFoxRef.SortMostRecentFirst)
	ENDWITH
ENDIF



ENDPROC
PROCEDURE saveposition
* save the position, size, etc of the form, splitter bar,
* and the grid columns to the *_Ref table
#include "foxref.h"
LOCAL lInUse
LOCAL lSuccess

IF VARTYPE(THIS.oFoxRef) == 'O' AND FILE(FORCEEXT(THIS.oFoxRef.RefTable, "DBF"))
	m.lSuccess = .T.
	TRY
		USE (THIS.oFoxRef.RefTable) ALIAS FoxRefSave IN 0 SHARED AGAIN
	CATCH
		m.lSuccess = .F.
	FINALLY
	ENDTRY

	IF m.lSuccess
		IF TYPE("FoxRefSave.RefType") == 'C' AND FoxRefSave.RefType == REFTYPE_INIT
			REPLACE Abstract WITH ;
			  TRANSFORM(THIS.Top) + ',' + ;
			  TRANSFORM(THIS.Left) + ',' + ;
			  TRANSFORM(THIS.Height) + ',' + ;
			  TRANSFORM(THIS.Width)  + ',' + ;
			  TRANSFORM(THIS.shpSplitter.Left) + ',' + ;
			  TRANSFORM(THIS.shpSplitterHor.Top) + ',' + ;
			  IIF(TYPE("THIS.grdResults.colFilename.Width") == 'N' AND THIS.lShowFilename, TRANSFORM(THIS.grdResults.colFilename.Width), TRANSFORM(THIS.nColFilenameWidth)) + ',' + ;
			  IIF(TYPE("THIS.grdResults.colClassMethod.Width") == 'N', TRANSFORM(THIS.grdResults.colClassMethod.Width), '0') + ',' + ;
			  IIF(TYPE("THIS.grdResults.colCode.Width") == 'N', TRANSFORM(THIS.grdResults.colCode.Width), '0') + ',' + ;
			  IIF(TYPE("THIS.grdResults.colMethod.Width") == 'N', TRANSFORM(THIS.grdResults.colMethod.Width), '0') + ',' + ;
			  IIF(TYPE("THIS.grdResults.colLine.Width") == 'N', TRANSFORM(THIS.grdResults.colLine.Width), '0') ;
			 IN FoxRefSave
		ENDIF
		
		IF USED("FoxRefSave")
			USE IN FoxRefSave
		ENDIF
	ENDIF
ENDIF

ENDPROC
PROCEDURE selectall
* Abstract:
*   Put checkmarks next to all matches 
*	in the current set.
*
* Parameters:
*	None
LOCAL nRecNo
LOCAL nSelect

IF USED("FoxRefCursor")
	m.nSelect = SELECT()
	SELECT FoxRefCursor
	m.nRecNo = IIF(EOF() OR BOF(), 0, RECNO())
	REPLACE ALL Checked WITH .T. FOR !ISNULL(Checked) IN FoxRefCursor
	IF m.nRecNo <> 0
		GOTO (m.nRecNo) IN FoxRefCursor
	ENDIF
	* THIS.grdResults.Refresh()
	SELECT (m.nSelect)
ENDIF


ENDPROC
PROCEDURE setfont
* Abstract:
*   Change the font.
*
* Parameters:
*	None
LPARAMETERS lGetFont
LOCAL cFontFace, nFontSize, cStyle

	cFontString = _SCREEN._analyst.cFontString && "Tahoma,8,N" && GETFONT(THIS.cFontFace, THIS.nFontSize, THIS.cFontStyle)

IF !EMPTY(cFontString)
	cFontFace  = LEFT(cFontString, AT(",", cFontString) - 1)
	nFontSize  = SUBSTR(cFontString, AT(",", cFontString) + 1)
	nFontSize  = VAL(LEFT(nFontSize, AT(",", nFontSize) - 1))
	cFontStyle = SUBSTR(cFontString, AT("," ,cFontString,2) + 1)
	
	THIS.cFontFace  = cFontFace
	THIS.nFontSize  = nFontSize
	THIS.cFontStyle = cFontStyle
ENDIF

THIS.oTree.Font        = THIS.cFontFace
THIS.oTree.Font.Size   = THIS.nFontSize
THIS.oTree.Font.Bold   = 'B' $ THIS.cFontStyle
THIS.oTree.Font.Italic = 'I' $ THIS.cFontStyle

THIS.lstResults.FontName = THIS.cFontFace
THIS.lstResults.FontSize = THIS.nFontSize
THIS.lstResults.FontBold = "B"$THIS.cFontStyle
THIS.lstResults.FontItalic = "I"$THIS.cFontStyle

THIS.oBrowser.cFontFace = THIS.cFontFace
THIS.oBrowser.nFontSize = THIS.nFontSize + 3

IF TYPE("THIS.oLogBrowser") == 'O' AND !ISNULL(THIS.oLogBrowser)
	THIS.oLogBrowser.cFontFace = THIS.cFontFace
	THIS.oLogBrowser.nFontSize = THIS.nFontSize + 3
ENDIF



ENDPROC
PROCEDURE showdetail
* Abstract:
*   Show the code where the reference was found
*	in the browser window
*
* Parameters:
*	[cSetID] = show information on file rather than code references
*	[lShowSummary] = TRUE to show summary info rather than Abstract
#include "foxref.h"
LPARAMETERS cSetID, lShowSummary
LOCAL nSelect
LOCAL cHTML
LOCAL cHTMLCode
LOCAL cHTMLErrors
LOCAL nSelect
LOCAL cOptions
LOCAL cSummary
LOCAL nCnt
LOCAL i
LOCAL cHTMLFragment
LOCAL ARRAY aPropInfo[1]

IF !THIS.oBrowser.Visible
	RETURN
ENDIF

cHTML = ''
cHTMLErrors = ''

IF VARTYPE(cSetID) <> 'C'
	cSetID = THIS.cCurrentSetID
ENDIF

nSelect = SELECT()


IF THIS.oTree.Nodes.Count > 1
	IF THIS.cCurrentRefType == REFTYPE_LOG
		IF cSetID <> "ALL"
			SELECT ;
			  RefTable.Symbol, ;
			  RefTable.TimeStamp ;
			 FROM (THIS.oFoxRef.RefTable) RefTable ;
			 WHERE ;
			   SetID == cSetID AND ;
			   RefType == REFTYPE_LOG AND ;
			   !RefTable.Inactive ;
			 INTO CURSOR FoxCodeCursor
			IF _TALLY > 0
				cHTML = cHTML + [<div><table border="0" cellspacing="1" cellpadding="0">] + ;
				 [<tr><td><b>] + THIS.oBrowser.GetFontTag() + REPLACEMENTTEXT_LOC + [:</font></b></td><td>] + THIS.oBrowser.GetFontTag() + [&nbsp;] + FoxCodeCursor.Symbol + [</font></td></tr>] + ;
				 [<tr><td><b>] + THIS.oBrowser.GetFontTag() + DATETIME_LOC + [:</font></b></td><td>] + THIS.oBrowser.GetFontTag() + [&nbsp;] + TRANSFORM(FoxCodeCursor.TimeStamp) + [</font></td></tr>] + ;
				 [</table>]
			ENDIF
		ENDIF		
	ELSE
		IF cSetID == "ALL"
			cHTML = cHTML + ;
			  "<b>" + THIS.oBrowser.GetFontTag() + ALLRESULTS_LOC + "</font></b>"
		ELSE
			SELECT ;
			  RefTable.RefType, ;
			  RefTable.Abstract, ;
			  RefTable.Symbol, ;
			  RefTable.ClassName, ;
			  FileTable.Folder, ;
			  FileTable.Filename, ;
			  PADR(FileTable.Folder, 240) AS SortFolder ;
			 FROM (THIS.oFoxRef.RefTable) RefTable LEFT OUTER JOIN (THIS.oFoxRef.FileTable) FileTable ON RefTable.FileID == FileTable.UniqueID ;
			 WHERE ;
			   SetID == cSetID AND ;
			   (RefType == REFTYPE_SEARCH OR RefType == REFTYPE_ERROR) AND ;
			   !RefTable.Inactive ;
			 ORDER BY SortFolder, Filename ;
			 INTO CURSOR FoxCodeCursor

			LOCATE FOR RefType == REFTYPE_SEARCH
			IF FOUND()
				cHTML = cHTML + [<div><table border="0" cellspacing="1" cellpadding="0">]
				IF THIS.oFoxRef.ProjectFile == PROJECT_GLOBAL
					cHTML = cHTML + "<tr><td><b>" + THIS.oBrowser.GetFontTag() + FOLDER_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + [&nbsp;] + RTRIM(FoxCodeCursor.ClassName) + "</font></td></tr>"
				ELSE
					cHTML = cHTML + "<tr><td><b>" + THIS.oBrowser.GetFontTag() + PROJECT_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + [&nbsp;] + RTRIM(FoxCodeCursor.ClassName) + "</font></td></tr>"
				ENDIF

				* show the search criteria
				cOptions = THIS.oFoxRef.ParseAbstract(FoxCodeCursor.Abstract, "CRITERIA")
				cHTML = cHTML + ;
				  "<tr><td><b>" + THIS.oBrowser.GetFontTag() + SEARCHOPTIONS_LOC + ":</font></b></td><td>" + THIS.oBrowser.GetFontTag() + ;
				  [&nbsp;] + THIS.oBrowser.HTMLEncode(IIF(EMPTY(cOptions), '', cOptions + " - ") + ;
				  THIS.oFoxRef.ParseAbstract(FoxCodeCursor.Abstract, "FILETYPES")) + ;
				  "</font></td></tr>"
				cHTML = cHTML + [</table></div>]
			ENDIF

			IF lShowSummary AND EMPTY(THIS.cCurrentFileID)
				* gather any errors encountered
				SELECT FoxCodeCursor
				SCAN ALL FOR RefType == REFTYPE_ERROR
					cHTMLErrors = cHTMLErrors + ;
					 [<div nowrap style="text-indent:15">] + ;
					 IIF(ISNULL(FoxCodeCursor.Filename), '', ADDBS(RTRIM(FoxCodeCursor.Folder)) + RTRIM(FoxCodeCursor.Filename) + ": ") + ;
					 FoxCodeCursor.Abstract + [</div>]
				ENDSCAN
			ENDIF
		ENDIF

		IF lShowSummary
			IF EMPTY(THIS.cCurrentFileID)
				DO CASE
				CASE THIS.nFileCnt == 0 AND THIS.nRefCnt == 0
					cSummary = SUMMARY_NOMATCHES_LOC

				CASE THIS.nFileCnt == 1 AND THIS.nRefCnt == 1
					cSummary = SUMMARY4_LOC

				CASE THIS.nFileCnt == 1 AND THIS.nRefCnt <> 1
					cSummary = SUMMARY3_LOC

				CASE THIS.nFileCnt <> 1 AND THIS.nRefCnt == 1
					cSummary = SUMMARY2_LOC

				OTHERWISE			
					cSummary = SUMMARY1_LOC
				ENDCASE
				cSummary = STRTRAN(cSummary, "<FILECNT>", TRANSFORM(THIS.nFileCnt))
			ELSE
				* show summary for a single file
				DO CASE
				CASE THIS.nRefCnt == 1
					cSummary = SUMMARY5_LOC
				OTHERWISE
					cSummary = SUMMARY6_LOC
				ENDCASE
				IF USED("FoxRefCursor") AND !EOF("FoxRefCursor")
					cSummary = STRTRAN(cSummary, "<FILENAME>", ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename))
				ENDIF
			ENDIF
			cSummary = STRTRAN(cSummary, "<MATCHCNT>", TRANSFORM(THIS.nRefCnt))
			
			cHTML = cHTML + IIF(EMPTY(cHTML), '', [<hr>]) + ;
				THIS.oBrowser.GetFontTag() + THIS.oBrowser.HTMLEncode(cSummary) + "</font>"
		ELSE
			cHTMLCode = FoxRefCursor.Abstract

			SELECT Symbol, ColPos, MatchLen, ProcLineNo ;
			 FROM (THIS.oFoxRef.RefTable) RefTable ;
			 WHERE ;
			   RefID == FoxRefCursor.RefID AND ;
			   RefType == REFTYPE_RESULT AND ;
			   !RefTable.Inactive ;
			 ORDER BY ProcLineNo DESCEND, ColPos DESCEND ;
			 INTO CURSOR FoxResultsCursor
			IF RECCOUNT("FoxResultsCursor") > 0

				IF FoxRefCursor.FindType == FINDTYPE_PROPERTYVALUE
					cHTMLCode = ''
					nCnt = ALINES(aPropInfo, FoxRefCursor.Abstract)
					FOR i = 1 TO nCnt
						cHTMLFragment = aPropInfo[i]

						SCAN ALL FOR FoxResultsCursor.ProcLineNo == i
							cHTMLFragment = THIS.oBrowser.HTMLEncode(LEFT(cHTMLFragment, FoxResultsCursor.ColPos - 1)) + [<font color="blue">] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLFragment, FoxResultsCursor.ColPos, FoxResultsCursor.MatchLen)) + [</font>] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLFragment, FoxResultsCursor.ColPos + FoxResultsCursor.MatchLen))
						ENDSCAN

						cHTMLCode = cHTMLCode + IIF(i == 1, '', "<br>") + cHTMLFragment
					ENDFOR
				ELSE
					cHTMLCode = THIS.oBrowser.HTMLEncode(LEFT(cHTMLCode, FoxResultsCursor.ColPos - 1)) + [<font color="blue">] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLCode, FoxResultsCursor.ColPos, FoxResultsCursor.MatchLen)) + [</font>] + THIS.oBrowser.HTMLEncode(SUBSTR(cHTMLCode, FoxResultsCursor.ColPos + FoxResultsCursor.MatchLen))
				ENDIF
			ENDIF

			* Display file info
			IF !EMPTY(cHTMLCode)
				cHTML = cHTML + IIF(EMPTY(cHTML), '', [<hr>]) + ;
				 [<div><b>] + ;
				 THIS.oBrowser.HTMLEncode(ADDBS(RTRIM(FoxRefCursor.Folder)) + RTRIM(FoxRefCursor.Filename) + ;
				 " - " + ;
				 THIS.GetClassMethodDescription()) + ;
				 [:</b></div>] + ;
				 [<div nowrap style="text-indent:15">] + cHTMLCode + [</div>]
			ENDIF

		ENDIF

		IF !EMPTY(cHTMLErrors)
			cHTML = cHTML + [<br><div><b><font color="red">] + ERRORHEADER_LOC + [</font></b></div>] + cHTMLErrors
		ENDIF
	ENDIF
ENDIF

IF EMPTY(cHTML)
	THIS.oBrowser.Write([<p>&nbsp;</p>])
ELSE
	THIS.oBrowser.Write(cHTML)
ENDIF

SELECT (nSelect)

ENDPROC
PROCEDURE showhelp
* Abstract:
*   Display Help for Reference program
*
* Parameters:
*	None

HELP ID THISFORM.HelpContextID 

ENDPROC
PROCEDURE showrightclickmenu
#include "foxref.h"
LPARAMETERS nRow, nCol
LOCAL oTempFoxRef

* so that we can use it in our ON SELECTION BAR command
oTempFoxRef = THISFORM

IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
	nRow = MROW("")
	nCol = MCOL("")
ENDIF

DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"

DEFINE BAR 100 OF shortcut PROMPT MENU_DESCRIPTIONS_LOC
DEFINE BAR 110 OF shortcut PROMPT MENU_ALWAYSONTOP_LOC
DEFINE BAR 120 OF shortcut PROMPT "\-"
DEFINE BAR 150 OF shortcut PROMPT MENU_REFRESH_LOC PICTURE "bitmaps\refresh.bmp"
DEFINE BAR 170 OF shortcut PROMPT "\-"
DEFINE BAR 180 OF shortcut PROMPT MENU_PRINT_LOC PICTRES _mfi_sysprint
DEFINE BAR 190 OF shortcut PROMPT MENU_EXPORT_LOC PICTURE "bitmaps\export.bmp"
DEFINE BAR 200 OF shortcut PROMPT "\-"
DEFINE BAR 210 OF shortcut PROMPT MENU_OPTIONS_LOC PICTURE "bitmaps\propsht.bmp"

IF THIS.oBrowser.Visible
	SET MARK OF BAR 100 OF shortcut TO .T.
ENDIF
IF THIS.AlwaysOnTop
	SET MARK OF BAR 110 OF shortcut TO .T.
ENDIF

ON SELECTION BAR 100 OF shortcut oTempFoxRef.ToggleDetails()
ON SELECTION BAR 110 OF shortcut oTempFoxRef.ToggleAlwaysOnTop()
ON SELECTION BAR 150 OF shortcut oTempFoxRef.RefreshResults()
ON SELECTION BAR 180 OF shortcut oTempFoxRef.PrintResults()
ON SELECTION BAR 190 OF shortcut oTempFoxRef.ExportResults()
ON SELECTION BAR 210 OF shortcut oTempFoxRef.Options()

ACTIVATE POPUP shortcut

RELEASE POPUP shortcut


ENDPROC
PROCEDURE showwarning
LOCAL lcText
lcText = "<html>&nbsp;"
IF EMPTY(THIS.lstResults.List(THIS.lstResults.ListIndex,2))

ELSE
	LOCAL lnArea,llClose
	llClose = .F.
	lnArea = SELECT()
	IF NOT USED("CODERULE")
		llClose = .T.
		USE _SCREEN._analyst.cHomeDir+"CODERULE" AGAIN SHARED IN 0
	ENDIF
	SELECT CODERULE
	LOCATE FOR uniqueID = THIS.lstResults.List(THIS.lstResults.ListIndex,2)
	IF FOUND()
		lcText = lcText + TRIM(descript)
	ENDIF
	IF llClose
		USE
	ENDIF

	SELECT (lnArea)
ENDIF
lcText = lcText + "</html>"
THIS.oBrowser.Write(lcText)

ENDPROC
PROCEDURE sortby
* Abstract:
*   Sort on a specific column.
*
* Parameters:
*   <cColumn> = column to sort on
*	[lNoRefresh] = TRUE to not refresh
LPARAMETERS cColumn, lNoRefresh

IF VARTYPE(cColumn) <> 'C'
	cColumn = THIS.cSortBy
ENDIF

THIS.cSortExtraColumns = ''

cColumn = UPPER(cColumn)
DO CASE
CASE cColumn == "CHECKED"
	THIS.cSortColumns = "Checked DESCEND, SortFolder, FileTable.Filename, RefTable.LineNo"

CASE cColumn == "CLASS"
	THIS.cSortColumns = "ClassNameSort, ProcNameSort, FileTable.Filename, RefTable.LineNo"
	THIS.cSortExtraColumns = "PADR(RefTable.ClassName, 100) AS ClassNameSort, PADR(RefTable.ProcName, 100) AS ProcNameSort"

CASE cColumn == "METHOD"
	THIS.cSortColumns = "MethodNameSort, ClassNameSort, FileTable.Filename, RefTable.LineNo"
	THIS.cSortExtraColumns = "PADR(IIF('.' $ RefTable.ProcName, JUSTEXT(RefTable.ProcName), RefTable.ProcName), 100) AS MethodNameSort, PADR(RefTable.ClassName, 100) AS ClassNameSort"

CASE cColumn == "FILENAME"
	THIS.cSortColumns = "FileTable.Filename, SortFolder, RefTable.LineNo"

CASE cColumn == "LOCATION"
	THIS.cSortColumns = "SortFolder, FileTable.Filename, RefTable.LineNo"

CASE cColumn == "LINENO"
	THIS.cSortColumns = "RefTable.LineNo, SortFolder, FileTable.Filename"

CASE cColumn == "FILETYPE"
	THIS.cSortColumns = "SortFileType, FileTable.Filename, RefTable.LineNo"

OTHERWISE
	THIS.cSortColumns = "FileTable.Folder, FileTable.Filename, RefTable.LineNo"
	THIS.cSortBy = "FILENAME"
ENDCASE

THIS.cSortBy = cColumn

IF !EMPTY(cColumn) AND !lNoRefresh
	THIS.LoadResults(THIS.cCurrentRefType, THIS.cCurrentSetID, THIS.cCurrentFileID)

*!*		THIS.cEvent = "SORT"
*!*		THIS.tmrEvent.Enabled= .T.
ENDIF


ENDPROC
PROCEDURE striptabs
#include "foxref.h"
LPARAMETERS cAbstract

m.cAbstract = ALLTRIM(CHRTRAN(RTRIM(m.cAbstract), TAB, ' '))

RETURN LEFT(m.cAbstract, MAX_LINE_LENGTH)


ENDPROC
PROCEDURE switchpanes
* Switch from one pane to the next
LPARAMETERS oSourcePane

IF VARTYPE(oSourcePane) <> 'O'
	THIS.oTree.SetFocus()
ELSE
	IF oSourcePane.Name = "oTree"
		THIS.grdResults.SetFocus()
	ELSE
		THIS.oTree.SetFocus()
	ENDIF
ENDIF
	
ENDPROC
PROCEDURE synctree
* Sync tree to current SetID
FOR EACH oNode IN THIS.oTree.Nodes
	IF SUBSTR(oNode.Key, 3, 10) == THIS.cCurrentSetID
		oNode.Selected = .T.
		oNode.EnsureVisible()
		EXIT
	ENDIF
ENDFOR


ENDPROC
PROCEDURE togglealwaysontop
* Change the AlwaysOnTop property for the form
THIS.AlwaysOnTop = !THIS.AlwaysOnTop
ENDPROC
PROCEDURE togglecolumn
* Toggle display of columns
LPARAMETERS cColumn

DO CASE
CASE cColumn == "SYMBOL"
	THIS.lShowColumnSymbol = !THIS.lShowColumnSymbol
CASE cColumn == "ABSTRACT"
	THIS.lShowColumnAbstract = !THIS.lShowColumnAbstract
ENDCASE

IF TYPE("THIS.grdResults.colSymbol") == 'O' AND !ISNULL(THIS.grdResults.colSymbol)
	THIS.grdResults.colSymbol.Header1.Visible = THIS.lShowColumnSymbol
	THIS.grdResults.colSymbol.Text1.Visible = THIS.lShowColumnSymbol
	THIS.grdResults.colSymbol.Visible = THIS.lShowColumnSymbol
ENDIF

ENDPROC
PROCEDURE toggledetails
* Toggle displaying the details
THIS.oBrowser.Visible = !THIS.oBrowser.Visible
IF THIS.oBrowser.Visible
	THIS.ShowDetail(, .T.)
ENDIF
THIS.shpSplitterHor.Visible = THIS.oBrowser.Visible
THIS.ResizeForm(.T.)

ENDPROC
PROCEDURE togglesortmostrecent
THIS.oFoxRef.SortMostRecentFirst = !THIS.oFoxRef.SortMostRecentFirst
THIS.SetRefTable(THIS.oFoxRef.cSetID, .F.)
ENDPROC
PROCEDURE treerightclickmenu
#include "foxref.h"
LPARAMETERS nRow, nCol
LOCAL oTempFoxRef

* so that we can use it in our ON SELECTION BAR command
oTempFoxRef = THISFORM

IF VARTYPE(nRow) <> 'N' OR VARTYPE(nCol) <> 'N'
	nRow = MROW("")
	nCol = MCOL("")
ENDIF

DEFINE POPUP shortcut SHORTCUT RELATIVE FROM nRow, nCol IN WINDOW "Screen"

DEFINE BAR 1 OF shortcut PROMPT MENU_OPEN_LOC PICTRES _mfi_open STYLE "B"

ON SELECTION BAR 1 OF shortcut oTempFoxRef.OpenFile()

ACTIVATE POPUP shortcut

RELEASE POPUP shortcut

ENDPROC
PROCEDURE updatecheckmarks
* Abstract:
*   Copy checkmarks from FoxRefCursor to underlying table.
*
* Parameters:
*	[lClear] = clear all checkmarks
LPARAMETERS lClear
LOCAL nSelect
LOCAL cAlias

nSelect = SELECT()

cAlias = THIS.GetTempAlias(THIS.oFoxRef.RefTable)
IF !USED(cAlias)
	USE (THIS.oFoxRef.RefTable) IN 0 SHARED AGAIN ALIAS (m.cAlias)
ENDIF

IF !lClear AND USED("FoxRefCursor")
	SELECT (m.cAlias)
	SET ORDER TO RefID
	SELECT FoxRefCursor
	SCAN ALL FOR !ISNULL(Checked)
		IF SEEK(FoxRefCursor.RefID, m.cAlias, "RefID")
			SELECT (m.cAlias)
			SCAN REST WHILE RefID == FoxRefCursor.RefID
				IF Checked <> FoxRefCursor.Checked
					REPLACE Checked WITH FoxRefCursor.Checked IN (m.cAlias)
				ENDIF
			ENDSCAN
		ENDIF
	ENDSCAN
ELSE
	UPDATE (THIS.oFoxRef.RefTable) SET Checked = .F. WHERE !ISNULL(Checked) AND Checked
ENDIF


SELECT (nSelect)

ENDPROC
PROCEDURE updatecontrols
* Abstract:
*   Called to update the buttons, etc on the form.
*
* Parameters:
*	None

THIS.cmdRefresh.Enabled = THIS.oTree.Nodes.Count > 1
THIS.cmdPrint.Enabled = THIS.oTree.Nodes.Count > 1
THIS.cmdExport.Enabled = THIS.oTree.Nodes.Count > 1

ENDPROC
PROCEDURE updategrid
#include "foxref.h"
LPARAMETERS oNode
LOCAL cRefType
LOCAL cNodeLevel
LOCAL cSetID

IF VARTYPE(oNode) <> 'O'
	oNode = THIS.oTree.SELECTEDITEM
ENDIF

IF VARTYPE(oNode) == 'O'
	cRefType   = LEFT(oNode.KEY, 1)
	cNodeLevel = SUBSTR(oNode.KEY, 2, 1)

	IF cRefType == REFTYPE_LOG
		cSetID = SUBSTR(oNode.KEY, 3, 10)
		THIS.LoadResults(cRefType, cSetID)
	ELSE
		DO CASE
		CASE oNode.KEY="Errors"
			THIS.lstResults.Clear()
			LOCAL lni
			FOR lni = 1 TO MEMLINES(_SCREEN._analyst.cError)
				THIS.lstResults.AddItem(MLINE(_SCREEN._analyst.cError,lni))
				THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = ""
			ENDFOR
		CASE oNode.KEY="Warnings"
			THIS.lstResults.CLEAR()

				LOCAL la(1)
				la(1) = 0
				LOCAL lcF
				lcF = ""
				IF NOT EMPTY(THIS.cFilter)
					lcF = " AND cwarning='"+THIS.cFilter+"'"
				ENDIF
				SELECT COUNT(*) FROM (THIS.ocode.canalysisCursor) ;
					WHERE NOT EMPTY(warnings) ;
					&lcF ;
					INTO ARRAY la
				THIS.ntotalfound = la(1)

				THIS.lstResults.ADDITEM("A total of "+LTRIM(STR(THIS.nTotalFound ))+" warnings were found.")
			THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = ""
CASE oNode.Children>0
	** Likely a program listing
	lcFileType = TRIM(oNode.KEY)
			LOCAL la(1)
			la(1) = ""
			LOCAL lcF
			lcF = ""
			IF NOT EMPTY(THIS.cFilter)
				lcF = " AND cwarning='"+THIS.cFilter+"'"
			ENDIF

			SELECT warnings,cwarning,cprog,nline,cclass,cFunc FROM (THIS.oCode.Canalysiscursor) ;
				WHERE cfiletype = lcFileType AND NOT EMPTY(warnings ) ;
				&lcF ;
				INTO ARRAY la
			THIS.lstResults.CLEAR()
			FOR lni = 1 TO ALEN(la,1)
				IF NOT EMPTY(la(lni,1))
					THIS.lstResults.ADDITEM(la(lni,1))
					IF NOT EMPTY(la(lni,2))
						THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = la(lni,2)
					ELSE
						THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = ""
					ENDIF
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,3) = la(lni,3)
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,4) = STR(la(lni,4))
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,5) = la(lni,5)
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,6) = la(lni,6)
						ENDIF

			ENDFOR
			*!*				lcFile = THIS.aFiles(ASCAN(THIS.aFiles,oNode.key)-1)
			*!*				LOCAL lni
			*!*				THIS.lstResults.Clear()
			*!*				FOR lni = 1 TO ALEN(_SCREEN._analyst.awarnings,1)
			*!*					IF EMPTY(_SCREEN._analyst.awarnings(lni,1))
			*!*						LOOP
			*!*					ENDIF
			*!*					IF _SCREEN._analyst.awarnings(lni,2)=lcFile
			*!*						THIS.lstResults.AddItem(_SCREEN._analyst.awarnings(lni,1))
			*!*						IF NOT EMPTY(_SCREEN._analyst.awarnings(lni,3))
			*!*						THIS.lstResults.List(THIS.lstResults.ListCount,2) = _SCREEN._analyst.awarnings(lni,3)
			*!*						ELSE
			*!*	 					THIS.lstResults.List(THIS.lstResults.ListCount,2) = ""
			*!*	ENDIF
			*!*					ENDIF
			*!*				ENDFOR
	
		OTHERWISE
			lcFile = TRIM(oNode.KEY)
			LOCAL la(1)
			la(1) = ""
			LOCAL lcF
			lcF = ""
			IF NOT EMPTY(THIS.cFilter)
				lcF = " AND cwarning='"+THIS.cFilter+"'"
			ENDIF

			SELECT warnings,cwarning,cprog,nline,cclass,cFunc FROM (THIS.oCode.Canalysiscursor) ;
				WHERE JUSTFNAME(UPPER(cprog)) = lcFile AND NOT EMPTY(warnings ) ;
				&lcF ;
				INTO ARRAY la
			THIS.lstResults.CLEAR()
			FOR lni = 1 TO ALEN(la,1)
				IF NOT EMPTY(la(lni,1))
					THIS.lstResults.ADDITEM(la(lni,1))
					IF NOT EMPTY(la(lni,2))
						THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = la(lni,2)
					ELSE
						THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,2) = ""
					ENDIF
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,3) = la(lni,3)
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,4) = STR(la(lni,4))
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,5) = la(lni,5)
					THIS.lstResults.LIST(THIS.lstResults.LISTCOUNT,6) = la(lni,6)
						ENDIF

			ENDFOR
			*!*				lcFile = THIS.aFiles(ASCAN(THIS.aFiles,oNode.key)-1)
			*!*				LOCAL lni
			*!*				THIS.lstResults.Clear()
			*!*				FOR lni = 1 TO ALEN(_SCREEN._analyst.awarnings,1)
			*!*					IF EMPTY(_SCREEN._analyst.awarnings(lni,1))
			*!*						LOOP
			*!*					ENDIF
			*!*					IF _SCREEN._analyst.awarnings(lni,2)=lcFile
			*!*						THIS.lstResults.AddItem(_SCREEN._analyst.awarnings(lni,1))
			*!*						IF NOT EMPTY(_SCREEN._analyst.awarnings(lni,3))
			*!*						THIS.lstResults.List(THIS.lstResults.ListCount,2) = _SCREEN._analyst.awarnings(lni,3)
			*!*						ELSE
			*!*	 					THIS.lstResults.List(THIS.lstResults.ListCount,2) = ""
			*!*	ENDIF
			*!*					ENDIF
			*!*				ENDFOR
		ENDCASE

		IF .F.
			DO CASE
				CASE cNodeLevel == '0'
					THIS.LoadResults(REFTYPE_SEARCH)

				CASE cNodeLevel == '1'
					cSetID = SUBSTR(oNode.KEY, 3, 10)
					THIS.LoadResults(cRefType, cSetID)

				CASE cNodeLevel == '2'
					cSetID = SUBSTR(oNode.KEY, 3, 10)
					THIS.LoadResults(cRefType, cSetID, SUBSTR(oNode.KEY, 13))
			ENDCASE
		ENDIF
	ENDIF
ENDIF

ENDPROC
[END METHODS]
[START RESERVED3]
*analyzefile 
*clearnode 
*clearresults 
*collapseall 
*copyreference Copy reference to clipboard.
*cvtdatetime 
*deselectall 
*expandall 
*expandnode 
*exportresults 
*fillrules 
*getclassmethoddescription 
*gettempalias 
*gotodefinition 
*gotoreference 
*importresults Allows users to restore  and review a previous set of results
*isitemschecked 
*loadfiles 
*loadnodes 
*loadresults 
*onsortby 
*openfile 
*options 
*printresults 
*refreshresults 
*resizeform 
*resultsrightclickmenu 
*saveformat 
*saveposition 
*selectall 
*setfont 
*setfonts Sets the fonts on the objects
*setreftable 
*showdetail 
*showhelp 
*showrightclickmenu 
*showwarning 
*sortby 
*striptabs 
*switchpanes 
*synctree 
*togglealwaysontop 
*togglecolumn 
*toggledetails 
*togglesortmostrecent 
*treerightclickmenu 
*updatecheckmarks 
*updatecontrols 
*updategrid 
^afiles[1,1] 
_memberdata XML Metadata for customizable properties
ccurrentfileid
ccurrentreftype
ccurrentsetid
cevent
cfilter
cfontface
cfontstyle
cprojectfile
creftable
csortby
csortcolumns
csortextracolumns
linevent
lnonodeclick
lpopupset
lshowcolumnabstract
lshowcolumnsymbol
lshowdistinctmethodline Show method/line separate from class name.
lshowfilename
lshowrefsperline
ncolfilenamewidth
nfilecnt
nfilenamecolumnorder
nfontsize
nrefcnt
ntotalfound
ocode Pointer to Code ANalysis Object
ofoxref
[END RESERVED3]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1TD111SH6
[CLASS] cfoxcombo
[CLASSLOC] foxctrls.vcx
[BASECLASS] combobox
[OBJNAME] cboRules
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Height = 21
Left = 541
Name = "cboRules"
Style = 2
ToolTipText = "Filter list of displayed warnings "
Top = 2
Width = 136
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
THISFORM.cFilter = THIS.List(THIS.ListIndex,2)
THISFORM.LoadNodes()
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdExport
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = " \<Export"
Height = 22
Left = 322
Name = "cmdExport"
SpecialEffect = 2
StatusBarText = "Export results"
TabIndex = 7
ToolTipText = "Export Results"
Top = 1
Width = 71
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THIS.Parent.ExportResults()



ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0JA0YSG4V
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdFind
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = "\<Analyze..."
Height = 22
Left = 48
Name = "cmdFind"
SpecialEffect = 2
StatusBarText = "Perform a new analysis"
TabIndex = 3
ToolTipText = "New Analysis"
Top = 1
Width = 57
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THIS.Parent.AnalyzeFile()


ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdHelp
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = " \<Help"
Height = 22
Left = 466
Name = "cmdHelp"
SpecialEffect = 2
StatusBarText = "Code References Help"
TabIndex = 9
ToolTipText = "Code References Help"
Top = 1
Visible = .F.
Width = 71
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THIS.Parent.ShowHelp()




ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0M0137AMX
[CLASS] commandbutton
[BASECLASS] commandbutton
[OBJNAME] cmdOpen
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = ""
FontName = "MS Sans Serif"
FontSize = 8
Height = 22
Left = 3
Name = "cmdOpen"
Picture = bitmaps\open.bmp
SpecialEffect = 2
TabIndex = 1
ToolTipText = "Open a previously saved analyst result"
Top = 1
Width = 22
ZOrderSet = 0
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THISFORM.ImportResults()

ENDPROC
PROCEDURE GotFocus
DODEFAULT()

THIS.Parent.cmdOpenDropdown.VisualEffect= 1

ENDPROC
PROCEDURE KeyPress
LPARAMETERS nKeyCode, nShiftAltCtrl

IF (nKeyCode = 93 and nShiftAltCtrl = 1) OR (nKeyCode = 160 and nShiftAltCtrl = 4)
	* THIS.Parent.cmdOpenDropdown.Click
	NODEFAULT
ENDIF

ENDPROC
PROCEDURE LostFocus
DODEFAULT()

THIS.Parent.cmdOpenDropdown.VisualEffect= 0

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

DODEFAULT(nButton, nShift, nXCoord, nYCoord)

THIS.Parent.cmdOpenDropdown.VisualEffect= 1

ENDPROC
PROCEDURE MouseLeave
LPARAMETERS nButton, nShift, nXCoord, nYCoord

DODEFAULT(nButton, nShift, nXCoord, nYCoord)

THIS.Parent.cmdOpenDropdown.VisualEffect= 0

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0M0137AMY
[CLASS] commandbutton
[BASECLASS] commandbutton
[OBJNAME] cmdOpenDropdown
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = ""
Height = 22
Left = 25
Name = "cmdOpenDropdown"
Picture = bitmaps\downarrow.bmp
SpecialEffect = 2
TabIndex = 2
Top = 1
Visible = .F.
Width = 14
ZOrderSet = 1
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
#include "foxref.h"
LOCAL nBar
LOCAL cProjName
LOCAL nProjectIndex
LOCAL cExecCommand
LOCAL cProjectFile
LOCAL oTempFoxRef

DODEFAULT()

m.cProjectFile = THISFORM.oFoxRef.ProjectFile && save current set so we know if it changed or not

* so that we can use it in our ON SELECTION BAR command
oTempFoxRef = THISFORM.oFoxRef

m.nRow = MROW('')
m.nCol = MCOL('')
DEFINE POPUP shortcut SHORTCUT RELATIVE FROM m.nRow, m.nCol IN WINDOW "Screen"

* DEFINE POPUP shortcut SHORTCUT FROM WLROW(THISFORM.Name) + ((THIS.Height + THIS.Top + SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1)), WLCOL(THISFORM.Name) + (THIS.Left + SYSMETRIC(3))/(FONTMETRIC(6))

nBar = 1
FOR nProjectIndex = 1 TO Application.Projects.Count
	cProjName = LOWER(Application.Projects(nProjectIndex).Name)
	cExecCommand = "oTempFoxRef.SetProject([" + cProjName + "])"

	DEFINE BAR (nBar) OF shortcut PROMPT cProjName
	ON SELECTION BAR (nBar) OF shortcut &cExecCommand

	IF cProjName == LOWER(THISFORM.oFoxRef.ProjectFile)
		SET MARK OF BAR (nBar) OF shortcut TO .T.
	ENDIF

	nBar = nBar + 1	
ENDFOR

IF nBar > 1
	DEFINE BAR (nBar) OF shortcut PROMPT "\-"
	nBar = nBar + 1
ENDIF

DEFINE BAR (nBar) OF shortcut PROMPT SCOPE_FOLDER_LOC
ON SELECTION BAR (nBar) OF shortcut oTempFoxRef.SetProject(PROJECT_GLOBAL)
IF PROJECT_GLOBAL == THISFORM.oFoxRef.ProjectFile
	SET MARK OF BAR (nBar) OF shortcut TO .T.
ENDIF


ACTIVATE POPUP shortcut

RELEASE POPUP shortcut

IF !(THISFORM.oFoxRef.ProjectFile == m.cProjectFile)
	THISFORM.SetRefTable(THISFORM.oFoxRef.cSetID, .F.)
ENDIF

ENDPROC
PROCEDURE GotFocus
DODEFAULT()

THIS.Parent.cmdOpen.VisualEffect= 1

ENDPROC
PROCEDURE LostFocus
DODEFAULT()

THIS.Parent.cmdOpen.VisualEffect= 0

ENDPROC
PROCEDURE MouseEnter
LPARAMETERS nButton, nShift, nXCoord, nYCoord

DODEFAULT(nButton, nShift, nXCoord, nYCoord)

THIS.Parent.cmdOpen.VisualEffect= 1

ENDPROC
PROCEDURE MouseLeave
LPARAMETERS nButton, nShift, nXCoord, nYCoord

DODEFAULT(nButton, nShift, nXCoord, nYCoord)

THIS.Parent.cmdOpen.VisualEffect= 0

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdOptions
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = " \<Options"
Height = 22
Left = 394
Name = "cmdOptions"
SpecialEffect = 2
StatusBarText = "Display the options dialog"
TabIndex = 8
ToolTipText = "Code Analyst Options"
Top = 1
Width = 71
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
LOCAL lc
lc = _SCREEN._analyst.cFontString
THIS.Parent.Options()

IF _SCREEN._analyst.cFontString <> lc
	** Change fonts
	THISFORM.SetFont()
	
ENDIF
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdPrint
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = " \<Print"
Height = 22
Left = 250
Name = "cmdPrint"
SpecialEffect = 2
StatusBarText = "Print results"
TabIndex = 6
ToolTipText = "Print Results"
Top = 1
Width = 71
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THIS.Parent.PrintResults()



ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cfoxbutton
[CLASSLOC] foxctrls.vcx
[BASECLASS] commandbutton
[OBJNAME] cmdRefresh
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Caption = " Re\<fresh"
Height = 22
Left = 106
Name = "cmdRefresh"
SpecialEffect = 2
StatusBarText = "Refresh the currently selected result set"
TabIndex = 4
ToolTipText = "Refresh"
Top = 1
Width = 71
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
THIS.Parent.RefreshResults()

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1T00GUAY8
[CLASS] listbox
[BASECLASS] listbox
[OBJNAME] lstResults
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Height = 272
Left = 180
Name = "lstResults"
Top = 24
Width = 547
[END PROPERTIES]
[START METHODS]
PROCEDURE DblClick
THISFORM.GotoReference()
ENDPROC
PROCEDURE InteractiveChange
THISFORM.ShowWarning()
ENDPROC
PROCEDURE MouseDown
LPARAMETERS nButton, nShift, nXCoord, nYCoord

IF .F. && Functionality not ready yet nbutton=2 AND THIS.ListIndex<>0
	IF MESSAGEBOX("Do you want to add this issue to your Task list",4+32,"Code Analyst")=6
	
	ENDIF
ENDIF
ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] cwebbrowser
[CLASSLOC] foxref.vcx
[BASECLASS] olecontrol
[OBJNAME] oBrowser
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Height = 83
Left = 2
Name = "oBrowser"
TabIndex = 12
Top = 299
Width = 725
[END PROPERTIES]
[BINSTART OLE]
CHECKSUM=28724
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=34400
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] olecontrol
[BASECLASS] olecontrol
[OBJNAME] oTree
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Height = 271
Left = 2
Name = "oTree"
TabIndex = 10
Top = 25
Width = 172
[END PROPERTIES]
[START METHODS]
PROCEDURE Click
*** ActiveX Control Event ***

ENDPROC
PROCEDURE DblClick
*** ActiveX Control Event ***
LOCAL lcFile
lcFile = THIS.selecteditem.Key
LOCAL la(1)
la(1) = ""
SELECT DISTINCT cprog FROM (THISFORM.ocode.canalysisCursor) ;
	WHERE JUSTFNAME(UPPER(cProg))==TRIM(lcFile) ;
	INTO ARRAY la
IF NOT EMPTY(la(1))
THISFORM.GotoReference(la(1))

ENDIF
ENDPROC
PROCEDURE Expand
*** ActiveX Control Event ***
LPARAMETERS oNode

THIS.Parent.ExpandNode(oNode)


ENDPROC
PROCEDURE Init
THIS.AddProperty("lRightClick", .F.)
ENDPROC
PROCEDURE KeyDown
*** ActiveX Control Event ***
LPARAMETERS keycode, shift
LOCAL nTop
LOCAL nLeft

DO CASE
CASE (keycode=121 and shift=1) OR (keycode=93 and shift=0)
	THISFORM.ScaleMode = 0
	nTop = WLROW(THISFORM.Name) + THIS.Top + ((SYSMETRIC(9) + SYSMETRIC(4)) / FONTMETRIC(1))
	nLeft = WLCOL(THISFORM.Name) + THIS.Left + (SYSMETRIC(3) / FONTMETRIC(6))
	THISFORM.ScaleMode = 3

	THISFORM.TreeRightClickMenu(nTop, nLeft)

CASE (keycode=46 and shift=0)  && delete key
	THIS.Parent.ClearNode()

CASE PCOUNT() == 2 AND shift = 0
	DO CASE
	CASE keycode = 13    && enter
		IF !EMPTY(THISFORM.cCurrentFileID)
			THISFORM.GotoReference()
		ENDIF

	CASE keycode = 116   && F5
		THISFORM.KeyPress(-4)

	CASE keycode = 117   && F6
		THISFORM.SwitchPanes(THIS)
	ENDCASE		

ENDCASE


ENDPROC
PROCEDURE KeyPress
*** ActiveX Control Event ***
LPARAMETERS keyascii

DO CASE
CASE keyascii == 27
	THISFORM.KeyPress(keyascii)
ENDCASE

ENDPROC
PROCEDURE MouseDown
*** ActiveX Control Event ***
LPARAMETERS button, shift, x, y

THIS.lRightClick = (Button == 2)


ENDPROC
PROCEDURE NodeClick
*** ActiveX Control Event ***
#include "foxref.h"
LPARAMETERS oNode

IF VARTYPE(oNode) == 'O'
	THIS.Parent.UpdateGrid(oNode)
ENDIF

IF THIS.lRightClick
	THIS.lRightClick = .F.

	THISFORM.cEvent = "RIGHTCLICKMENU"
	THISFORM.tmrEvent.Enabled = .T.
ENDIF

ENDPROC
[END METHODS]
[BINSTART OLE]
CHECKSUM=17032
[BINEND OLE]
[BINSTART OLE2]
CHECKSUM=40492
[BINEND OLE2]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0M0139DMW
[CLASS] shape
[BASECLASS] shape
[OBJNAME] Shape1
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Height = 20
Left = 43
Name = "Shape1"
SpecialEffect = 0
Top = 2
Width = 2
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] shape
[BASECLASS] shape
[OBJNAME] shpSplitter
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
BackStyle = 0
BorderStyle = 0
Height = 287
Left = 176
MousePointer = 9
Name = "shpSplitter"
Top = 25
Width = 4
[END PROPERTIES]
[START METHODS]
PROCEDURE MouseMove
LPARAMETERS nButton, nShift, nXCoord, nYCoord

IF nButton == 1
	IF BETWEEN(nXCoord, 20, THIS.Parent.Width - 50)
		THIS.left = nXCoord
		THIS.Parent.ResizeForm(.T.)
	ENDIF	
ENDIF

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0IS118P55
[CLASS] shape
[BASECLASS] shape
[OBJNAME] shpSplitterHor
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
BackStyle = 0
BorderStyle = 0
Height = 4
Left = 2
MousePointer = 7
Name = "shpSplitterHor"
Top = 295
Width = 726
[END PROPERTIES]
[START METHODS]
PROCEDURE MouseMove
LPARAMETERS nButton, nShift, nXCoord, nYCoord

IF nButton == 1
	IF BETWEEN(nYCoord, 100, THIS.Parent.Height - 20)
		THIS.Top = nYCoord
		THIS.Parent.ResizeForm(.T.)
	ENDIF	
ENDIF

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0JF11CLMB
[CLASS] timer
[BASECLASS] timer
[OBJNAME] tmrEvent
[PARENT] frmCodeAnalystResults
[START PROPERTIES]
Enabled = .F.
Height = 23
Interval = 5
Left = 672
Name = "tmrEvent"
Top = 0
Width = 23
[END PROPERTIES]
[START METHODS]
PROCEDURE Timer
THIS.Enabled = .F.
THIS.Reset()


IF !THIS.Parent.lInEvent
	m.lInEvent = .T.
	
	
	DO CASE
	CASE THIS.Parent.cEvent = "RIGHTCLICKMENU"
		THISFORM.TreeRightClickMenu()

	CASE THIS.Parent.cEvent = "SORT" OR THIS.Parent.cEvent = "REFRESH"
		THIS.Parent.LoadResults(THIS.Parent.cCurrentRefType, THIS.Parent.cCurrentSetID, THIS.Parent.cCurrentFileID)
	ENDCASE

	m.lInEvent = .F.
ENDIF

ENDPROC
[END METHODS]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[START PROPERTIES]
Arial, 0, 9, 5, 15, 12, 32, 3, 0
MS Sans Serif, 0, 8, 5, 13, 11, 11, 2, 0
Microsoft Sans Serif, 0, 8, 5, 13, 11, 22, 2, 0
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]
[EOF]
